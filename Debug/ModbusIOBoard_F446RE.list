
ModbusIOBoard_F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .user_data    00000000  08004000  08004000  0000e3fc  2**0
                  CONTENTS
  2 .isr_vector   00000000  08008000  08008000  0000e3fc  2**0
                  CONTENTS
  3 .text         0000b498  08008000  08008000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000770  08013498  08013498  0000d498  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  08013c08  08013c08  0000e3fc  2**0
                  CONTENTS
  6 .ARM          00000008  08013c08  08013c08  0000dc08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  08013c10  08013c10  0000e3fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  08013c10  08013c10  0000dc10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  08013c14  08013c14  0000dc14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         000003fc  20000000  08013c18  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000009e0  20000400  08014014  0000e400  2**3
                  ALLOC
 12 ._user_heap_stack 00000600  20000de0  08014014  0000ede0  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0000e3fc  2**0
                  CONTENTS, READONLY
 14 .debug_info   00018a42  00000000  00000000  0000e42c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000454c  00000000  00000000  00026e6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000014e0  00000000  00000000  0002b3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001033  00000000  00000000  0002c8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025fe0  00000000  00000000  0002d8d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001bee4  00000000  00000000  000538b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d6d1b  00000000  00000000  0006f797  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001464b2  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000679c  00000000  00000000  001464f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000078  00000000  00000000  0014cc94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08008000 <__do_global_dtors_aux>:
 8008000:	b510      	push	{r4, lr}
 8008002:	4c05      	ldr	r4, [pc, #20]	@ (8008018 <__do_global_dtors_aux+0x18>)
 8008004:	7823      	ldrb	r3, [r4, #0]
 8008006:	b933      	cbnz	r3, 8008016 <__do_global_dtors_aux+0x16>
 8008008:	4b04      	ldr	r3, [pc, #16]	@ (800801c <__do_global_dtors_aux+0x1c>)
 800800a:	b113      	cbz	r3, 8008012 <__do_global_dtors_aux+0x12>
 800800c:	4804      	ldr	r0, [pc, #16]	@ (8008020 <__do_global_dtors_aux+0x20>)
 800800e:	f3af 8000 	nop.w
 8008012:	2301      	movs	r3, #1
 8008014:	7023      	strb	r3, [r4, #0]
 8008016:	bd10      	pop	{r4, pc}
 8008018:	20000400 	.word	0x20000400
 800801c:	00000000 	.word	0x00000000
 8008020:	08013480 	.word	0x08013480

08008024 <frame_dummy>:
 8008024:	b508      	push	{r3, lr}
 8008026:	4b03      	ldr	r3, [pc, #12]	@ (8008034 <frame_dummy+0x10>)
 8008028:	b11b      	cbz	r3, 8008032 <frame_dummy+0xe>
 800802a:	4903      	ldr	r1, [pc, #12]	@ (8008038 <frame_dummy+0x14>)
 800802c:	4803      	ldr	r0, [pc, #12]	@ (800803c <frame_dummy+0x18>)
 800802e:	f3af 8000 	nop.w
 8008032:	bd08      	pop	{r3, pc}
 8008034:	00000000 	.word	0x00000000
 8008038:	20000404 	.word	0x20000404
 800803c:	08013480 	.word	0x08013480

08008040 <memchr>:
 8008040:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8008044:	2a10      	cmp	r2, #16
 8008046:	db2b      	blt.n	80080a0 <memchr+0x60>
 8008048:	f010 0f07 	tst.w	r0, #7
 800804c:	d008      	beq.n	8008060 <memchr+0x20>
 800804e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008052:	3a01      	subs	r2, #1
 8008054:	428b      	cmp	r3, r1
 8008056:	d02d      	beq.n	80080b4 <memchr+0x74>
 8008058:	f010 0f07 	tst.w	r0, #7
 800805c:	b342      	cbz	r2, 80080b0 <memchr+0x70>
 800805e:	d1f6      	bne.n	800804e <memchr+0xe>
 8008060:	b4f0      	push	{r4, r5, r6, r7}
 8008062:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008066:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800806a:	f022 0407 	bic.w	r4, r2, #7
 800806e:	f07f 0700 	mvns.w	r7, #0
 8008072:	2300      	movs	r3, #0
 8008074:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008078:	3c08      	subs	r4, #8
 800807a:	ea85 0501 	eor.w	r5, r5, r1
 800807e:	ea86 0601 	eor.w	r6, r6, r1
 8008082:	fa85 f547 	uadd8	r5, r5, r7
 8008086:	faa3 f587 	sel	r5, r3, r7
 800808a:	fa86 f647 	uadd8	r6, r6, r7
 800808e:	faa5 f687 	sel	r6, r5, r7
 8008092:	b98e      	cbnz	r6, 80080b8 <memchr+0x78>
 8008094:	d1ee      	bne.n	8008074 <memchr+0x34>
 8008096:	bcf0      	pop	{r4, r5, r6, r7}
 8008098:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800809c:	f002 0207 	and.w	r2, r2, #7
 80080a0:	b132      	cbz	r2, 80080b0 <memchr+0x70>
 80080a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80080a6:	3a01      	subs	r2, #1
 80080a8:	ea83 0301 	eor.w	r3, r3, r1
 80080ac:	b113      	cbz	r3, 80080b4 <memchr+0x74>
 80080ae:	d1f8      	bne.n	80080a2 <memchr+0x62>
 80080b0:	2000      	movs	r0, #0
 80080b2:	4770      	bx	lr
 80080b4:	3801      	subs	r0, #1
 80080b6:	4770      	bx	lr
 80080b8:	2d00      	cmp	r5, #0
 80080ba:	bf06      	itte	eq
 80080bc:	4635      	moveq	r5, r6
 80080be:	3803      	subeq	r0, #3
 80080c0:	3807      	subne	r0, #7
 80080c2:	f015 0f01 	tst.w	r5, #1
 80080c6:	d107      	bne.n	80080d8 <memchr+0x98>
 80080c8:	3001      	adds	r0, #1
 80080ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80080ce:	bf02      	ittt	eq
 80080d0:	3001      	addeq	r0, #1
 80080d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80080d6:	3001      	addeq	r0, #1
 80080d8:	bcf0      	pop	{r4, r5, r6, r7}
 80080da:	3801      	subs	r0, #1
 80080dc:	4770      	bx	lr
 80080de:	bf00      	nop

080080e0 <strlen>:
 80080e0:	4603      	mov	r3, r0
 80080e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080e6:	2a00      	cmp	r2, #0
 80080e8:	d1fb      	bne.n	80080e2 <strlen+0x2>
 80080ea:	1a18      	subs	r0, r3, r0
 80080ec:	3801      	subs	r0, #1
 80080ee:	4770      	bx	lr

080080f0 <__aeabi_drsub>:
 80080f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80080f4:	e002      	b.n	80080fc <__adddf3>
 80080f6:	bf00      	nop

080080f8 <__aeabi_dsub>:
 80080f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080080fc <__adddf3>:
 80080fc:	b530      	push	{r4, r5, lr}
 80080fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008102:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008106:	ea94 0f05 	teq	r4, r5
 800810a:	bf08      	it	eq
 800810c:	ea90 0f02 	teqeq	r0, r2
 8008110:	bf1f      	itttt	ne
 8008112:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008116:	ea55 0c02 	orrsne.w	ip, r5, r2
 800811a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800811e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008122:	f000 80e2 	beq.w	80082ea <__adddf3+0x1ee>
 8008126:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800812a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800812e:	bfb8      	it	lt
 8008130:	426d      	neglt	r5, r5
 8008132:	dd0c      	ble.n	800814e <__adddf3+0x52>
 8008134:	442c      	add	r4, r5
 8008136:	ea80 0202 	eor.w	r2, r0, r2
 800813a:	ea81 0303 	eor.w	r3, r1, r3
 800813e:	ea82 0000 	eor.w	r0, r2, r0
 8008142:	ea83 0101 	eor.w	r1, r3, r1
 8008146:	ea80 0202 	eor.w	r2, r0, r2
 800814a:	ea81 0303 	eor.w	r3, r1, r3
 800814e:	2d36      	cmp	r5, #54	@ 0x36
 8008150:	bf88      	it	hi
 8008152:	bd30      	pophi	{r4, r5, pc}
 8008154:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8008158:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800815c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8008160:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008164:	d002      	beq.n	800816c <__adddf3+0x70>
 8008166:	4240      	negs	r0, r0
 8008168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800816c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8008170:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008174:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008178:	d002      	beq.n	8008180 <__adddf3+0x84>
 800817a:	4252      	negs	r2, r2
 800817c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008180:	ea94 0f05 	teq	r4, r5
 8008184:	f000 80a7 	beq.w	80082d6 <__adddf3+0x1da>
 8008188:	f1a4 0401 	sub.w	r4, r4, #1
 800818c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008190:	db0d      	blt.n	80081ae <__adddf3+0xb2>
 8008192:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008196:	fa22 f205 	lsr.w	r2, r2, r5
 800819a:	1880      	adds	r0, r0, r2
 800819c:	f141 0100 	adc.w	r1, r1, #0
 80081a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80081a4:	1880      	adds	r0, r0, r2
 80081a6:	fa43 f305 	asr.w	r3, r3, r5
 80081aa:	4159      	adcs	r1, r3
 80081ac:	e00e      	b.n	80081cc <__adddf3+0xd0>
 80081ae:	f1a5 0520 	sub.w	r5, r5, #32
 80081b2:	f10e 0e20 	add.w	lr, lr, #32
 80081b6:	2a01      	cmp	r2, #1
 80081b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80081bc:	bf28      	it	cs
 80081be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80081c2:	fa43 f305 	asr.w	r3, r3, r5
 80081c6:	18c0      	adds	r0, r0, r3
 80081c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80081cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80081d0:	d507      	bpl.n	80081e2 <__adddf3+0xe6>
 80081d2:	f04f 0e00 	mov.w	lr, #0
 80081d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80081da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80081de:	eb6e 0101 	sbc.w	r1, lr, r1
 80081e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80081e6:	d31b      	bcc.n	8008220 <__adddf3+0x124>
 80081e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80081ec:	d30c      	bcc.n	8008208 <__adddf3+0x10c>
 80081ee:	0849      	lsrs	r1, r1, #1
 80081f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80081f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80081f8:	f104 0401 	add.w	r4, r4, #1
 80081fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008200:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8008204:	f080 809a 	bcs.w	800833c <__adddf3+0x240>
 8008208:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800820c:	bf08      	it	eq
 800820e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008212:	f150 0000 	adcs.w	r0, r0, #0
 8008216:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800821a:	ea41 0105 	orr.w	r1, r1, r5
 800821e:	bd30      	pop	{r4, r5, pc}
 8008220:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008224:	4140      	adcs	r0, r0
 8008226:	eb41 0101 	adc.w	r1, r1, r1
 800822a:	3c01      	subs	r4, #1
 800822c:	bf28      	it	cs
 800822e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8008232:	d2e9      	bcs.n	8008208 <__adddf3+0x10c>
 8008234:	f091 0f00 	teq	r1, #0
 8008238:	bf04      	itt	eq
 800823a:	4601      	moveq	r1, r0
 800823c:	2000      	moveq	r0, #0
 800823e:	fab1 f381 	clz	r3, r1
 8008242:	bf08      	it	eq
 8008244:	3320      	addeq	r3, #32
 8008246:	f1a3 030b 	sub.w	r3, r3, #11
 800824a:	f1b3 0220 	subs.w	r2, r3, #32
 800824e:	da0c      	bge.n	800826a <__adddf3+0x16e>
 8008250:	320c      	adds	r2, #12
 8008252:	dd08      	ble.n	8008266 <__adddf3+0x16a>
 8008254:	f102 0c14 	add.w	ip, r2, #20
 8008258:	f1c2 020c 	rsb	r2, r2, #12
 800825c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008260:	fa21 f102 	lsr.w	r1, r1, r2
 8008264:	e00c      	b.n	8008280 <__adddf3+0x184>
 8008266:	f102 0214 	add.w	r2, r2, #20
 800826a:	bfd8      	it	le
 800826c:	f1c2 0c20 	rsble	ip, r2, #32
 8008270:	fa01 f102 	lsl.w	r1, r1, r2
 8008274:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008278:	bfdc      	itt	le
 800827a:	ea41 010c 	orrle.w	r1, r1, ip
 800827e:	4090      	lslle	r0, r2
 8008280:	1ae4      	subs	r4, r4, r3
 8008282:	bfa2      	ittt	ge
 8008284:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008288:	4329      	orrge	r1, r5
 800828a:	bd30      	popge	{r4, r5, pc}
 800828c:	ea6f 0404 	mvn.w	r4, r4
 8008290:	3c1f      	subs	r4, #31
 8008292:	da1c      	bge.n	80082ce <__adddf3+0x1d2>
 8008294:	340c      	adds	r4, #12
 8008296:	dc0e      	bgt.n	80082b6 <__adddf3+0x1ba>
 8008298:	f104 0414 	add.w	r4, r4, #20
 800829c:	f1c4 0220 	rsb	r2, r4, #32
 80082a0:	fa20 f004 	lsr.w	r0, r0, r4
 80082a4:	fa01 f302 	lsl.w	r3, r1, r2
 80082a8:	ea40 0003 	orr.w	r0, r0, r3
 80082ac:	fa21 f304 	lsr.w	r3, r1, r4
 80082b0:	ea45 0103 	orr.w	r1, r5, r3
 80082b4:	bd30      	pop	{r4, r5, pc}
 80082b6:	f1c4 040c 	rsb	r4, r4, #12
 80082ba:	f1c4 0220 	rsb	r2, r4, #32
 80082be:	fa20 f002 	lsr.w	r0, r0, r2
 80082c2:	fa01 f304 	lsl.w	r3, r1, r4
 80082c6:	ea40 0003 	orr.w	r0, r0, r3
 80082ca:	4629      	mov	r1, r5
 80082cc:	bd30      	pop	{r4, r5, pc}
 80082ce:	fa21 f004 	lsr.w	r0, r1, r4
 80082d2:	4629      	mov	r1, r5
 80082d4:	bd30      	pop	{r4, r5, pc}
 80082d6:	f094 0f00 	teq	r4, #0
 80082da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80082de:	bf06      	itte	eq
 80082e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80082e4:	3401      	addeq	r4, #1
 80082e6:	3d01      	subne	r5, #1
 80082e8:	e74e      	b.n	8008188 <__adddf3+0x8c>
 80082ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80082ee:	bf18      	it	ne
 80082f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80082f4:	d029      	beq.n	800834a <__adddf3+0x24e>
 80082f6:	ea94 0f05 	teq	r4, r5
 80082fa:	bf08      	it	eq
 80082fc:	ea90 0f02 	teqeq	r0, r2
 8008300:	d005      	beq.n	800830e <__adddf3+0x212>
 8008302:	ea54 0c00 	orrs.w	ip, r4, r0
 8008306:	bf04      	itt	eq
 8008308:	4619      	moveq	r1, r3
 800830a:	4610      	moveq	r0, r2
 800830c:	bd30      	pop	{r4, r5, pc}
 800830e:	ea91 0f03 	teq	r1, r3
 8008312:	bf1e      	ittt	ne
 8008314:	2100      	movne	r1, #0
 8008316:	2000      	movne	r0, #0
 8008318:	bd30      	popne	{r4, r5, pc}
 800831a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800831e:	d105      	bne.n	800832c <__adddf3+0x230>
 8008320:	0040      	lsls	r0, r0, #1
 8008322:	4149      	adcs	r1, r1
 8008324:	bf28      	it	cs
 8008326:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800832a:	bd30      	pop	{r4, r5, pc}
 800832c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8008330:	bf3c      	itt	cc
 8008332:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8008336:	bd30      	popcc	{r4, r5, pc}
 8008338:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800833c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8008340:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008344:	f04f 0000 	mov.w	r0, #0
 8008348:	bd30      	pop	{r4, r5, pc}
 800834a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800834e:	bf1a      	itte	ne
 8008350:	4619      	movne	r1, r3
 8008352:	4610      	movne	r0, r2
 8008354:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008358:	bf1c      	itt	ne
 800835a:	460b      	movne	r3, r1
 800835c:	4602      	movne	r2, r0
 800835e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008362:	bf06      	itte	eq
 8008364:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008368:	ea91 0f03 	teqeq	r1, r3
 800836c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8008370:	bd30      	pop	{r4, r5, pc}
 8008372:	bf00      	nop

08008374 <__aeabi_ui2d>:
 8008374:	f090 0f00 	teq	r0, #0
 8008378:	bf04      	itt	eq
 800837a:	2100      	moveq	r1, #0
 800837c:	4770      	bxeq	lr
 800837e:	b530      	push	{r4, r5, lr}
 8008380:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8008384:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8008388:	f04f 0500 	mov.w	r5, #0
 800838c:	f04f 0100 	mov.w	r1, #0
 8008390:	e750      	b.n	8008234 <__adddf3+0x138>
 8008392:	bf00      	nop

08008394 <__aeabi_i2d>:
 8008394:	f090 0f00 	teq	r0, #0
 8008398:	bf04      	itt	eq
 800839a:	2100      	moveq	r1, #0
 800839c:	4770      	bxeq	lr
 800839e:	b530      	push	{r4, r5, lr}
 80083a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80083a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80083a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80083ac:	bf48      	it	mi
 80083ae:	4240      	negmi	r0, r0
 80083b0:	f04f 0100 	mov.w	r1, #0
 80083b4:	e73e      	b.n	8008234 <__adddf3+0x138>
 80083b6:	bf00      	nop

080083b8 <__aeabi_f2d>:
 80083b8:	0042      	lsls	r2, r0, #1
 80083ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80083be:	ea4f 0131 	mov.w	r1, r1, rrx
 80083c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80083c6:	bf1f      	itttt	ne
 80083c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80083cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80083d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80083d4:	4770      	bxne	lr
 80083d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80083da:	bf08      	it	eq
 80083dc:	4770      	bxeq	lr
 80083de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80083e2:	bf04      	itt	eq
 80083e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80083e8:	4770      	bxeq	lr
 80083ea:	b530      	push	{r4, r5, lr}
 80083ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80083f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80083f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80083f8:	e71c      	b.n	8008234 <__adddf3+0x138>
 80083fa:	bf00      	nop

080083fc <__aeabi_ul2d>:
 80083fc:	ea50 0201 	orrs.w	r2, r0, r1
 8008400:	bf08      	it	eq
 8008402:	4770      	bxeq	lr
 8008404:	b530      	push	{r4, r5, lr}
 8008406:	f04f 0500 	mov.w	r5, #0
 800840a:	e00a      	b.n	8008422 <__aeabi_l2d+0x16>

0800840c <__aeabi_l2d>:
 800840c:	ea50 0201 	orrs.w	r2, r0, r1
 8008410:	bf08      	it	eq
 8008412:	4770      	bxeq	lr
 8008414:	b530      	push	{r4, r5, lr}
 8008416:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800841a:	d502      	bpl.n	8008422 <__aeabi_l2d+0x16>
 800841c:	4240      	negs	r0, r0
 800841e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008422:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8008426:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800842a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800842e:	f43f aed8 	beq.w	80081e2 <__adddf3+0xe6>
 8008432:	f04f 0203 	mov.w	r2, #3
 8008436:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800843a:	bf18      	it	ne
 800843c:	3203      	addne	r2, #3
 800843e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008442:	bf18      	it	ne
 8008444:	3203      	addne	r2, #3
 8008446:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800844a:	f1c2 0320 	rsb	r3, r2, #32
 800844e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008452:	fa20 f002 	lsr.w	r0, r0, r2
 8008456:	fa01 fe03 	lsl.w	lr, r1, r3
 800845a:	ea40 000e 	orr.w	r0, r0, lr
 800845e:	fa21 f102 	lsr.w	r1, r1, r2
 8008462:	4414      	add	r4, r2
 8008464:	e6bd      	b.n	80081e2 <__adddf3+0xe6>
 8008466:	bf00      	nop

08008468 <__aeabi_dmul>:
 8008468:	b570      	push	{r4, r5, r6, lr}
 800846a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800846e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8008472:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008476:	bf1d      	ittte	ne
 8008478:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800847c:	ea94 0f0c 	teqne	r4, ip
 8008480:	ea95 0f0c 	teqne	r5, ip
 8008484:	f000 f8de 	bleq	8008644 <__aeabi_dmul+0x1dc>
 8008488:	442c      	add	r4, r5
 800848a:	ea81 0603 	eor.w	r6, r1, r3
 800848e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008492:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008496:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800849a:	bf18      	it	ne
 800849c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80084a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80084a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80084a8:	d038      	beq.n	800851c <__aeabi_dmul+0xb4>
 80084aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80084ae:	f04f 0500 	mov.w	r5, #0
 80084b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80084b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80084ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80084be:	f04f 0600 	mov.w	r6, #0
 80084c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80084c6:	f09c 0f00 	teq	ip, #0
 80084ca:	bf18      	it	ne
 80084cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80084d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80084d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80084d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80084dc:	d204      	bcs.n	80084e8 <__aeabi_dmul+0x80>
 80084de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80084e2:	416d      	adcs	r5, r5
 80084e4:	eb46 0606 	adc.w	r6, r6, r6
 80084e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80084ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80084f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80084f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80084f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80084fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8008500:	bf88      	it	hi
 8008502:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8008506:	d81e      	bhi.n	8008546 <__aeabi_dmul+0xde>
 8008508:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800850c:	bf08      	it	eq
 800850e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008512:	f150 0000 	adcs.w	r0, r0, #0
 8008516:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800851a:	bd70      	pop	{r4, r5, r6, pc}
 800851c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8008520:	ea46 0101 	orr.w	r1, r6, r1
 8008524:	ea40 0002 	orr.w	r0, r0, r2
 8008528:	ea81 0103 	eor.w	r1, r1, r3
 800852c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008530:	bfc2      	ittt	gt
 8008532:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008536:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800853a:	bd70      	popgt	{r4, r5, r6, pc}
 800853c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8008540:	f04f 0e00 	mov.w	lr, #0
 8008544:	3c01      	subs	r4, #1
 8008546:	f300 80ab 	bgt.w	80086a0 <__aeabi_dmul+0x238>
 800854a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800854e:	bfde      	ittt	le
 8008550:	2000      	movle	r0, #0
 8008552:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8008556:	bd70      	pople	{r4, r5, r6, pc}
 8008558:	f1c4 0400 	rsb	r4, r4, #0
 800855c:	3c20      	subs	r4, #32
 800855e:	da35      	bge.n	80085cc <__aeabi_dmul+0x164>
 8008560:	340c      	adds	r4, #12
 8008562:	dc1b      	bgt.n	800859c <__aeabi_dmul+0x134>
 8008564:	f104 0414 	add.w	r4, r4, #20
 8008568:	f1c4 0520 	rsb	r5, r4, #32
 800856c:	fa00 f305 	lsl.w	r3, r0, r5
 8008570:	fa20 f004 	lsr.w	r0, r0, r4
 8008574:	fa01 f205 	lsl.w	r2, r1, r5
 8008578:	ea40 0002 	orr.w	r0, r0, r2
 800857c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8008580:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8008584:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008588:	fa21 f604 	lsr.w	r6, r1, r4
 800858c:	eb42 0106 	adc.w	r1, r2, r6
 8008590:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008594:	bf08      	it	eq
 8008596:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800859a:	bd70      	pop	{r4, r5, r6, pc}
 800859c:	f1c4 040c 	rsb	r4, r4, #12
 80085a0:	f1c4 0520 	rsb	r5, r4, #32
 80085a4:	fa00 f304 	lsl.w	r3, r0, r4
 80085a8:	fa20 f005 	lsr.w	r0, r0, r5
 80085ac:	fa01 f204 	lsl.w	r2, r1, r4
 80085b0:	ea40 0002 	orr.w	r0, r0, r2
 80085b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80085b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80085bc:	f141 0100 	adc.w	r1, r1, #0
 80085c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085c4:	bf08      	it	eq
 80085c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085ca:	bd70      	pop	{r4, r5, r6, pc}
 80085cc:	f1c4 0520 	rsb	r5, r4, #32
 80085d0:	fa00 f205 	lsl.w	r2, r0, r5
 80085d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80085d8:	fa20 f304 	lsr.w	r3, r0, r4
 80085dc:	fa01 f205 	lsl.w	r2, r1, r5
 80085e0:	ea43 0302 	orr.w	r3, r3, r2
 80085e4:	fa21 f004 	lsr.w	r0, r1, r4
 80085e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80085ec:	fa21 f204 	lsr.w	r2, r1, r4
 80085f0:	ea20 0002 	bic.w	r0, r0, r2
 80085f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80085f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085fc:	bf08      	it	eq
 80085fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008602:	bd70      	pop	{r4, r5, r6, pc}
 8008604:	f094 0f00 	teq	r4, #0
 8008608:	d10f      	bne.n	800862a <__aeabi_dmul+0x1c2>
 800860a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800860e:	0040      	lsls	r0, r0, #1
 8008610:	eb41 0101 	adc.w	r1, r1, r1
 8008614:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8008618:	bf08      	it	eq
 800861a:	3c01      	subeq	r4, #1
 800861c:	d0f7      	beq.n	800860e <__aeabi_dmul+0x1a6>
 800861e:	ea41 0106 	orr.w	r1, r1, r6
 8008622:	f095 0f00 	teq	r5, #0
 8008626:	bf18      	it	ne
 8008628:	4770      	bxne	lr
 800862a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800862e:	0052      	lsls	r2, r2, #1
 8008630:	eb43 0303 	adc.w	r3, r3, r3
 8008634:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8008638:	bf08      	it	eq
 800863a:	3d01      	subeq	r5, #1
 800863c:	d0f7      	beq.n	800862e <__aeabi_dmul+0x1c6>
 800863e:	ea43 0306 	orr.w	r3, r3, r6
 8008642:	4770      	bx	lr
 8008644:	ea94 0f0c 	teq	r4, ip
 8008648:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800864c:	bf18      	it	ne
 800864e:	ea95 0f0c 	teqne	r5, ip
 8008652:	d00c      	beq.n	800866e <__aeabi_dmul+0x206>
 8008654:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008658:	bf18      	it	ne
 800865a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800865e:	d1d1      	bne.n	8008604 <__aeabi_dmul+0x19c>
 8008660:	ea81 0103 	eor.w	r1, r1, r3
 8008664:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8008668:	f04f 0000 	mov.w	r0, #0
 800866c:	bd70      	pop	{r4, r5, r6, pc}
 800866e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008672:	bf06      	itte	eq
 8008674:	4610      	moveq	r0, r2
 8008676:	4619      	moveq	r1, r3
 8008678:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800867c:	d019      	beq.n	80086b2 <__aeabi_dmul+0x24a>
 800867e:	ea94 0f0c 	teq	r4, ip
 8008682:	d102      	bne.n	800868a <__aeabi_dmul+0x222>
 8008684:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008688:	d113      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800868a:	ea95 0f0c 	teq	r5, ip
 800868e:	d105      	bne.n	800869c <__aeabi_dmul+0x234>
 8008690:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008694:	bf1c      	itt	ne
 8008696:	4610      	movne	r0, r2
 8008698:	4619      	movne	r1, r3
 800869a:	d10a      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800869c:	ea81 0103 	eor.w	r1, r1, r3
 80086a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80086a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80086a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80086ac:	f04f 0000 	mov.w	r0, #0
 80086b0:	bd70      	pop	{r4, r5, r6, pc}
 80086b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80086b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80086ba:	bd70      	pop	{r4, r5, r6, pc}

080086bc <__aeabi_ddiv>:
 80086bc:	b570      	push	{r4, r5, r6, lr}
 80086be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80086c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80086c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80086ca:	bf1d      	ittte	ne
 80086cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80086d0:	ea94 0f0c 	teqne	r4, ip
 80086d4:	ea95 0f0c 	teqne	r5, ip
 80086d8:	f000 f8a7 	bleq	800882a <__aeabi_ddiv+0x16e>
 80086dc:	eba4 0405 	sub.w	r4, r4, r5
 80086e0:	ea81 0e03 	eor.w	lr, r1, r3
 80086e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80086e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80086ec:	f000 8088 	beq.w	8008800 <__aeabi_ddiv+0x144>
 80086f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80086f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80086f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80086fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008700:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008704:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008708:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800870c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008710:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8008714:	429d      	cmp	r5, r3
 8008716:	bf08      	it	eq
 8008718:	4296      	cmpeq	r6, r2
 800871a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800871e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8008722:	d202      	bcs.n	800872a <__aeabi_ddiv+0x6e>
 8008724:	085b      	lsrs	r3, r3, #1
 8008726:	ea4f 0232 	mov.w	r2, r2, rrx
 800872a:	1ab6      	subs	r6, r6, r2
 800872c:	eb65 0503 	sbc.w	r5, r5, r3
 8008730:	085b      	lsrs	r3, r3, #1
 8008732:	ea4f 0232 	mov.w	r2, r2, rrx
 8008736:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800873a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800873e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008742:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008746:	bf22      	ittt	cs
 8008748:	1ab6      	subcs	r6, r6, r2
 800874a:	4675      	movcs	r5, lr
 800874c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008750:	085b      	lsrs	r3, r3, #1
 8008752:	ea4f 0232 	mov.w	r2, r2, rrx
 8008756:	ebb6 0e02 	subs.w	lr, r6, r2
 800875a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800875e:	bf22      	ittt	cs
 8008760:	1ab6      	subcs	r6, r6, r2
 8008762:	4675      	movcs	r5, lr
 8008764:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008768:	085b      	lsrs	r3, r3, #1
 800876a:	ea4f 0232 	mov.w	r2, r2, rrx
 800876e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008772:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008776:	bf22      	ittt	cs
 8008778:	1ab6      	subcs	r6, r6, r2
 800877a:	4675      	movcs	r5, lr
 800877c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008780:	085b      	lsrs	r3, r3, #1
 8008782:	ea4f 0232 	mov.w	r2, r2, rrx
 8008786:	ebb6 0e02 	subs.w	lr, r6, r2
 800878a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800878e:	bf22      	ittt	cs
 8008790:	1ab6      	subcs	r6, r6, r2
 8008792:	4675      	movcs	r5, lr
 8008794:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008798:	ea55 0e06 	orrs.w	lr, r5, r6
 800879c:	d018      	beq.n	80087d0 <__aeabi_ddiv+0x114>
 800879e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80087a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80087a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80087aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80087ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80087b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80087b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80087ba:	d1c0      	bne.n	800873e <__aeabi_ddiv+0x82>
 80087bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80087c0:	d10b      	bne.n	80087da <__aeabi_ddiv+0x11e>
 80087c2:	ea41 0100 	orr.w	r1, r1, r0
 80087c6:	f04f 0000 	mov.w	r0, #0
 80087ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80087ce:	e7b6      	b.n	800873e <__aeabi_ddiv+0x82>
 80087d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80087d4:	bf04      	itt	eq
 80087d6:	4301      	orreq	r1, r0
 80087d8:	2000      	moveq	r0, #0
 80087da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80087de:	bf88      	it	hi
 80087e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80087e4:	f63f aeaf 	bhi.w	8008546 <__aeabi_dmul+0xde>
 80087e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80087ec:	bf04      	itt	eq
 80087ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80087f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80087f6:	f150 0000 	adcs.w	r0, r0, #0
 80087fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80087fe:	bd70      	pop	{r4, r5, r6, pc}
 8008800:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8008804:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008808:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800880c:	bfc2      	ittt	gt
 800880e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008812:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008816:	bd70      	popgt	{r4, r5, r6, pc}
 8008818:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800881c:	f04f 0e00 	mov.w	lr, #0
 8008820:	3c01      	subs	r4, #1
 8008822:	e690      	b.n	8008546 <__aeabi_dmul+0xde>
 8008824:	ea45 0e06 	orr.w	lr, r5, r6
 8008828:	e68d      	b.n	8008546 <__aeabi_dmul+0xde>
 800882a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800882e:	ea94 0f0c 	teq	r4, ip
 8008832:	bf08      	it	eq
 8008834:	ea95 0f0c 	teqeq	r5, ip
 8008838:	f43f af3b 	beq.w	80086b2 <__aeabi_dmul+0x24a>
 800883c:	ea94 0f0c 	teq	r4, ip
 8008840:	d10a      	bne.n	8008858 <__aeabi_ddiv+0x19c>
 8008842:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008846:	f47f af34 	bne.w	80086b2 <__aeabi_dmul+0x24a>
 800884a:	ea95 0f0c 	teq	r5, ip
 800884e:	f47f af25 	bne.w	800869c <__aeabi_dmul+0x234>
 8008852:	4610      	mov	r0, r2
 8008854:	4619      	mov	r1, r3
 8008856:	e72c      	b.n	80086b2 <__aeabi_dmul+0x24a>
 8008858:	ea95 0f0c 	teq	r5, ip
 800885c:	d106      	bne.n	800886c <__aeabi_ddiv+0x1b0>
 800885e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008862:	f43f aefd 	beq.w	8008660 <__aeabi_dmul+0x1f8>
 8008866:	4610      	mov	r0, r2
 8008868:	4619      	mov	r1, r3
 800886a:	e722      	b.n	80086b2 <__aeabi_dmul+0x24a>
 800886c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008870:	bf18      	it	ne
 8008872:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008876:	f47f aec5 	bne.w	8008604 <__aeabi_dmul+0x19c>
 800887a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800887e:	f47f af0d 	bne.w	800869c <__aeabi_dmul+0x234>
 8008882:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008886:	f47f aeeb 	bne.w	8008660 <__aeabi_dmul+0x1f8>
 800888a:	e712      	b.n	80086b2 <__aeabi_dmul+0x24a>

0800888c <__gedf2>:
 800888c:	f04f 3cff 	mov.w	ip, #4294967295
 8008890:	e006      	b.n	80088a0 <__cmpdf2+0x4>
 8008892:	bf00      	nop

08008894 <__ledf2>:
 8008894:	f04f 0c01 	mov.w	ip, #1
 8008898:	e002      	b.n	80088a0 <__cmpdf2+0x4>
 800889a:	bf00      	nop

0800889c <__cmpdf2>:
 800889c:	f04f 0c01 	mov.w	ip, #1
 80088a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80088a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80088b0:	bf18      	it	ne
 80088b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80088b6:	d01b      	beq.n	80088f0 <__cmpdf2+0x54>
 80088b8:	b001      	add	sp, #4
 80088ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80088be:	bf0c      	ite	eq
 80088c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80088c4:	ea91 0f03 	teqne	r1, r3
 80088c8:	bf02      	ittt	eq
 80088ca:	ea90 0f02 	teqeq	r0, r2
 80088ce:	2000      	moveq	r0, #0
 80088d0:	4770      	bxeq	lr
 80088d2:	f110 0f00 	cmn.w	r0, #0
 80088d6:	ea91 0f03 	teq	r1, r3
 80088da:	bf58      	it	pl
 80088dc:	4299      	cmppl	r1, r3
 80088de:	bf08      	it	eq
 80088e0:	4290      	cmpeq	r0, r2
 80088e2:	bf2c      	ite	cs
 80088e4:	17d8      	asrcs	r0, r3, #31
 80088e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80088ea:	f040 0001 	orr.w	r0, r0, #1
 80088ee:	4770      	bx	lr
 80088f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088f8:	d102      	bne.n	8008900 <__cmpdf2+0x64>
 80088fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80088fe:	d107      	bne.n	8008910 <__cmpdf2+0x74>
 8008900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008908:	d1d6      	bne.n	80088b8 <__cmpdf2+0x1c>
 800890a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800890e:	d0d3      	beq.n	80088b8 <__cmpdf2+0x1c>
 8008910:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop

08008918 <__aeabi_cdrcmple>:
 8008918:	4684      	mov	ip, r0
 800891a:	4610      	mov	r0, r2
 800891c:	4662      	mov	r2, ip
 800891e:	468c      	mov	ip, r1
 8008920:	4619      	mov	r1, r3
 8008922:	4663      	mov	r3, ip
 8008924:	e000      	b.n	8008928 <__aeabi_cdcmpeq>
 8008926:	bf00      	nop

08008928 <__aeabi_cdcmpeq>:
 8008928:	b501      	push	{r0, lr}
 800892a:	f7ff ffb7 	bl	800889c <__cmpdf2>
 800892e:	2800      	cmp	r0, #0
 8008930:	bf48      	it	mi
 8008932:	f110 0f00 	cmnmi.w	r0, #0
 8008936:	bd01      	pop	{r0, pc}

08008938 <__aeabi_dcmpeq>:
 8008938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800893c:	f7ff fff4 	bl	8008928 <__aeabi_cdcmpeq>
 8008940:	bf0c      	ite	eq
 8008942:	2001      	moveq	r0, #1
 8008944:	2000      	movne	r0, #0
 8008946:	f85d fb08 	ldr.w	pc, [sp], #8
 800894a:	bf00      	nop

0800894c <__aeabi_dcmplt>:
 800894c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008950:	f7ff ffea 	bl	8008928 <__aeabi_cdcmpeq>
 8008954:	bf34      	ite	cc
 8008956:	2001      	movcc	r0, #1
 8008958:	2000      	movcs	r0, #0
 800895a:	f85d fb08 	ldr.w	pc, [sp], #8
 800895e:	bf00      	nop

08008960 <__aeabi_dcmple>:
 8008960:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008964:	f7ff ffe0 	bl	8008928 <__aeabi_cdcmpeq>
 8008968:	bf94      	ite	ls
 800896a:	2001      	movls	r0, #1
 800896c:	2000      	movhi	r0, #0
 800896e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008972:	bf00      	nop

08008974 <__aeabi_dcmpge>:
 8008974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008978:	f7ff ffce 	bl	8008918 <__aeabi_cdrcmple>
 800897c:	bf94      	ite	ls
 800897e:	2001      	movls	r0, #1
 8008980:	2000      	movhi	r0, #0
 8008982:	f85d fb08 	ldr.w	pc, [sp], #8
 8008986:	bf00      	nop

08008988 <__aeabi_dcmpgt>:
 8008988:	f84d ed08 	str.w	lr, [sp, #-8]!
 800898c:	f7ff ffc4 	bl	8008918 <__aeabi_cdrcmple>
 8008990:	bf34      	ite	cc
 8008992:	2001      	movcc	r0, #1
 8008994:	2000      	movcs	r0, #0
 8008996:	f85d fb08 	ldr.w	pc, [sp], #8
 800899a:	bf00      	nop

0800899c <__aeabi_dcmpun>:
 800899c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80089a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089a4:	d102      	bne.n	80089ac <__aeabi_dcmpun+0x10>
 80089a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80089aa:	d10a      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80089b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089b4:	d102      	bne.n	80089bc <__aeabi_dcmpun+0x20>
 80089b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80089ba:	d102      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089bc:	f04f 0000 	mov.w	r0, #0
 80089c0:	4770      	bx	lr
 80089c2:	f04f 0001 	mov.w	r0, #1
 80089c6:	4770      	bx	lr

080089c8 <__aeabi_d2iz>:
 80089c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80089cc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80089d0:	d215      	bcs.n	80089fe <__aeabi_d2iz+0x36>
 80089d2:	d511      	bpl.n	80089f8 <__aeabi_d2iz+0x30>
 80089d4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80089d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80089dc:	d912      	bls.n	8008a04 <__aeabi_d2iz+0x3c>
 80089de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80089e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80089e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80089ea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80089ee:	fa23 f002 	lsr.w	r0, r3, r2
 80089f2:	bf18      	it	ne
 80089f4:	4240      	negne	r0, r0
 80089f6:	4770      	bx	lr
 80089f8:	f04f 0000 	mov.w	r0, #0
 80089fc:	4770      	bx	lr
 80089fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a02:	d105      	bne.n	8008a10 <__aeabi_d2iz+0x48>
 8008a04:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8008a08:	bf08      	it	eq
 8008a0a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8008a0e:	4770      	bx	lr
 8008a10:	f04f 0000 	mov.w	r0, #0
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop

08008a18 <__aeabi_d2uiz>:
 8008a18:	004a      	lsls	r2, r1, #1
 8008a1a:	d211      	bcs.n	8008a40 <__aeabi_d2uiz+0x28>
 8008a1c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8008a20:	d211      	bcs.n	8008a46 <__aeabi_d2uiz+0x2e>
 8008a22:	d50d      	bpl.n	8008a40 <__aeabi_d2uiz+0x28>
 8008a24:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8008a28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008a2c:	d40e      	bmi.n	8008a4c <__aeabi_d2uiz+0x34>
 8008a2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008a32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008a36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008a3a:	fa23 f002 	lsr.w	r0, r3, r2
 8008a3e:	4770      	bx	lr
 8008a40:	f04f 0000 	mov.w	r0, #0
 8008a44:	4770      	bx	lr
 8008a46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a4a:	d102      	bne.n	8008a52 <__aeabi_d2uiz+0x3a>
 8008a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a50:	4770      	bx	lr
 8008a52:	f04f 0000 	mov.w	r0, #0
 8008a56:	4770      	bx	lr

08008a58 <__aeabi_uldivmod>:
 8008a58:	b953      	cbnz	r3, 8008a70 <__aeabi_uldivmod+0x18>
 8008a5a:	b94a      	cbnz	r2, 8008a70 <__aeabi_uldivmod+0x18>
 8008a5c:	2900      	cmp	r1, #0
 8008a5e:	bf08      	it	eq
 8008a60:	2800      	cmpeq	r0, #0
 8008a62:	bf1c      	itt	ne
 8008a64:	f04f 31ff 	movne.w	r1, #4294967295
 8008a68:	f04f 30ff 	movne.w	r0, #4294967295
 8008a6c:	f000 b988 	b.w	8008d80 <__aeabi_idiv0>
 8008a70:	f1ad 0c08 	sub.w	ip, sp, #8
 8008a74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008a78:	f000 f824 	bl	8008ac4 <__udivmoddi4>
 8008a7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008a80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a84:	b004      	add	sp, #16
 8008a86:	4770      	bx	lr

08008a88 <__aeabi_d2ulz>:
 8008a88:	b5d0      	push	{r4, r6, r7, lr}
 8008a8a:	4b0c      	ldr	r3, [pc, #48]	@ (8008abc <__aeabi_d2ulz+0x34>)
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	4606      	mov	r6, r0
 8008a90:	460f      	mov	r7, r1
 8008a92:	f7ff fce9 	bl	8008468 <__aeabi_dmul>
 8008a96:	f7ff ffbf 	bl	8008a18 <__aeabi_d2uiz>
 8008a9a:	4604      	mov	r4, r0
 8008a9c:	f7ff fc6a 	bl	8008374 <__aeabi_ui2d>
 8008aa0:	4b07      	ldr	r3, [pc, #28]	@ (8008ac0 <__aeabi_d2ulz+0x38>)
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	f7ff fce0 	bl	8008468 <__aeabi_dmul>
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	460b      	mov	r3, r1
 8008aac:	4630      	mov	r0, r6
 8008aae:	4639      	mov	r1, r7
 8008ab0:	f7ff fb22 	bl	80080f8 <__aeabi_dsub>
 8008ab4:	f7ff ffb0 	bl	8008a18 <__aeabi_d2uiz>
 8008ab8:	4621      	mov	r1, r4
 8008aba:	bdd0      	pop	{r4, r6, r7, pc}
 8008abc:	3df00000 	.word	0x3df00000
 8008ac0:	41f00000 	.word	0x41f00000

08008ac4 <__udivmoddi4>:
 8008ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ac8:	9d08      	ldr	r5, [sp, #32]
 8008aca:	460c      	mov	r4, r1
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d14e      	bne.n	8008b6e <__udivmoddi4+0xaa>
 8008ad0:	4694      	mov	ip, r2
 8008ad2:	458c      	cmp	ip, r1
 8008ad4:	4686      	mov	lr, r0
 8008ad6:	fab2 f282 	clz	r2, r2
 8008ada:	d962      	bls.n	8008ba2 <__udivmoddi4+0xde>
 8008adc:	b14a      	cbz	r2, 8008af2 <__udivmoddi4+0x2e>
 8008ade:	f1c2 0320 	rsb	r3, r2, #32
 8008ae2:	4091      	lsls	r1, r2
 8008ae4:	fa20 f303 	lsr.w	r3, r0, r3
 8008ae8:	fa0c fc02 	lsl.w	ip, ip, r2
 8008aec:	4319      	orrs	r1, r3
 8008aee:	fa00 fe02 	lsl.w	lr, r0, r2
 8008af2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8008af6:	fa1f f68c 	uxth.w	r6, ip
 8008afa:	fbb1 f4f7 	udiv	r4, r1, r7
 8008afe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8008b02:	fb07 1114 	mls	r1, r7, r4, r1
 8008b06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008b0a:	fb04 f106 	mul.w	r1, r4, r6
 8008b0e:	4299      	cmp	r1, r3
 8008b10:	d90a      	bls.n	8008b28 <__udivmoddi4+0x64>
 8008b12:	eb1c 0303 	adds.w	r3, ip, r3
 8008b16:	f104 30ff 	add.w	r0, r4, #4294967295
 8008b1a:	f080 8112 	bcs.w	8008d42 <__udivmoddi4+0x27e>
 8008b1e:	4299      	cmp	r1, r3
 8008b20:	f240 810f 	bls.w	8008d42 <__udivmoddi4+0x27e>
 8008b24:	3c02      	subs	r4, #2
 8008b26:	4463      	add	r3, ip
 8008b28:	1a59      	subs	r1, r3, r1
 8008b2a:	fa1f f38e 	uxth.w	r3, lr
 8008b2e:	fbb1 f0f7 	udiv	r0, r1, r7
 8008b32:	fb07 1110 	mls	r1, r7, r0, r1
 8008b36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008b3a:	fb00 f606 	mul.w	r6, r0, r6
 8008b3e:	429e      	cmp	r6, r3
 8008b40:	d90a      	bls.n	8008b58 <__udivmoddi4+0x94>
 8008b42:	eb1c 0303 	adds.w	r3, ip, r3
 8008b46:	f100 31ff 	add.w	r1, r0, #4294967295
 8008b4a:	f080 80fc 	bcs.w	8008d46 <__udivmoddi4+0x282>
 8008b4e:	429e      	cmp	r6, r3
 8008b50:	f240 80f9 	bls.w	8008d46 <__udivmoddi4+0x282>
 8008b54:	4463      	add	r3, ip
 8008b56:	3802      	subs	r0, #2
 8008b58:	1b9b      	subs	r3, r3, r6
 8008b5a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8008b5e:	2100      	movs	r1, #0
 8008b60:	b11d      	cbz	r5, 8008b6a <__udivmoddi4+0xa6>
 8008b62:	40d3      	lsrs	r3, r2
 8008b64:	2200      	movs	r2, #0
 8008b66:	e9c5 3200 	strd	r3, r2, [r5]
 8008b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b6e:	428b      	cmp	r3, r1
 8008b70:	d905      	bls.n	8008b7e <__udivmoddi4+0xba>
 8008b72:	b10d      	cbz	r5, 8008b78 <__udivmoddi4+0xb4>
 8008b74:	e9c5 0100 	strd	r0, r1, [r5]
 8008b78:	2100      	movs	r1, #0
 8008b7a:	4608      	mov	r0, r1
 8008b7c:	e7f5      	b.n	8008b6a <__udivmoddi4+0xa6>
 8008b7e:	fab3 f183 	clz	r1, r3
 8008b82:	2900      	cmp	r1, #0
 8008b84:	d146      	bne.n	8008c14 <__udivmoddi4+0x150>
 8008b86:	42a3      	cmp	r3, r4
 8008b88:	d302      	bcc.n	8008b90 <__udivmoddi4+0xcc>
 8008b8a:	4290      	cmp	r0, r2
 8008b8c:	f0c0 80f0 	bcc.w	8008d70 <__udivmoddi4+0x2ac>
 8008b90:	1a86      	subs	r6, r0, r2
 8008b92:	eb64 0303 	sbc.w	r3, r4, r3
 8008b96:	2001      	movs	r0, #1
 8008b98:	2d00      	cmp	r5, #0
 8008b9a:	d0e6      	beq.n	8008b6a <__udivmoddi4+0xa6>
 8008b9c:	e9c5 6300 	strd	r6, r3, [r5]
 8008ba0:	e7e3      	b.n	8008b6a <__udivmoddi4+0xa6>
 8008ba2:	2a00      	cmp	r2, #0
 8008ba4:	f040 8090 	bne.w	8008cc8 <__udivmoddi4+0x204>
 8008ba8:	eba1 040c 	sub.w	r4, r1, ip
 8008bac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8008bb0:	fa1f f78c 	uxth.w	r7, ip
 8008bb4:	2101      	movs	r1, #1
 8008bb6:	fbb4 f6f8 	udiv	r6, r4, r8
 8008bba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8008bbe:	fb08 4416 	mls	r4, r8, r6, r4
 8008bc2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008bc6:	fb07 f006 	mul.w	r0, r7, r6
 8008bca:	4298      	cmp	r0, r3
 8008bcc:	d908      	bls.n	8008be0 <__udivmoddi4+0x11c>
 8008bce:	eb1c 0303 	adds.w	r3, ip, r3
 8008bd2:	f106 34ff 	add.w	r4, r6, #4294967295
 8008bd6:	d202      	bcs.n	8008bde <__udivmoddi4+0x11a>
 8008bd8:	4298      	cmp	r0, r3
 8008bda:	f200 80cd 	bhi.w	8008d78 <__udivmoddi4+0x2b4>
 8008bde:	4626      	mov	r6, r4
 8008be0:	1a1c      	subs	r4, r3, r0
 8008be2:	fa1f f38e 	uxth.w	r3, lr
 8008be6:	fbb4 f0f8 	udiv	r0, r4, r8
 8008bea:	fb08 4410 	mls	r4, r8, r0, r4
 8008bee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008bf2:	fb00 f707 	mul.w	r7, r0, r7
 8008bf6:	429f      	cmp	r7, r3
 8008bf8:	d908      	bls.n	8008c0c <__udivmoddi4+0x148>
 8008bfa:	eb1c 0303 	adds.w	r3, ip, r3
 8008bfe:	f100 34ff 	add.w	r4, r0, #4294967295
 8008c02:	d202      	bcs.n	8008c0a <__udivmoddi4+0x146>
 8008c04:	429f      	cmp	r7, r3
 8008c06:	f200 80b0 	bhi.w	8008d6a <__udivmoddi4+0x2a6>
 8008c0a:	4620      	mov	r0, r4
 8008c0c:	1bdb      	subs	r3, r3, r7
 8008c0e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8008c12:	e7a5      	b.n	8008b60 <__udivmoddi4+0x9c>
 8008c14:	f1c1 0620 	rsb	r6, r1, #32
 8008c18:	408b      	lsls	r3, r1
 8008c1a:	fa22 f706 	lsr.w	r7, r2, r6
 8008c1e:	431f      	orrs	r7, r3
 8008c20:	fa20 fc06 	lsr.w	ip, r0, r6
 8008c24:	fa04 f301 	lsl.w	r3, r4, r1
 8008c28:	ea43 030c 	orr.w	r3, r3, ip
 8008c2c:	40f4      	lsrs	r4, r6
 8008c2e:	fa00 f801 	lsl.w	r8, r0, r1
 8008c32:	0c38      	lsrs	r0, r7, #16
 8008c34:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8008c38:	fbb4 fef0 	udiv	lr, r4, r0
 8008c3c:	fa1f fc87 	uxth.w	ip, r7
 8008c40:	fb00 441e 	mls	r4, r0, lr, r4
 8008c44:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8008c48:	fb0e f90c 	mul.w	r9, lr, ip
 8008c4c:	45a1      	cmp	r9, r4
 8008c4e:	fa02 f201 	lsl.w	r2, r2, r1
 8008c52:	d90a      	bls.n	8008c6a <__udivmoddi4+0x1a6>
 8008c54:	193c      	adds	r4, r7, r4
 8008c56:	f10e 3aff 	add.w	sl, lr, #4294967295
 8008c5a:	f080 8084 	bcs.w	8008d66 <__udivmoddi4+0x2a2>
 8008c5e:	45a1      	cmp	r9, r4
 8008c60:	f240 8081 	bls.w	8008d66 <__udivmoddi4+0x2a2>
 8008c64:	f1ae 0e02 	sub.w	lr, lr, #2
 8008c68:	443c      	add	r4, r7
 8008c6a:	eba4 0409 	sub.w	r4, r4, r9
 8008c6e:	fa1f f983 	uxth.w	r9, r3
 8008c72:	fbb4 f3f0 	udiv	r3, r4, r0
 8008c76:	fb00 4413 	mls	r4, r0, r3, r4
 8008c7a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8008c7e:	fb03 fc0c 	mul.w	ip, r3, ip
 8008c82:	45a4      	cmp	ip, r4
 8008c84:	d907      	bls.n	8008c96 <__udivmoddi4+0x1d2>
 8008c86:	193c      	adds	r4, r7, r4
 8008c88:	f103 30ff 	add.w	r0, r3, #4294967295
 8008c8c:	d267      	bcs.n	8008d5e <__udivmoddi4+0x29a>
 8008c8e:	45a4      	cmp	ip, r4
 8008c90:	d965      	bls.n	8008d5e <__udivmoddi4+0x29a>
 8008c92:	3b02      	subs	r3, #2
 8008c94:	443c      	add	r4, r7
 8008c96:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8008c9a:	fba0 9302 	umull	r9, r3, r0, r2
 8008c9e:	eba4 040c 	sub.w	r4, r4, ip
 8008ca2:	429c      	cmp	r4, r3
 8008ca4:	46ce      	mov	lr, r9
 8008ca6:	469c      	mov	ip, r3
 8008ca8:	d351      	bcc.n	8008d4e <__udivmoddi4+0x28a>
 8008caa:	d04e      	beq.n	8008d4a <__udivmoddi4+0x286>
 8008cac:	b155      	cbz	r5, 8008cc4 <__udivmoddi4+0x200>
 8008cae:	ebb8 030e 	subs.w	r3, r8, lr
 8008cb2:	eb64 040c 	sbc.w	r4, r4, ip
 8008cb6:	fa04 f606 	lsl.w	r6, r4, r6
 8008cba:	40cb      	lsrs	r3, r1
 8008cbc:	431e      	orrs	r6, r3
 8008cbe:	40cc      	lsrs	r4, r1
 8008cc0:	e9c5 6400 	strd	r6, r4, [r5]
 8008cc4:	2100      	movs	r1, #0
 8008cc6:	e750      	b.n	8008b6a <__udivmoddi4+0xa6>
 8008cc8:	f1c2 0320 	rsb	r3, r2, #32
 8008ccc:	fa20 f103 	lsr.w	r1, r0, r3
 8008cd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8008cd4:	fa24 f303 	lsr.w	r3, r4, r3
 8008cd8:	4094      	lsls	r4, r2
 8008cda:	430c      	orrs	r4, r1
 8008cdc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8008ce0:	fa00 fe02 	lsl.w	lr, r0, r2
 8008ce4:	fa1f f78c 	uxth.w	r7, ip
 8008ce8:	fbb3 f0f8 	udiv	r0, r3, r8
 8008cec:	fb08 3110 	mls	r1, r8, r0, r3
 8008cf0:	0c23      	lsrs	r3, r4, #16
 8008cf2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008cf6:	fb00 f107 	mul.w	r1, r0, r7
 8008cfa:	4299      	cmp	r1, r3
 8008cfc:	d908      	bls.n	8008d10 <__udivmoddi4+0x24c>
 8008cfe:	eb1c 0303 	adds.w	r3, ip, r3
 8008d02:	f100 36ff 	add.w	r6, r0, #4294967295
 8008d06:	d22c      	bcs.n	8008d62 <__udivmoddi4+0x29e>
 8008d08:	4299      	cmp	r1, r3
 8008d0a:	d92a      	bls.n	8008d62 <__udivmoddi4+0x29e>
 8008d0c:	3802      	subs	r0, #2
 8008d0e:	4463      	add	r3, ip
 8008d10:	1a5b      	subs	r3, r3, r1
 8008d12:	b2a4      	uxth	r4, r4
 8008d14:	fbb3 f1f8 	udiv	r1, r3, r8
 8008d18:	fb08 3311 	mls	r3, r8, r1, r3
 8008d1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008d20:	fb01 f307 	mul.w	r3, r1, r7
 8008d24:	42a3      	cmp	r3, r4
 8008d26:	d908      	bls.n	8008d3a <__udivmoddi4+0x276>
 8008d28:	eb1c 0404 	adds.w	r4, ip, r4
 8008d2c:	f101 36ff 	add.w	r6, r1, #4294967295
 8008d30:	d213      	bcs.n	8008d5a <__udivmoddi4+0x296>
 8008d32:	42a3      	cmp	r3, r4
 8008d34:	d911      	bls.n	8008d5a <__udivmoddi4+0x296>
 8008d36:	3902      	subs	r1, #2
 8008d38:	4464      	add	r4, ip
 8008d3a:	1ae4      	subs	r4, r4, r3
 8008d3c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008d40:	e739      	b.n	8008bb6 <__udivmoddi4+0xf2>
 8008d42:	4604      	mov	r4, r0
 8008d44:	e6f0      	b.n	8008b28 <__udivmoddi4+0x64>
 8008d46:	4608      	mov	r0, r1
 8008d48:	e706      	b.n	8008b58 <__udivmoddi4+0x94>
 8008d4a:	45c8      	cmp	r8, r9
 8008d4c:	d2ae      	bcs.n	8008cac <__udivmoddi4+0x1e8>
 8008d4e:	ebb9 0e02 	subs.w	lr, r9, r2
 8008d52:	eb63 0c07 	sbc.w	ip, r3, r7
 8008d56:	3801      	subs	r0, #1
 8008d58:	e7a8      	b.n	8008cac <__udivmoddi4+0x1e8>
 8008d5a:	4631      	mov	r1, r6
 8008d5c:	e7ed      	b.n	8008d3a <__udivmoddi4+0x276>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	e799      	b.n	8008c96 <__udivmoddi4+0x1d2>
 8008d62:	4630      	mov	r0, r6
 8008d64:	e7d4      	b.n	8008d10 <__udivmoddi4+0x24c>
 8008d66:	46d6      	mov	lr, sl
 8008d68:	e77f      	b.n	8008c6a <__udivmoddi4+0x1a6>
 8008d6a:	4463      	add	r3, ip
 8008d6c:	3802      	subs	r0, #2
 8008d6e:	e74d      	b.n	8008c0c <__udivmoddi4+0x148>
 8008d70:	4606      	mov	r6, r0
 8008d72:	4623      	mov	r3, r4
 8008d74:	4608      	mov	r0, r1
 8008d76:	e70f      	b.n	8008b98 <__udivmoddi4+0xd4>
 8008d78:	3e02      	subs	r6, #2
 8008d7a:	4463      	add	r3, ip
 8008d7c:	e730      	b.n	8008be0 <__udivmoddi4+0x11c>
 8008d7e:	bf00      	nop

08008d80 <__aeabi_idiv0>:
 8008d80:	4770      	bx	lr
 8008d82:	bf00      	nop

08008d84 <PrintMBRequest>:

static void PrintMBRequest(uint16_t address, uint16_t value, uint8_t errorStatus );


/*internal services---------*/
static void PrintMBRequest(uint16_t address, uint16_t value, uint8_t errorStatus ){
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b082      	sub	sp, #8
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	80fb      	strh	r3, [r7, #6]
 8008d8e:	460b      	mov	r3, r1
 8008d90:	80bb      	strh	r3, [r7, #4]
 8008d92:	4613      	mov	r3, r2
 8008d94:	70fb      	strb	r3, [r7, #3]
	if(errorStatus == MB_OK){
 8008d96:	78fb      	ldrb	r3, [r7, #3]
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d106      	bne.n	8008daa <PrintMBRequest+0x26>
		DEBUG_SPRINT_NL("MB Reg: %d -> %d",address, value);
 8008d9c:	88fb      	ldrh	r3, [r7, #6]
 8008d9e:	88ba      	ldrh	r2, [r7, #4]
 8008da0:	4619      	mov	r1, r3
 8008da2:	4806      	ldr	r0, [pc, #24]	@ (8008dbc <PrintMBRequest+0x38>)
 8008da4:	f002 fc20 	bl	800b5e8 <DEBUG_SPRINT_NL>
	}else{
		DEBUG_SPRINT_NL("MB Err: [%d] Invalid Request!",address);
	}

}
 8008da8:	e004      	b.n	8008db4 <PrintMBRequest+0x30>
		DEBUG_SPRINT_NL("MB Err: [%d] Invalid Request!",address);
 8008daa:	88fb      	ldrh	r3, [r7, #6]
 8008dac:	4619      	mov	r1, r3
 8008dae:	4804      	ldr	r0, [pc, #16]	@ (8008dc0 <PrintMBRequest+0x3c>)
 8008db0:	f002 fc1a 	bl	800b5e8 <DEBUG_SPRINT_NL>
}
 8008db4:	bf00      	nop
 8008db6:	3708      	adds	r7, #8
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}
 8008dbc:	08013498 	.word	0x08013498
 8008dc0:	080134ac 	.word	0x080134ac

08008dc4 <CB_MB_InitCallback>:


/**
  * @brief callback initialize
  */
void CB_MB_InitCallback(void){
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	af00      	add	r7, sp, #0

	MB_attachDICallback(&CB_MB_readDICallback);
 8008dc8:	4807      	ldr	r0, [pc, #28]	@ (8008de8 <CB_MB_InitCallback+0x24>)
 8008dca:	f003 fdd3 	bl	800c974 <MB_attachDICallback>
	MB_attachCOCallback(&CB_MB_writeCOCallback, &CB_MB_readCOCallback);
 8008dce:	4907      	ldr	r1, [pc, #28]	@ (8008dec <CB_MB_InitCallback+0x28>)
 8008dd0:	4807      	ldr	r0, [pc, #28]	@ (8008df0 <CB_MB_InitCallback+0x2c>)
 8008dd2:	f003 fddf 	bl	800c994 <MB_attachCOCallback>
	MB_attachIRCallback(&CB_MB_readIRCallback);
 8008dd6:	4807      	ldr	r0, [pc, #28]	@ (8008df4 <CB_MB_InitCallback+0x30>)
 8008dd8:	f003 fdf2 	bl	800c9c0 <MB_attachIRCallback>
	MB_attachHRCallback(&CB_MB_writeHRCallback, &CB_MB_readHRCallback);
 8008ddc:	4906      	ldr	r1, [pc, #24]	@ (8008df8 <CB_MB_InitCallback+0x34>)
 8008dde:	4807      	ldr	r0, [pc, #28]	@ (8008dfc <CB_MB_InitCallback+0x38>)
 8008de0:	f003 fdfe 	bl	800c9e0 <MB_attachHRCallback>

}
 8008de4:	bf00      	nop
 8008de6:	bd80      	pop	{r7, pc}
 8008de8:	08008e75 	.word	0x08008e75
 8008dec:	08009061 	.word	0x08009061
 8008df0:	08008efd 	.word	0x08008efd
 8008df4:	08009191 	.word	0x08009191
 8008df8:	0800936d 	.word	0x0800936d
 8008dfc:	080091dd 	.word	0x080091dd

08008e00 <CB_MB_RcvByte>:


uint8_t CB_MB_RcvByte(void){
 8008e00:	b480      	push	{r7}
 8008e02:	af00      	add	r7, sp, #0
	return (uint8_t)huart6.Instance->DR;
 8008e04:	4b04      	ldr	r3, [pc, #16]	@ (8008e18 <CB_MB_RcvByte+0x18>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	b2db      	uxtb	r3, r3
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e14:	4770      	bx	lr
 8008e16:	bf00      	nop
 8008e18:	20000624 	.word	0x20000624

08008e1c <CB_MB_Send>:
uint8_t CB_MB_Send(uint8_t *buff, uint16_t size){
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b082      	sub	sp, #8
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	460b      	mov	r3, r1
 8008e26:	807b      	strh	r3, [r7, #2]
	return HAL_UART_Transmit(&huart6, buff, size, (size+10));
 8008e28:	887b      	ldrh	r3, [r7, #2]
 8008e2a:	330a      	adds	r3, #10
 8008e2c:	887a      	ldrh	r2, [r7, #2]
 8008e2e:	6879      	ldr	r1, [r7, #4]
 8008e30:	4803      	ldr	r0, [pc, #12]	@ (8008e40 <CB_MB_Send+0x24>)
 8008e32:	f006 fc89 	bl	800f748 <HAL_UART_Transmit>
 8008e36:	4603      	mov	r3, r0
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3708      	adds	r7, #8
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}
 8008e40:	20000624 	.word	0x20000624

08008e44 <CB_MB_SetUpstream>:

void CB_MB_SetUpstream(void){
 8008e44:	b580      	push	{r7, lr}
 8008e46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RS485_DIR_GPIO_Port, RS485_DIR_Pin, GPIO_PIN_SET);
 8008e48:	2201      	movs	r2, #1
 8008e4a:	2104      	movs	r1, #4
 8008e4c:	4802      	ldr	r0, [pc, #8]	@ (8008e58 <CB_MB_SetUpstream+0x14>)
 8008e4e:	f005 f93d 	bl	800e0cc <HAL_GPIO_WritePin>
}
 8008e52:	bf00      	nop
 8008e54:	bd80      	pop	{r7, pc}
 8008e56:	bf00      	nop
 8008e58:	40020c00 	.word	0x40020c00

08008e5c <CB_MB_SetDownstream>:
void CB_MB_SetDownstream(void){
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RS485_DIR_GPIO_Port, RS485_DIR_Pin, GPIO_PIN_RESET);
 8008e60:	2200      	movs	r2, #0
 8008e62:	2104      	movs	r1, #4
 8008e64:	4802      	ldr	r0, [pc, #8]	@ (8008e70 <CB_MB_SetDownstream+0x14>)
 8008e66:	f005 f931 	bl	800e0cc <HAL_GPIO_WritePin>
}
 8008e6a:	bf00      	nop
 8008e6c:	bd80      	pop	{r7, pc}
 8008e6e:	bf00      	nop
 8008e70:	40020c00 	.word	0x40020c00

08008e74 <CB_MB_readDICallback>:
  * @brief calback function for discrete input
  * @param reg: pointer to modbus registers
  * @param address: address of a register
  * @retval return error if an exception happen
  */
uint8_t CB_MB_readDICallback(MB_DIAddrEnum address, uint8_t *value){
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b084      	sub	sp, #16
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	6039      	str	r1, [r7, #0]
 8008e7e:	80fb      	strh	r3, [r7, #6]
	uint8_t errorStatus = MB_OK;
 8008e80:	2301      	movs	r3, #1
 8008e82:	73fb      	strb	r3, [r7, #15]
	switch (address) {
 8008e84:	88fb      	ldrh	r3, [r7, #6]
 8008e86:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8008e8a:	3b11      	subs	r3, #17
 8008e8c:	2b03      	cmp	r3, #3
 8008e8e:	d823      	bhi.n	8008ed8 <CB_MB_readDICallback+0x64>
 8008e90:	a201      	add	r2, pc, #4	@ (adr r2, 8008e98 <CB_MB_readDICallback+0x24>)
 8008e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e96:	bf00      	nop
 8008e98:	08008ea9 	.word	0x08008ea9
 8008e9c:	08008eb5 	.word	0x08008eb5
 8008ea0:	08008ec1 	.word	0x08008ec1
 8008ea4:	08008ecd 	.word	0x08008ecd
		case MB_DIA_DI1_STATUS:
			*value = gVar.di[DI_ID_0].state;
 8008ea8:	4b13      	ldr	r3, [pc, #76]	@ (8008ef8 <CB_MB_readDICallback+0x84>)
 8008eaa:	f893 226e 	ldrb.w	r2, [r3, #622]	@ 0x26e
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	701a      	strb	r2, [r3, #0]
			break;
 8008eb2:	e014      	b.n	8008ede <CB_MB_readDICallback+0x6a>
		case MB_DIA_DI2_STATUS:
			*value = gVar.di[DI_ID_1].state;
 8008eb4:	4b10      	ldr	r3, [pc, #64]	@ (8008ef8 <CB_MB_readDICallback+0x84>)
 8008eb6:	f893 228a 	ldrb.w	r2, [r3, #650]	@ 0x28a
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	701a      	strb	r2, [r3, #0]
			break;
 8008ebe:	e00e      	b.n	8008ede <CB_MB_readDICallback+0x6a>
		case MB_DIA_DI3_STATUS:
			*value = gVar.di[DI_ID_2].state;
 8008ec0:	4b0d      	ldr	r3, [pc, #52]	@ (8008ef8 <CB_MB_readDICallback+0x84>)
 8008ec2:	f893 22a6 	ldrb.w	r2, [r3, #678]	@ 0x2a6
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	701a      	strb	r2, [r3, #0]
			break;
 8008eca:	e008      	b.n	8008ede <CB_MB_readDICallback+0x6a>
		case MB_DIA_DI4_STATUS:
			*value = gVar.di[DI_ID_3].state;
 8008ecc:	4b0a      	ldr	r3, [pc, #40]	@ (8008ef8 <CB_MB_readDICallback+0x84>)
 8008ece:	f893 22c2 	ldrb.w	r2, [r3, #706]	@ 0x2c2
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	701a      	strb	r2, [r3, #0]
			break;
 8008ed6:	e002      	b.n	8008ede <CB_MB_readDICallback+0x6a>
		default:
			errorStatus = MB_ERROR;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	73fb      	strb	r3, [r7, #15]
			break;
 8008edc:	bf00      	nop
	}

	PrintMBRequest(address, *value, errorStatus);
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	781b      	ldrb	r3, [r3, #0]
 8008ee2:	4619      	mov	r1, r3
 8008ee4:	7bfa      	ldrb	r2, [r7, #15]
 8008ee6:	88fb      	ldrh	r3, [r7, #6]
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f7ff ff4b 	bl	8008d84 <PrintMBRequest>
	return errorStatus;
 8008eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3710      	adds	r7, #16
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}
 8008ef8:	2000066c 	.word	0x2000066c

08008efc <CB_MB_writeCOCallback>:
  * @brief calback function for coil output
  * @param reg: pointer to modbus registers
  * @param address: address of a register
  * @retval return error if an exception happen
  */
uint8_t CB_MB_writeCOCallback(MB_CoilAddrEnum address, uint8_t value){
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b084      	sub	sp, #16
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	4603      	mov	r3, r0
 8008f04:	460a      	mov	r2, r1
 8008f06:	71fb      	strb	r3, [r7, #7]
 8008f08:	4613      	mov	r3, r2
 8008f0a:	71bb      	strb	r3, [r7, #6]
	uint8_t errorStatus = MB_OK;
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	73fb      	strb	r3, [r7, #15]
	/*------Write your code here------*/
	switch (address) {
 8008f10:	79fb      	ldrb	r3, [r7, #7]
 8008f12:	3b01      	subs	r3, #1
 8008f14:	2b1e      	cmp	r3, #30
 8008f16:	f200 808d 	bhi.w	8009034 <CB_MB_writeCOCallback+0x138>
 8008f1a:	a201      	add	r2, pc, #4	@ (adr r2, 8008f20 <CB_MB_writeCOCallback+0x24>)
 8008f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f20:	08008f9d 	.word	0x08008f9d
 8008f24:	08008fb7 	.word	0x08008fb7
 8008f28:	08008fd1 	.word	0x08008fd1
 8008f2c:	08008feb 	.word	0x08008feb
 8008f30:	08009035 	.word	0x08009035
 8008f34:	08009035 	.word	0x08009035
 8008f38:	08009035 	.word	0x08009035
 8008f3c:	08009035 	.word	0x08009035
 8008f40:	08009035 	.word	0x08009035
 8008f44:	08009035 	.word	0x08009035
 8008f48:	08009035 	.word	0x08009035
 8008f4c:	08009035 	.word	0x08009035
 8008f50:	08009035 	.word	0x08009035
 8008f54:	08009035 	.word	0x08009035
 8008f58:	08009035 	.word	0x08009035
 8008f5c:	08009035 	.word	0x08009035
 8008f60:	08009035 	.word	0x08009035
 8008f64:	08009035 	.word	0x08009035
 8008f68:	08009035 	.word	0x08009035
 8008f6c:	08009035 	.word	0x08009035
 8008f70:	08009005 	.word	0x08009005
 8008f74:	08009035 	.word	0x08009035
 8008f78:	08009035 	.word	0x08009035
 8008f7c:	08009035 	.word	0x08009035
 8008f80:	08009035 	.word	0x08009035
 8008f84:	08009035 	.word	0x08009035
 8008f88:	08009035 	.word	0x08009035
 8008f8c:	08009035 	.word	0x08009035
 8008f90:	08009035 	.word	0x08009035
 8008f94:	08009035 	.word	0x08009035
 8008f98:	0800900d 	.word	0x0800900d
		case MB_COA_DO1_ENABLE:
			HAL_GPIO_WritePin(DO_0_GPIO_Port, DO_0_Pin, value>0);
 8008f9c:	79bb      	ldrb	r3, [r7, #6]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	bf14      	ite	ne
 8008fa2:	2301      	movne	r3, #1
 8008fa4:	2300      	moveq	r3, #0
 8008fa6:	b2db      	uxtb	r3, r3
 8008fa8:	461a      	mov	r2, r3
 8008faa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008fae:	4829      	ldr	r0, [pc, #164]	@ (8009054 <CB_MB_writeCOCallback+0x158>)
 8008fb0:	f005 f88c 	bl	800e0cc <HAL_GPIO_WritePin>
			break;
 8008fb4:	e041      	b.n	800903a <CB_MB_writeCOCallback+0x13e>
		case MB_COA_DO2_ENABLE:
			HAL_GPIO_WritePin(DO_1_GPIO_Port, DO_1_Pin, value>0);
 8008fb6:	79bb      	ldrb	r3, [r7, #6]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	bf14      	ite	ne
 8008fbc:	2301      	movne	r3, #1
 8008fbe:	2300      	moveq	r3, #0
 8008fc0:	b2db      	uxtb	r3, r3
 8008fc2:	461a      	mov	r2, r3
 8008fc4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008fc8:	4822      	ldr	r0, [pc, #136]	@ (8009054 <CB_MB_writeCOCallback+0x158>)
 8008fca:	f005 f87f 	bl	800e0cc <HAL_GPIO_WritePin>
			break;
 8008fce:	e034      	b.n	800903a <CB_MB_writeCOCallback+0x13e>
		case MB_COA_DO3_ENABLE:
			HAL_GPIO_WritePin(DO_2_GPIO_Port, DO_2_Pin, value>0);
 8008fd0:	79bb      	ldrb	r3, [r7, #6]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	bf14      	ite	ne
 8008fd6:	2301      	movne	r3, #1
 8008fd8:	2300      	moveq	r3, #0
 8008fda:	b2db      	uxtb	r3, r3
 8008fdc:	461a      	mov	r2, r3
 8008fde:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008fe2:	481c      	ldr	r0, [pc, #112]	@ (8009054 <CB_MB_writeCOCallback+0x158>)
 8008fe4:	f005 f872 	bl	800e0cc <HAL_GPIO_WritePin>
			break;
 8008fe8:	e027      	b.n	800903a <CB_MB_writeCOCallback+0x13e>
		case MB_COA_DO4_ENABLE:
			HAL_GPIO_WritePin(DO_3_GPIO_Port, DO_3_Pin, value>0);
 8008fea:	79bb      	ldrb	r3, [r7, #6]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	bf14      	ite	ne
 8008ff0:	2301      	movne	r3, #1
 8008ff2:	2300      	moveq	r3, #0
 8008ff4:	b2db      	uxtb	r3, r3
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008ffc:	4815      	ldr	r0, [pc, #84]	@ (8009054 <CB_MB_writeCOCallback+0x158>)
 8008ffe:	f005 f865 	bl	800e0cc <HAL_GPIO_WritePin>
			break;
 8009002:	e01a      	b.n	800903a <CB_MB_writeCOCallback+0x13e>
		case MB_COA_MB_SERIAL_SAVE_CONFIG:
			gVar.mbSerial.saveSrlCnfFlag = 1U;
 8009004:	4b14      	ldr	r3, [pc, #80]	@ (8009058 <CB_MB_writeCOCallback+0x15c>)
 8009006:	2201      	movs	r2, #1
 8009008:	72da      	strb	r2, [r3, #11]
			break;
 800900a:	e016      	b.n	800903a <CB_MB_writeCOCallback+0x13e>

			/*Debug---------------------*/
		case MB_COA_DEBUG_ENABLE:
			debug.enable = value>0;
 800900c:	79bb      	ldrb	r3, [r7, #6]
 800900e:	2b00      	cmp	r3, #0
 8009010:	bf14      	ite	ne
 8009012:	2301      	movne	r3, #1
 8009014:	2300      	moveq	r3, #0
 8009016:	b2db      	uxtb	r3, r3
 8009018:	461a      	mov	r2, r3
 800901a:	4b10      	ldr	r3, [pc, #64]	@ (800905c <CB_MB_writeCOCallback+0x160>)
 800901c:	701a      	strb	r2, [r3, #0]
			FLASH_WriteInt(FSA_DEBUG_ENABLE, (value>0));
 800901e:	79bb      	ldrb	r3, [r7, #6]
 8009020:	2b00      	cmp	r3, #0
 8009022:	bf14      	ite	ne
 8009024:	2301      	movne	r3, #1
 8009026:	2300      	moveq	r3, #0
 8009028:	b2db      	uxtb	r3, r3
 800902a:	4619      	mov	r1, r3
 800902c:	2009      	movs	r0, #9
 800902e:	f000 fa89 	bl	8009544 <FLASH_WriteInt>
			break;
 8009032:	e002      	b.n	800903a <CB_MB_writeCOCallback+0x13e>
		default:
			errorStatus = MB_ERROR;
 8009034:	2300      	movs	r3, #0
 8009036:	73fb      	strb	r3, [r7, #15]
			break;
 8009038:	bf00      	nop
	}
	PrintMBRequest(address, value, errorStatus);
 800903a:	79fb      	ldrb	r3, [r7, #7]
 800903c:	b29b      	uxth	r3, r3
 800903e:	79ba      	ldrb	r2, [r7, #6]
 8009040:	b291      	uxth	r1, r2
 8009042:	7bfa      	ldrb	r2, [r7, #15]
 8009044:	4618      	mov	r0, r3
 8009046:	f7ff fe9d 	bl	8008d84 <PrintMBRequest>
	return errorStatus;
 800904a:	7bfb      	ldrb	r3, [r7, #15]
}
 800904c:	4618      	mov	r0, r3
 800904e:	3710      	adds	r7, #16
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}
 8009054:	40020000 	.word	0x40020000
 8009058:	2000066c 	.word	0x2000066c
 800905c:	2000097c 	.word	0x2000097c

08009060 <CB_MB_readCOCallback>:
  * @brief calback function for reading coil output
  * @param reg: pointer to modbus registers
  * @param address: address of a register
  * @retval return error if an exception happen
  */
uint8_t CB_MB_readCOCallback( MB_CoilAddrEnum address, uint8_t *value){
 8009060:	b580      	push	{r7, lr}
 8009062:	b084      	sub	sp, #16
 8009064:	af00      	add	r7, sp, #0
 8009066:	4603      	mov	r3, r0
 8009068:	6039      	str	r1, [r7, #0]
 800906a:	71fb      	strb	r3, [r7, #7]
	uint8_t errorStatus = MB_OK;
 800906c:	2301      	movs	r3, #1
 800906e:	73fb      	strb	r3, [r7, #15]
	switch (address) {
 8009070:	79fb      	ldrb	r3, [r7, #7]
 8009072:	3b01      	subs	r3, #1
 8009074:	2b1e      	cmp	r3, #30
 8009076:	d873      	bhi.n	8009160 <CB_MB_readCOCallback+0x100>
 8009078:	a201      	add	r2, pc, #4	@ (adr r2, 8009080 <CB_MB_readCOCallback+0x20>)
 800907a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800907e:	bf00      	nop
 8009080:	080090fd 	.word	0x080090fd
 8009084:	08009111 	.word	0x08009111
 8009088:	08009125 	.word	0x08009125
 800908c:	08009139 	.word	0x08009139
 8009090:	08009161 	.word	0x08009161
 8009094:	08009161 	.word	0x08009161
 8009098:	08009161 	.word	0x08009161
 800909c:	08009161 	.word	0x08009161
 80090a0:	08009161 	.word	0x08009161
 80090a4:	08009161 	.word	0x08009161
 80090a8:	08009161 	.word	0x08009161
 80090ac:	08009161 	.word	0x08009161
 80090b0:	08009161 	.word	0x08009161
 80090b4:	08009161 	.word	0x08009161
 80090b8:	08009161 	.word	0x08009161
 80090bc:	08009161 	.word	0x08009161
 80090c0:	08009161 	.word	0x08009161
 80090c4:	08009161 	.word	0x08009161
 80090c8:	08009161 	.word	0x08009161
 80090cc:	08009161 	.word	0x08009161
 80090d0:	0800914d 	.word	0x0800914d
 80090d4:	08009161 	.word	0x08009161
 80090d8:	08009161 	.word	0x08009161
 80090dc:	08009161 	.word	0x08009161
 80090e0:	08009161 	.word	0x08009161
 80090e4:	08009161 	.word	0x08009161
 80090e8:	08009161 	.word	0x08009161
 80090ec:	08009161 	.word	0x08009161
 80090f0:	08009161 	.word	0x08009161
 80090f4:	08009161 	.word	0x08009161
 80090f8:	08009157 	.word	0x08009157
		case MB_COA_DO1_ENABLE:
			*value = HAL_GPIO_ReadPin(DO_0_GPIO_Port, DO_0_Pin);
 80090fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009100:	4820      	ldr	r0, [pc, #128]	@ (8009184 <CB_MB_readCOCallback+0x124>)
 8009102:	f004 ffcb 	bl	800e09c <HAL_GPIO_ReadPin>
 8009106:	4603      	mov	r3, r0
 8009108:	461a      	mov	r2, r3
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	701a      	strb	r2, [r3, #0]
			break;
 800910e:	e02a      	b.n	8009166 <CB_MB_readCOCallback+0x106>
		case MB_COA_DO2_ENABLE:
			*value = HAL_GPIO_ReadPin(DO_1_GPIO_Port, DO_1_Pin);
 8009110:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009114:	481b      	ldr	r0, [pc, #108]	@ (8009184 <CB_MB_readCOCallback+0x124>)
 8009116:	f004 ffc1 	bl	800e09c <HAL_GPIO_ReadPin>
 800911a:	4603      	mov	r3, r0
 800911c:	461a      	mov	r2, r3
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	701a      	strb	r2, [r3, #0]
			break;
 8009122:	e020      	b.n	8009166 <CB_MB_readCOCallback+0x106>
		case MB_COA_DO3_ENABLE:
			*value = HAL_GPIO_ReadPin(DO_2_GPIO_Port, DO_2_Pin);
 8009124:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009128:	4816      	ldr	r0, [pc, #88]	@ (8009184 <CB_MB_readCOCallback+0x124>)
 800912a:	f004 ffb7 	bl	800e09c <HAL_GPIO_ReadPin>
 800912e:	4603      	mov	r3, r0
 8009130:	461a      	mov	r2, r3
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	701a      	strb	r2, [r3, #0]
			break;
 8009136:	e016      	b.n	8009166 <CB_MB_readCOCallback+0x106>
		case MB_COA_DO4_ENABLE:
			*value = HAL_GPIO_ReadPin(DO_3_GPIO_Port, DO_3_Pin);
 8009138:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800913c:	4811      	ldr	r0, [pc, #68]	@ (8009184 <CB_MB_readCOCallback+0x124>)
 800913e:	f004 ffad 	bl	800e09c <HAL_GPIO_ReadPin>
 8009142:	4603      	mov	r3, r0
 8009144:	461a      	mov	r2, r3
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	701a      	strb	r2, [r3, #0]
			break;
 800914a:	e00c      	b.n	8009166 <CB_MB_readCOCallback+0x106>
		case MB_COA_MB_SERIAL_SAVE_CONFIG:
			*value = gVar.mbSerial.saveSrlCnfFlag;
 800914c:	4b0e      	ldr	r3, [pc, #56]	@ (8009188 <CB_MB_readCOCallback+0x128>)
 800914e:	7ada      	ldrb	r2, [r3, #11]
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	701a      	strb	r2, [r3, #0]
			break;
 8009154:	e007      	b.n	8009166 <CB_MB_readCOCallback+0x106>

			/*Debug---------------------*/
		case MB_COA_DEBUG_ENABLE:
			*value = debug.enable;
 8009156:	4b0d      	ldr	r3, [pc, #52]	@ (800918c <CB_MB_readCOCallback+0x12c>)
 8009158:	781a      	ldrb	r2, [r3, #0]
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	701a      	strb	r2, [r3, #0]
			break;
 800915e:	e002      	b.n	8009166 <CB_MB_readCOCallback+0x106>


		default:
				errorStatus = MB_ERROR;
 8009160:	2300      	movs	r3, #0
 8009162:	73fb      	strb	r3, [r7, #15]
			break;
 8009164:	bf00      	nop
	}
	PrintMBRequest(address, *value, errorStatus);
 8009166:	79fb      	ldrb	r3, [r7, #7]
 8009168:	b298      	uxth	r0, r3
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	781b      	ldrb	r3, [r3, #0]
 800916e:	4619      	mov	r1, r3
 8009170:	7bfb      	ldrb	r3, [r7, #15]
 8009172:	461a      	mov	r2, r3
 8009174:	f7ff fe06 	bl	8008d84 <PrintMBRequest>
	return errorStatus;
 8009178:	7bfb      	ldrb	r3, [r7, #15]
}
 800917a:	4618      	mov	r0, r3
 800917c:	3710      	adds	r7, #16
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}
 8009182:	bf00      	nop
 8009184:	40020000 	.word	0x40020000
 8009188:	2000066c 	.word	0x2000066c
 800918c:	2000097c 	.word	0x2000097c

08009190 <CB_MB_readIRCallback>:
  * @brief calback function for input register
  * @param reg: pointer to modbus registers
  * @param address: address of a register
  * @retval return error if an exception happen
  */
uint8_t CB_MB_readIRCallback( MB_IRAddrEnum address, uint16_t *value){
 8009190:	b580      	push	{r7, lr}
 8009192:	b084      	sub	sp, #16
 8009194:	af00      	add	r7, sp, #0
 8009196:	4603      	mov	r3, r0
 8009198:	6039      	str	r1, [r7, #0]
 800919a:	80fb      	strh	r3, [r7, #6]
	uint8_t errorStatus = MB_OK;
 800919c:	2301      	movs	r3, #1
 800919e:	73fb      	strb	r3, [r7, #15]

	switch (address) {
 80091a0:	88fb      	ldrh	r3, [r7, #6]
 80091a2:	f247 5231 	movw	r2, #30001	@ 0x7531
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d106      	bne.n	80091b8 <CB_MB_readIRCallback+0x28>
	/*Modbus------------*/
		case MB_IRA_SLAVE_ADDRESS:
			*value = gVar.mbRTUSlave.slave_address;
 80091aa:	4b0b      	ldr	r3, [pc, #44]	@ (80091d8 <CB_MB_readIRCallback+0x48>)
 80091ac:	f893 3244 	ldrb.w	r3, [r3, #580]	@ 0x244
 80091b0:	461a      	mov	r2, r3
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	801a      	strh	r2, [r3, #0]
			break;
 80091b6:	e002      	b.n	80091be <CB_MB_readIRCallback+0x2e>
		default:
				errorStatus = MB_ERROR;
 80091b8:	2300      	movs	r3, #0
 80091ba:	73fb      	strb	r3, [r7, #15]
			break;
 80091bc:	bf00      	nop
	}
	PrintMBRequest(address, *value, errorStatus);
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	8819      	ldrh	r1, [r3, #0]
 80091c2:	7bfa      	ldrb	r2, [r7, #15]
 80091c4:	88fb      	ldrh	r3, [r7, #6]
 80091c6:	4618      	mov	r0, r3
 80091c8:	f7ff fddc 	bl	8008d84 <PrintMBRequest>
	return errorStatus;
 80091cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3710      	adds	r7, #16
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop
 80091d8:	2000066c 	.word	0x2000066c

080091dc <CB_MB_writeHRCallback>:
  * @param reg: pointer to modbus registers
  * @param address: address of a register
  * @retval return error if an exception happen
  *
  */
uint8_t CB_MB_writeHRCallback( MB_HRAddrEnum address, uint16_t value){
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	4603      	mov	r3, r0
 80091e4:	460a      	mov	r2, r1
 80091e6:	80fb      	strh	r3, [r7, #6]
 80091e8:	4613      	mov	r3, r2
 80091ea:	80bb      	strh	r3, [r7, #4]
	uint8_t errorStatus = MB_OK;
 80091ec:	2301      	movs	r3, #1
 80091ee:	73fb      	strb	r3, [r7, #15]
	switch (address) {
 80091f0:	88fb      	ldrh	r3, [r7, #6]
 80091f2:	f5a3 431c 	sub.w	r3, r3, #39936	@ 0x9c00
 80091f6:	3b41      	subs	r3, #65	@ 0x41
 80091f8:	2b17      	cmp	r3, #23
 80091fa:	f200 80a0 	bhi.w	800933e <CB_MB_writeHRCallback+0x162>
 80091fe:	a201      	add	r2, pc, #4	@ (adr r2, 8009204 <CB_MB_writeHRCallback+0x28>)
 8009200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009204:	08009265 	.word	0x08009265
 8009208:	08009283 	.word	0x08009283
 800920c:	080092a1 	.word	0x080092a1
 8009210:	080092bf 	.word	0x080092bf
 8009214:	0800933f 	.word	0x0800933f
 8009218:	0800933f 	.word	0x0800933f
 800921c:	0800933f 	.word	0x0800933f
 8009220:	0800933f 	.word	0x0800933f
 8009224:	0800933f 	.word	0x0800933f
 8009228:	0800933f 	.word	0x0800933f
 800922c:	0800933f 	.word	0x0800933f
 8009230:	0800933f 	.word	0x0800933f
 8009234:	0800933f 	.word	0x0800933f
 8009238:	0800933f 	.word	0x0800933f
 800923c:	0800933f 	.word	0x0800933f
 8009240:	0800933f 	.word	0x0800933f
 8009244:	0800933f 	.word	0x0800933f
 8009248:	0800933f 	.word	0x0800933f
 800924c:	0800933f 	.word	0x0800933f
 8009250:	0800933f 	.word	0x0800933f
 8009254:	080092dd 	.word	0x080092dd
 8009258:	080092e5 	.word	0x080092e5
 800925c:	08009301 	.word	0x08009301
 8009260:	08009323 	.word	0x08009323
		/*DIs---------------------------*/
		case MB_HRA_DI0_DEBOUNCE_DELAY:
			gVar.di[DI_ID_0].debounce.delay = value;
 8009264:	88bb      	ldrh	r3, [r7, #4]
 8009266:	4a40      	ldr	r2, [pc, #256]	@ (8009368 <CB_MB_writeHRCallback+0x18c>)
 8009268:	f8c2 3260 	str.w	r3, [r2, #608]	@ 0x260
			if(FLASH_WriteInt(FSA_DI0_DEBOUNCE_DELAY, value) != FLASH_ERR_NONE){
 800926c:	88bb      	ldrh	r3, [r7, #4]
 800926e:	4619      	mov	r1, r3
 8009270:	2001      	movs	r0, #1
 8009272:	f000 f967 	bl	8009544 <FLASH_WriteInt>
 8009276:	4603      	mov	r3, r0
 8009278:	2b00      	cmp	r3, #0
 800927a:	d063      	beq.n	8009344 <CB_MB_writeHRCallback+0x168>
				errorStatus = MB_ERROR;
 800927c:	2300      	movs	r3, #0
 800927e:	73fb      	strb	r3, [r7, #15]
			}
			break;
 8009280:	e060      	b.n	8009344 <CB_MB_writeHRCallback+0x168>
		case MB_HRA_DI1_DEBOUNCE_DELAY:
			gVar.di[DI_ID_1].debounce.delay = value;
 8009282:	88bb      	ldrh	r3, [r7, #4]
 8009284:	4a38      	ldr	r2, [pc, #224]	@ (8009368 <CB_MB_writeHRCallback+0x18c>)
 8009286:	f8c2 327c 	str.w	r3, [r2, #636]	@ 0x27c
			if( FLASH_WriteInt(FSA_DI1_DEBOUNCE_DELAY, value) != FLASH_ERR_NONE){
 800928a:	88bb      	ldrh	r3, [r7, #4]
 800928c:	4619      	mov	r1, r3
 800928e:	2002      	movs	r0, #2
 8009290:	f000 f958 	bl	8009544 <FLASH_WriteInt>
 8009294:	4603      	mov	r3, r0
 8009296:	2b00      	cmp	r3, #0
 8009298:	d056      	beq.n	8009348 <CB_MB_writeHRCallback+0x16c>
				errorStatus = MB_ERROR;
 800929a:	2300      	movs	r3, #0
 800929c:	73fb      	strb	r3, [r7, #15]
			}
			break;
 800929e:	e053      	b.n	8009348 <CB_MB_writeHRCallback+0x16c>
		case MB_HRA_DI2_DEBOUNCE_DELAY:
			gVar.di[DI_ID_2].debounce.delay = value;
 80092a0:	88bb      	ldrh	r3, [r7, #4]
 80092a2:	4a31      	ldr	r2, [pc, #196]	@ (8009368 <CB_MB_writeHRCallback+0x18c>)
 80092a4:	f8c2 3298 	str.w	r3, [r2, #664]	@ 0x298
			if( FLASH_WriteInt(FSA_DI2_DEBOUNCE_DELAY, value) != FLASH_ERR_NONE){
 80092a8:	88bb      	ldrh	r3, [r7, #4]
 80092aa:	4619      	mov	r1, r3
 80092ac:	2003      	movs	r0, #3
 80092ae:	f000 f949 	bl	8009544 <FLASH_WriteInt>
 80092b2:	4603      	mov	r3, r0
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d049      	beq.n	800934c <CB_MB_writeHRCallback+0x170>
				errorStatus = MB_ERROR;
 80092b8:	2300      	movs	r3, #0
 80092ba:	73fb      	strb	r3, [r7, #15]
			}
			break;
 80092bc:	e046      	b.n	800934c <CB_MB_writeHRCallback+0x170>
		case MB_HRA_DI3_DEBOUNCE_DELAY:
			gVar.di[DI_ID_3].debounce.delay = value;
 80092be:	88bb      	ldrh	r3, [r7, #4]
 80092c0:	4a29      	ldr	r2, [pc, #164]	@ (8009368 <CB_MB_writeHRCallback+0x18c>)
 80092c2:	f8c2 32b4 	str.w	r3, [r2, #692]	@ 0x2b4
			if( FLASH_WriteInt(FSA_DI3_DEBOUNCE_DELAY, value) != FLASH_ERR_NONE){
 80092c6:	88bb      	ldrh	r3, [r7, #4]
 80092c8:	4619      	mov	r1, r3
 80092ca:	2004      	movs	r0, #4
 80092cc:	f000 f93a 	bl	8009544 <FLASH_WriteInt>
 80092d0:	4603      	mov	r3, r0
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d03c      	beq.n	8009350 <CB_MB_writeHRCallback+0x174>
				errorStatus = MB_ERROR;
 80092d6:	2300      	movs	r3, #0
 80092d8:	73fb      	strb	r3, [r7, #15]
			}
			break;
 80092da:	e039      	b.n	8009350 <CB_MB_writeHRCallback+0x174>

		/*Modbus Serial---------------------------*/
		case MB_HRA_MB_SERIAL_BAUDRATE:
			gVar.mbSerial.baudRate = value;
 80092dc:	88bb      	ldrh	r3, [r7, #4]
 80092de:	4a22      	ldr	r2, [pc, #136]	@ (8009368 <CB_MB_writeHRCallback+0x18c>)
 80092e0:	6053      	str	r3, [r2, #4]
			break;
 80092e2:	e036      	b.n	8009352 <CB_MB_writeHRCallback+0x176>
		case MB_HRA_MB_SERIAL_DATABIT:
			if( value == MBS_DB_7 || value == MBS_DB_8){
 80092e4:	88bb      	ldrh	r3, [r7, #4]
 80092e6:	2b07      	cmp	r3, #7
 80092e8:	d002      	beq.n	80092f0 <CB_MB_writeHRCallback+0x114>
 80092ea:	88bb      	ldrh	r3, [r7, #4]
 80092ec:	2b08      	cmp	r3, #8
 80092ee:	d104      	bne.n	80092fa <CB_MB_writeHRCallback+0x11e>
				gVar.mbSerial.dataBits = value;
 80092f0:	88bb      	ldrh	r3, [r7, #4]
 80092f2:	b2da      	uxtb	r2, r3
 80092f4:	4b1c      	ldr	r3, [pc, #112]	@ (8009368 <CB_MB_writeHRCallback+0x18c>)
 80092f6:	721a      	strb	r2, [r3, #8]
			}else{
				errorStatus = MB_ERROR;
			}
			break;
 80092f8:	e02b      	b.n	8009352 <CB_MB_writeHRCallback+0x176>
				errorStatus = MB_ERROR;
 80092fa:	2300      	movs	r3, #0
 80092fc:	73fb      	strb	r3, [r7, #15]
			break;
 80092fe:	e028      	b.n	8009352 <CB_MB_writeHRCallback+0x176>
		case MB_HRA_MB_SERIAL_PARITY:
			if( value == MBS_PB_NONE || value == MBS_PB_ODD || value == MBS_PB_EVEN){
 8009300:	88bb      	ldrh	r3, [r7, #4]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d005      	beq.n	8009312 <CB_MB_writeHRCallback+0x136>
 8009306:	88bb      	ldrh	r3, [r7, #4]
 8009308:	2b01      	cmp	r3, #1
 800930a:	d002      	beq.n	8009312 <CB_MB_writeHRCallback+0x136>
 800930c:	88bb      	ldrh	r3, [r7, #4]
 800930e:	2b02      	cmp	r3, #2
 8009310:	d104      	bne.n	800931c <CB_MB_writeHRCallback+0x140>
				gVar.mbSerial.parityBit = value;
 8009312:	88bb      	ldrh	r3, [r7, #4]
 8009314:	b2da      	uxtb	r2, r3
 8009316:	4b14      	ldr	r3, [pc, #80]	@ (8009368 <CB_MB_writeHRCallback+0x18c>)
 8009318:	725a      	strb	r2, [r3, #9]
			}else{
				errorStatus = MB_ERROR;
			}
			break;
 800931a:	e01a      	b.n	8009352 <CB_MB_writeHRCallback+0x176>
				errorStatus = MB_ERROR;
 800931c:	2300      	movs	r3, #0
 800931e:	73fb      	strb	r3, [r7, #15]
			break;
 8009320:	e017      	b.n	8009352 <CB_MB_writeHRCallback+0x176>
		case MB_HRA_MB_SERIAL_STOPBIT:
			if( value == MBS_SB_1 || value == MBS_SB_2){
 8009322:	88bb      	ldrh	r3, [r7, #4]
 8009324:	2b01      	cmp	r3, #1
 8009326:	d002      	beq.n	800932e <CB_MB_writeHRCallback+0x152>
 8009328:	88bb      	ldrh	r3, [r7, #4]
 800932a:	2b02      	cmp	r3, #2
 800932c:	d104      	bne.n	8009338 <CB_MB_writeHRCallback+0x15c>
				gVar.mbSerial.stopBit = value;
 800932e:	88bb      	ldrh	r3, [r7, #4]
 8009330:	b2da      	uxtb	r2, r3
 8009332:	4b0d      	ldr	r3, [pc, #52]	@ (8009368 <CB_MB_writeHRCallback+0x18c>)
 8009334:	729a      	strb	r2, [r3, #10]
			}else{
				errorStatus = MB_ERROR;
			}
			break;
 8009336:	e00c      	b.n	8009352 <CB_MB_writeHRCallback+0x176>
				errorStatus = MB_ERROR;
 8009338:	2300      	movs	r3, #0
 800933a:	73fb      	strb	r3, [r7, #15]
			break;
 800933c:	e009      	b.n	8009352 <CB_MB_writeHRCallback+0x176>

		default:
				errorStatus = MB_ERROR;
 800933e:	2300      	movs	r3, #0
 8009340:	73fb      	strb	r3, [r7, #15]
			break;
 8009342:	e006      	b.n	8009352 <CB_MB_writeHRCallback+0x176>
			break;
 8009344:	bf00      	nop
 8009346:	e004      	b.n	8009352 <CB_MB_writeHRCallback+0x176>
			break;
 8009348:	bf00      	nop
 800934a:	e002      	b.n	8009352 <CB_MB_writeHRCallback+0x176>
			break;
 800934c:	bf00      	nop
 800934e:	e000      	b.n	8009352 <CB_MB_writeHRCallback+0x176>
			break;
 8009350:	bf00      	nop
	}
	PrintMBRequest(address, value, errorStatus);
 8009352:	7bfa      	ldrb	r2, [r7, #15]
 8009354:	88b9      	ldrh	r1, [r7, #4]
 8009356:	88fb      	ldrh	r3, [r7, #6]
 8009358:	4618      	mov	r0, r3
 800935a:	f7ff fd13 	bl	8008d84 <PrintMBRequest>
	return errorStatus;
 800935e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009360:	4618      	mov	r0, r3
 8009362:	3710      	adds	r7, #16
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}
 8009368:	2000066c 	.word	0x2000066c

0800936c <CB_MB_readHRCallback>:
  * @param reg: pointer to modbus registers
  * @param address: address of a register
  * @retval return error if an exception happen
  *
  */
uint8_t CB_MB_readHRCallback( MB_HRAddrEnum address, uint16_t *value){
 800936c:	b580      	push	{r7, lr}
 800936e:	b084      	sub	sp, #16
 8009370:	af00      	add	r7, sp, #0
 8009372:	4603      	mov	r3, r0
 8009374:	6039      	str	r1, [r7, #0]
 8009376:	80fb      	strh	r3, [r7, #6]
	uint8_t errorStatus = MB_OK;
 8009378:	2301      	movs	r3, #1
 800937a:	73fb      	strb	r3, [r7, #15]
	switch (address) {
 800937c:	88fb      	ldrh	r3, [r7, #6]
 800937e:	f5a3 431c 	sub.w	r3, r3, #39936	@ 0x9c00
 8009382:	3b41      	subs	r3, #65	@ 0x41
 8009384:	2b17      	cmp	r3, #23
 8009386:	d867      	bhi.n	8009458 <CB_MB_readHRCallback+0xec>
 8009388:	a201      	add	r2, pc, #4	@ (adr r2, 8009390 <CB_MB_readHRCallback+0x24>)
 800938a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800938e:	bf00      	nop
 8009390:	080093f1 	.word	0x080093f1
 8009394:	080093ff 	.word	0x080093ff
 8009398:	0800940d 	.word	0x0800940d
 800939c:	0800941b 	.word	0x0800941b
 80093a0:	08009459 	.word	0x08009459
 80093a4:	08009459 	.word	0x08009459
 80093a8:	08009459 	.word	0x08009459
 80093ac:	08009459 	.word	0x08009459
 80093b0:	08009459 	.word	0x08009459
 80093b4:	08009459 	.word	0x08009459
 80093b8:	08009459 	.word	0x08009459
 80093bc:	08009459 	.word	0x08009459
 80093c0:	08009459 	.word	0x08009459
 80093c4:	08009459 	.word	0x08009459
 80093c8:	08009459 	.word	0x08009459
 80093cc:	08009459 	.word	0x08009459
 80093d0:	08009459 	.word	0x08009459
 80093d4:	08009459 	.word	0x08009459
 80093d8:	08009459 	.word	0x08009459
 80093dc:	08009459 	.word	0x08009459
 80093e0:	08009429 	.word	0x08009429
 80093e4:	08009435 	.word	0x08009435
 80093e8:	08009441 	.word	0x08009441
 80093ec:	0800944d 	.word	0x0800944d
		/*DIs---------------------------*/
		case MB_HRA_DI0_DEBOUNCE_DELAY:
			*value = (uint16_t)gVar.di[DI_ID_0].debounce.delay;
 80093f0:	4b21      	ldr	r3, [pc, #132]	@ (8009478 <CB_MB_readHRCallback+0x10c>)
 80093f2:	f8d3 3260 	ldr.w	r3, [r3, #608]	@ 0x260
 80093f6:	b29a      	uxth	r2, r3
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	801a      	strh	r2, [r3, #0]
			break;
 80093fc:	e02f      	b.n	800945e <CB_MB_readHRCallback+0xf2>
		case MB_HRA_DI1_DEBOUNCE_DELAY:
			*value = (uint16_t)gVar.di[DI_ID_1].debounce.delay;
 80093fe:	4b1e      	ldr	r3, [pc, #120]	@ (8009478 <CB_MB_readHRCallback+0x10c>)
 8009400:	f8d3 327c 	ldr.w	r3, [r3, #636]	@ 0x27c
 8009404:	b29a      	uxth	r2, r3
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	801a      	strh	r2, [r3, #0]
			break;
 800940a:	e028      	b.n	800945e <CB_MB_readHRCallback+0xf2>
		case MB_HRA_DI2_DEBOUNCE_DELAY:
			*value = (uint16_t)gVar.di[DI_ID_2].debounce.delay;
 800940c:	4b1a      	ldr	r3, [pc, #104]	@ (8009478 <CB_MB_readHRCallback+0x10c>)
 800940e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
 8009412:	b29a      	uxth	r2, r3
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	801a      	strh	r2, [r3, #0]
			break;
 8009418:	e021      	b.n	800945e <CB_MB_readHRCallback+0xf2>
		case MB_HRA_DI3_DEBOUNCE_DELAY:
			*value = (uint16_t)gVar.di[DI_ID_3].debounce.delay;
 800941a:	4b17      	ldr	r3, [pc, #92]	@ (8009478 <CB_MB_readHRCallback+0x10c>)
 800941c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009420:	b29a      	uxth	r2, r3
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	801a      	strh	r2, [r3, #0]
			break;
 8009426:	e01a      	b.n	800945e <CB_MB_readHRCallback+0xf2>

		/*Modbus Serial---------------------------*/
		case MB_HRA_MB_SERIAL_BAUDRATE:
			*value = gVar.mbSerial.baudRate;
 8009428:	4b13      	ldr	r3, [pc, #76]	@ (8009478 <CB_MB_readHRCallback+0x10c>)
 800942a:	685b      	ldr	r3, [r3, #4]
 800942c:	b29a      	uxth	r2, r3
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	801a      	strh	r2, [r3, #0]
			break;
 8009432:	e014      	b.n	800945e <CB_MB_readHRCallback+0xf2>
		case MB_HRA_MB_SERIAL_DATABIT:
			*value = gVar.mbSerial.dataBits;
 8009434:	4b10      	ldr	r3, [pc, #64]	@ (8009478 <CB_MB_readHRCallback+0x10c>)
 8009436:	7a1b      	ldrb	r3, [r3, #8]
 8009438:	461a      	mov	r2, r3
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	801a      	strh	r2, [r3, #0]
			break;
 800943e:	e00e      	b.n	800945e <CB_MB_readHRCallback+0xf2>
		case MB_HRA_MB_SERIAL_PARITY:
			*value = gVar.mbSerial.parityBit;
 8009440:	4b0d      	ldr	r3, [pc, #52]	@ (8009478 <CB_MB_readHRCallback+0x10c>)
 8009442:	7a5b      	ldrb	r3, [r3, #9]
 8009444:	461a      	mov	r2, r3
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	801a      	strh	r2, [r3, #0]
			break;
 800944a:	e008      	b.n	800945e <CB_MB_readHRCallback+0xf2>
		case MB_HRA_MB_SERIAL_STOPBIT:
			*value = gVar.mbSerial.stopBit;
 800944c:	4b0a      	ldr	r3, [pc, #40]	@ (8009478 <CB_MB_readHRCallback+0x10c>)
 800944e:	7a9b      	ldrb	r3, [r3, #10]
 8009450:	461a      	mov	r2, r3
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	801a      	strh	r2, [r3, #0]
			break;
 8009456:	e002      	b.n	800945e <CB_MB_readHRCallback+0xf2>


		default:
				errorStatus = MB_ERROR;
 8009458:	2300      	movs	r3, #0
 800945a:	73fb      	strb	r3, [r7, #15]
			break;
 800945c:	bf00      	nop
	}
	PrintMBRequest(address, *value, errorStatus);
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	8819      	ldrh	r1, [r3, #0]
 8009462:	7bfa      	ldrb	r2, [r7, #15]
 8009464:	88fb      	ldrh	r3, [r7, #6]
 8009466:	4618      	mov	r0, r3
 8009468:	f7ff fc8c 	bl	8008d84 <PrintMBRequest>
	return errorStatus;
 800946c:	7bfb      	ldrb	r3, [r7, #15]
}
 800946e:	4618      	mov	r0, r3
 8009470:	3710      	adds	r7, #16
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
 8009476:	bf00      	nop
 8009478:	2000066c 	.word	0x2000066c

0800947c <FLASH_Download>:
 * @note This function is typically used to sync the local buffer with the current data stored in
 *       flash memory.
 *
 * @attention Ensure that the flash memory is unlocked before invoking this function.
 */
uint8_t FLASH_Download(void){
 800947c:	b580      	push	{r7, lr}
 800947e:	b082      	sub	sp, #8
 8009480:	af00      	add	r7, sp, #0
	uint8_t status = FLASH_Read(0, FLASH_LOCAL_BUFF, FLASH_MAX_STORAGE_SIZE);
 8009482:	220a      	movs	r2, #10
 8009484:	4909      	ldr	r1, [pc, #36]	@ (80094ac <FLASH_Download+0x30>)
 8009486:	2000      	movs	r0, #0
 8009488:	f000 f87a 	bl	8009580 <FLASH_Read>
 800948c:	4603      	mov	r3, r0
 800948e:	71fb      	strb	r3, [r7, #7]
	if(status != FLASH_ERR_NONE){
 8009490:	79fb      	ldrb	r3, [r7, #7]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d004      	beq.n	80094a0 <FLASH_Download+0x24>
		memset(FLASH_LOCAL_BUFF, 0xFF, sizeof(FLASH_LOCAL_BUFF[0])*FLASH_MAX_STORAGE_SIZE);
 8009496:	2228      	movs	r2, #40	@ 0x28
 8009498:	21ff      	movs	r1, #255	@ 0xff
 800949a:	4804      	ldr	r0, [pc, #16]	@ (80094ac <FLASH_Download+0x30>)
 800949c:	f007 fe9a 	bl	80111d4 <memset>
	}
	return status;
 80094a0:	79fb      	ldrb	r3, [r7, #7]
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3708      	adds	r7, #8
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}
 80094aa:	bf00      	nop
 80094ac:	20000000 	.word	0x20000000

080094b0 <FLASH_Upload>:
 * @note The function first reads the current contents of the flash memory, modifies it with the
 *       new data, erases the flash sector, and then writes the modified data back to the flash memory.
 *
 * @attention Ensure that the flash memory is unlocked before invoking this function.
 */
uint8_t FLASH_Upload(void){
 80094b0:	b580      	push	{r7, lr}
 80094b2:	af00      	add	r7, sp, #0
	return FLASH_Write(0, FLASH_LOCAL_BUFF, FLASH_MAX_STORAGE_SIZE);
 80094b4:	220a      	movs	r2, #10
 80094b6:	4903      	ldr	r1, [pc, #12]	@ (80094c4 <FLASH_Upload+0x14>)
 80094b8:	2000      	movs	r0, #0
 80094ba:	f000 f894 	bl	80095e6 <FLASH_Write>
 80094be:	4603      	mov	r3, r0
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	bd80      	pop	{r7, pc}
 80094c4:	20000000 	.word	0x20000000

080094c8 <FLASH_CheckForChanges>:
 *
 * This function checks if there are unsaved changes in memory by evaluating the `isUnsaved` flag.
 * If changes exist, it attempts to upload the changes to flash memory using the `FLASH_Upload()` function.
 * Upon successful upload, it logs a success message; otherwise, it logs an error message.
 */
void FLASH_CheckForChanges(void){
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b082      	sub	sp, #8
 80094cc:	af00      	add	r7, sp, #0
	if(isUnsaved){
 80094ce:	4b0d      	ldr	r3, [pc, #52]	@ (8009504 <FLASH_CheckForChanges+0x3c>)
 80094d0:	781b      	ldrb	r3, [r3, #0]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d012      	beq.n	80094fc <FLASH_CheckForChanges+0x34>
		isUnsaved = 0;
 80094d6:	4b0b      	ldr	r3, [pc, #44]	@ (8009504 <FLASH_CheckForChanges+0x3c>)
 80094d8:	2200      	movs	r2, #0
 80094da:	701a      	strb	r2, [r3, #0]
		uint8_t status = FLASH_Upload();
 80094dc:	f7ff ffe8 	bl	80094b0 <FLASH_Upload>
 80094e0:	4603      	mov	r3, r0
 80094e2:	71fb      	strb	r3, [r7, #7]
		if(status != FLASH_ERR_NONE){
 80094e4:	79fb      	ldrb	r3, [r7, #7]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d005      	beq.n	80094f6 <FLASH_CheckForChanges+0x2e>
			DEBUG_SPRINT_NL("FLASH: Upload failed! [Error-%d] ",status);
 80094ea:	79fb      	ldrb	r3, [r7, #7]
 80094ec:	4619      	mov	r1, r3
 80094ee:	4806      	ldr	r0, [pc, #24]	@ (8009508 <FLASH_CheckForChanges+0x40>)
 80094f0:	f002 f87a 	bl	800b5e8 <DEBUG_SPRINT_NL>
		}else{
			DEBUG_SPRINT_NL("FLASH: Upload successful!");
		}
	}
}
 80094f4:	e002      	b.n	80094fc <FLASH_CheckForChanges+0x34>
			DEBUG_SPRINT_NL("FLASH: Upload successful!");
 80094f6:	4805      	ldr	r0, [pc, #20]	@ (800950c <FLASH_CheckForChanges+0x44>)
 80094f8:	f002 f876 	bl	800b5e8 <DEBUG_SPRINT_NL>
}
 80094fc:	bf00      	nop
 80094fe:	3708      	adds	r7, #8
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}
 8009504:	2000041c 	.word	0x2000041c
 8009508:	080134cc 	.word	0x080134cc
 800950c:	080134f0 	.word	0x080134f0

08009510 <FLASH_ReadInt>:
 *
 * @return uint8_t Status of the flash read operation:
 * 		   - 'FLASH_ERR_INVALID_ADDRESS'
 *         - `FLASH_ERR_NONE` on successful operation.
 */
uint8_t FLASH_ReadInt(uint32_t address, uint32_t *pData){
 8009510:	b480      	push	{r7}
 8009512:	b083      	sub	sp, #12
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	6039      	str	r1, [r7, #0]
	if(address > FLASH_MAX_STORAGE_SIZE){
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2b0a      	cmp	r3, #10
 800951e:	d901      	bls.n	8009524 <FLASH_ReadInt+0x14>
		return FLASH_ERR_INVALID_ADDRESS;
 8009520:	2304      	movs	r3, #4
 8009522:	e006      	b.n	8009532 <FLASH_ReadInt+0x22>
	}
	*pData = FLASH_LOCAL_BUFF[address];
 8009524:	4a06      	ldr	r2, [pc, #24]	@ (8009540 <FLASH_ReadInt+0x30>)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	601a      	str	r2, [r3, #0]
	return FLASH_ERR_NONE;
 8009530:	2300      	movs	r3, #0
}
 8009532:	4618      	mov	r0, r3
 8009534:	370c      	adds	r7, #12
 8009536:	46bd      	mov	sp, r7
 8009538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953c:	4770      	bx	lr
 800953e:	bf00      	nop
 8009540:	20000000 	.word	0x20000000

08009544 <FLASH_WriteInt>:
 *       overflow issues.
 *
 * @attention After writing, the `isUnsaved` flag is set to signal that the buffer has been modified
 *            and will need to be written back to flash memory at a later time.
 */
uint8_t FLASH_WriteInt(uint32_t address, uint32_t pData){
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
 800954c:	6039      	str	r1, [r7, #0]
	if(address > FLASH_MAX_STORAGE_SIZE){
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2b0a      	cmp	r3, #10
 8009552:	d901      	bls.n	8009558 <FLASH_WriteInt+0x14>
		return FLASH_ERR_INVALID_ADDRESS;
 8009554:	2304      	movs	r3, #4
 8009556:	e008      	b.n	800956a <FLASH_WriteInt+0x26>
	}
	FLASH_LOCAL_BUFF[address] = pData;
 8009558:	4907      	ldr	r1, [pc, #28]	@ (8009578 <FLASH_WriteInt+0x34>)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	683a      	ldr	r2, [r7, #0]
 800955e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	isUnsaved = 1;
 8009562:	4b06      	ldr	r3, [pc, #24]	@ (800957c <FLASH_WriteInt+0x38>)
 8009564:	2201      	movs	r2, #1
 8009566:	701a      	strb	r2, [r3, #0]
	return FLASH_ERR_NONE;
 8009568:	2300      	movs	r3, #0
}
 800956a:	4618      	mov	r0, r3
 800956c:	370c      	adds	r7, #12
 800956e:	46bd      	mov	sp, r7
 8009570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009574:	4770      	bx	lr
 8009576:	bf00      	nop
 8009578:	20000000 	.word	0x20000000
 800957c:	2000041c 	.word	0x2000041c

08009580 <FLASH_Read>:
 * @return uint8_t Status of the flash read operation:
 *         - `FLASH_ERR_NULL_PTR` if the data pointer is NULL.
 *         - `FLASH_ERR_LENGTH_OUTOFRANGE` if the requested data size exceeds the flash memory limits.
 *         - `FLASH_ERR_NONE` on successful operation.
 */
uint8_t FLASH_Read(uint32_t startAddress, uint32_t *pData, uint16_t nData){
 8009580:	b480      	push	{r7}
 8009582:	b087      	sub	sp, #28
 8009584:	af00      	add	r7, sp, #0
 8009586:	60f8      	str	r0, [r7, #12]
 8009588:	60b9      	str	r1, [r7, #8]
 800958a:	4613      	mov	r3, r2
 800958c:	80fb      	strh	r3, [r7, #6]
	if(pData == NULL){
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d101      	bne.n	8009598 <FLASH_Read+0x18>
		return FLASH_ERR_NULL_PTR;
 8009594:	2303      	movs	r3, #3
 8009596:	e020      	b.n	80095da <FLASH_Read+0x5a>
	}if(startAddress+nData > FLASH_MAX_STORAGE_SIZE){
 8009598:	88fa      	ldrh	r2, [r7, #6]
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	4413      	add	r3, r2
 800959e:	2b0a      	cmp	r3, #10
 80095a0:	d901      	bls.n	80095a6 <FLASH_Read+0x26>
		return FLASH_ERR_LENGTH_OUTOFRANGE;
 80095a2:	2305      	movs	r3, #5
 80095a4:	e019      	b.n	80095da <FLASH_Read+0x5a>
	}
	for(uint32_t i = 0; i < nData; i++){
 80095a6:	2300      	movs	r3, #0
 80095a8:	617b      	str	r3, [r7, #20]
 80095aa:	e011      	b.n	80095d0 <FLASH_Read+0x50>
		pData[i] = *(__IO uint32_t *)(FLASH_SECTOR_START_ADDRESS+((startAddress+i)*4));
 80095ac:	68fa      	ldr	r2, [r7, #12]
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	4413      	add	r3, r2
 80095b2:	f103 7300 	add.w	r3, r3, #33554432	@ 0x2000000
 80095b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80095ba:	009b      	lsls	r3, r3, #2
 80095bc:	4619      	mov	r1, r3
 80095be:	697b      	ldr	r3, [r7, #20]
 80095c0:	009b      	lsls	r3, r3, #2
 80095c2:	68ba      	ldr	r2, [r7, #8]
 80095c4:	4413      	add	r3, r2
 80095c6:	680a      	ldr	r2, [r1, #0]
 80095c8:	601a      	str	r2, [r3, #0]
	for(uint32_t i = 0; i < nData; i++){
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	3301      	adds	r3, #1
 80095ce:	617b      	str	r3, [r7, #20]
 80095d0:	88fb      	ldrh	r3, [r7, #6]
 80095d2:	697a      	ldr	r2, [r7, #20]
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d3e9      	bcc.n	80095ac <FLASH_Read+0x2c>
	}
	return FLASH_ERR_NONE;
 80095d8:	2300      	movs	r3, #0
}
 80095da:	4618      	mov	r0, r3
 80095dc:	371c      	adds	r7, #28
 80095de:	46bd      	mov	sp, r7
 80095e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e4:	4770      	bx	lr

080095e6 <FLASH_Write>:
 *         - `FLASH_ERR_LENGTH_OUTOFRANGE` if the length of data exceeds flash memory size.
 *         - `FLASH_ERR_ERASE` if the flash erase operation fails.
 *         - `FLASH_ERR_PROGRAM` if the flash programming operation fails.
 *         - `FLASH_ERR_NONE` on successful operation.
 */
uint8_t FLASH_Write(uint32_t startAddress, uint32_t *pData, uint16_t nData){
 80095e6:	b5b0      	push	{r4, r5, r7, lr}
 80095e8:	b090      	sub	sp, #64	@ 0x40
 80095ea:	af00      	add	r7, sp, #0
 80095ec:	60f8      	str	r0, [r7, #12]
 80095ee:	60b9      	str	r1, [r7, #8]
 80095f0:	4613      	mov	r3, r2
 80095f2:	80fb      	strh	r3, [r7, #6]
	if(pData == NULL){
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d101      	bne.n	80095fe <FLASH_Write+0x18>
		return FLASH_ERR_NULL_PTR;
 80095fa:	2303      	movs	r3, #3
 80095fc:	e064      	b.n	80096c8 <FLASH_Write+0xe2>
	}if(startAddress+nData > FLASH_MAX_STORAGE_SIZE){
 80095fe:	88fa      	ldrh	r2, [r7, #6]
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	4413      	add	r3, r2
 8009604:	2b0a      	cmp	r3, #10
 8009606:	d901      	bls.n	800960c <FLASH_Write+0x26>
		return FLASH_ERR_LENGTH_OUTOFRANGE;
 8009608:	2305      	movs	r3, #5
 800960a:	e05d      	b.n	80096c8 <FLASH_Write+0xe2>
	}
	uint16_t buffSize = FLASH_MAX_STORAGE_SIZE;
 800960c:	230a      	movs	r3, #10
 800960e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	uint32_t buff[FLASH_MAX_STORAGE_SIZE] = {0};
 8009610:	f107 0310 	add.w	r3, r7, #16
 8009614:	2228      	movs	r2, #40	@ 0x28
 8009616:	2100      	movs	r1, #0
 8009618:	4618      	mov	r0, r3
 800961a:	f007 fddb 	bl	80111d4 <memset>
	uint8_t status = 0;
 800961e:	2300      	movs	r3, #0
 8009620:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

	/*Read*/
	status = FLASH_Read(0, buff, buffSize);
 8009624:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8009626:	f107 0310 	add.w	r3, r7, #16
 800962a:	4619      	mov	r1, r3
 800962c:	2000      	movs	r0, #0
 800962e:	f7ff ffa7 	bl	8009580 <FLASH_Read>
 8009632:	4603      	mov	r3, r0
 8009634:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	if(status != FLASH_ERR_NONE){
 8009638:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800963c:	2b00      	cmp	r3, #0
 800963e:	d002      	beq.n	8009646 <FLASH_Write+0x60>
		return status;
 8009640:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8009644:	e040      	b.n	80096c8 <FLASH_Write+0xe2>
	}

	/*Modify*/
	memcpy(&buff[startAddress], pData, sizeof(pData[0])*nData);
 8009646:	f107 0210 	add.w	r2, r7, #16
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	009b      	lsls	r3, r3, #2
 800964e:	18d0      	adds	r0, r2, r3
 8009650:	88fb      	ldrh	r3, [r7, #6]
 8009652:	009b      	lsls	r3, r3, #2
 8009654:	461a      	mov	r2, r3
 8009656:	68b9      	ldr	r1, [r7, #8]
 8009658:	f007 fe4b 	bl	80112f2 <memcpy>


	/*Erase*/
	status = FLASH_Erase();
 800965c:	f000 f838 	bl	80096d0 <FLASH_Erase>
 8009660:	4603      	mov	r3, r0
 8009662:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	if(status != HAL_OK){
 8009666:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800966a:	2b00      	cmp	r3, #0
 800966c:	d001      	beq.n	8009672 <FLASH_Write+0x8c>
		return FLASH_ERR_ERASE;
 800966e:	2301      	movs	r3, #1
 8009670:	e02a      	b.n	80096c8 <FLASH_Write+0xe2>
	}

	/*Write*/
	HAL_FLASH_Unlock();
 8009672:	f004 f8eb 	bl	800d84c <HAL_FLASH_Unlock>
	for(uint16_t i = 0; i < FLASH_MAX_STORAGE_SIZE; i++){
 8009676:	2300      	movs	r3, #0
 8009678:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800967a:	e01f      	b.n	80096bc <FLASH_Write+0xd6>
		status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (FLASH_SECTOR_START_ADDRESS+(4*i)), buff[i]);
 800967c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800967e:	009b      	lsls	r3, r3, #2
 8009680:	f103 6100 	add.w	r1, r3, #134217728	@ 0x8000000
 8009684:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
 8009688:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800968a:	009b      	lsls	r3, r3, #2
 800968c:	3340      	adds	r3, #64	@ 0x40
 800968e:	443b      	add	r3, r7
 8009690:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8009694:	2200      	movs	r2, #0
 8009696:	461c      	mov	r4, r3
 8009698:	4615      	mov	r5, r2
 800969a:	4622      	mov	r2, r4
 800969c:	462b      	mov	r3, r5
 800969e:	2002      	movs	r0, #2
 80096a0:	f004 f880 	bl	800d7a4 <HAL_FLASH_Program>
 80096a4:	4603      	mov	r3, r0
 80096a6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
		if(status != HAL_OK){
 80096aa:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d001      	beq.n	80096b6 <FLASH_Write+0xd0>
			return FLASH_ERR_PROGRAM;
 80096b2:	2302      	movs	r3, #2
 80096b4:	e008      	b.n	80096c8 <FLASH_Write+0xe2>
	for(uint16_t i = 0; i < FLASH_MAX_STORAGE_SIZE; i++){
 80096b6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80096b8:	3301      	adds	r3, #1
 80096ba:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80096bc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80096be:	2b09      	cmp	r3, #9
 80096c0:	d9dc      	bls.n	800967c <FLASH_Write+0x96>
		}

	}

	HAL_FLASH_Lock();
 80096c2:	f004 f8e5 	bl	800d890 <HAL_FLASH_Lock>

	return FLASH_ERR_NONE;
 80096c6:	2300      	movs	r3, #0
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3740      	adds	r7, #64	@ 0x40
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bdb0      	pop	{r4, r5, r7, pc}

080096d0 <FLASH_Erase>:
 *
 * @return uint8_t Returns the status of the flash erase operation:
 *         - `HAL_OK` on success.
 *         - `HAL_ERR` on failure.
 */
uint8_t FLASH_Erase(void){
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b082      	sub	sp, #8
 80096d4:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = 0;
 80096d6:	2300      	movs	r3, #0
 80096d8:	71fb      	strb	r3, [r7, #7]
	static FLASH_EraseInitTypeDef flasEraseInit;
	uint32_t pageError;
	flasEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 80096da:	4b1c      	ldr	r3, [pc, #112]	@ (800974c <FLASH_Erase+0x7c>)
 80096dc:	2200      	movs	r2, #0
 80096de:	601a      	str	r2, [r3, #0]
	flasEraseInit.Banks =  FLASH_BANK_1;
 80096e0:	4b1a      	ldr	r3, [pc, #104]	@ (800974c <FLASH_Erase+0x7c>)
 80096e2:	2201      	movs	r2, #1
 80096e4:	605a      	str	r2, [r3, #4]
	flasEraseInit.Sector =  FLASH_SECTOR_1;
 80096e6:	4b19      	ldr	r3, [pc, #100]	@ (800974c <FLASH_Erase+0x7c>)
 80096e8:	2201      	movs	r2, #1
 80096ea:	609a      	str	r2, [r3, #8]
	flasEraseInit.NbSectors = 1U;
 80096ec:	4b17      	ldr	r3, [pc, #92]	@ (800974c <FLASH_Erase+0x7c>)
 80096ee:	2201      	movs	r2, #1
 80096f0:	60da      	str	r2, [r3, #12]
	flasEraseInit.VoltageRange = VOLTAGE_RANGE_3;
 80096f2:	4b16      	ldr	r3, [pc, #88]	@ (800974c <FLASH_Erase+0x7c>)
 80096f4:	2202      	movs	r2, #2
 80096f6:	611a      	str	r2, [r3, #16]

	HAL_FLASH_Unlock();
 80096f8:	f004 f8a8 	bl	800d84c <HAL_FLASH_Unlock>

    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80096fc:	4b14      	ldr	r3, [pc, #80]	@ (8009750 <FLASH_Erase+0x80>)
 80096fe:	2201      	movs	r2, #1
 8009700:	60da      	str	r2, [r3, #12]
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8009702:	4b13      	ldr	r3, [pc, #76]	@ (8009750 <FLASH_Erase+0x80>)
 8009704:	2202      	movs	r2, #2
 8009706:	60da      	str	r2, [r3, #12]
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8009708:	4b11      	ldr	r3, [pc, #68]	@ (8009750 <FLASH_Erase+0x80>)
 800970a:	2210      	movs	r2, #16
 800970c:	60da      	str	r2, [r3, #12]
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800970e:	4b10      	ldr	r3, [pc, #64]	@ (8009750 <FLASH_Erase+0x80>)
 8009710:	2220      	movs	r2, #32
 8009712:	60da      	str	r2, [r3, #12]
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8009714:	4b0e      	ldr	r3, [pc, #56]	@ (8009750 <FLASH_Erase+0x80>)
 8009716:	2240      	movs	r2, #64	@ 0x40
 8009718:	60da      	str	r2, [r3, #12]
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800971a:	4b0d      	ldr	r3, [pc, #52]	@ (8009750 <FLASH_Erase+0x80>)
 800971c:	2280      	movs	r2, #128	@ 0x80
 800971e:	60da      	str	r2, [r3, #12]

    status = HAL_FLASHEx_Erase(&flasEraseInit, &pageError);
 8009720:	463b      	mov	r3, r7
 8009722:	4619      	mov	r1, r3
 8009724:	4809      	ldr	r0, [pc, #36]	@ (800974c <FLASH_Erase+0x7c>)
 8009726:	f004 fa03 	bl	800db30 <HAL_FLASHEx_Erase>
 800972a:	4603      	mov	r3, r0
 800972c:	71fb      	strb	r3, [r7, #7]

	HAL_FLASH_Lock();
 800972e:	f004 f8af 	bl	800d890 <HAL_FLASH_Lock>

	if(status != HAL_OK){
 8009732:	79fb      	ldrb	r3, [r7, #7]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d004      	beq.n	8009742 <FLASH_Erase+0x72>
		memset(FLASH_LOCAL_BUFF, 0xFF, sizeof(FLASH_LOCAL_BUFF[0])*FLASH_MAX_STORAGE_SIZE);
 8009738:	2228      	movs	r2, #40	@ 0x28
 800973a:	21ff      	movs	r1, #255	@ 0xff
 800973c:	4805      	ldr	r0, [pc, #20]	@ (8009754 <FLASH_Erase+0x84>)
 800973e:	f007 fd49 	bl	80111d4 <memset>
	}

	return status;
 8009742:	79fb      	ldrb	r3, [r7, #7]
}
 8009744:	4618      	mov	r0, r3
 8009746:	3708      	adds	r7, #8
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}
 800974c:	20000420 	.word	0x20000420
 8009750:	40023c00 	.word	0x40023c00
 8009754:	20000000 	.word	0x20000000

08009758 <SchedulerInit>:
void SupperLoop(void);
void MediumLoop(void);
void VerySlowLoop(void);


void SchedulerInit(void){
 8009758:	b580      	push	{r7, lr}
 800975a:	b082      	sub	sp, #8
 800975c:	af00      	add	r7, sp, #0
	HAL_Delay(1000);
 800975e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8009762:	f003 fe57 	bl	800d414 <HAL_Delay>
	/*Power LED-------------------------------*/
	HAL_GPIO_WritePin(PWR_LED_GPIO_Port, PWR_LED_Pin, GPIO_PIN_SET);
 8009766:	2201      	movs	r2, #1
 8009768:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800976c:	4823      	ldr	r0, [pc, #140]	@ (80097fc <SchedulerInit+0xa4>)
 800976e:	f004 fcad 	bl	800e0cc <HAL_GPIO_WritePin>

	/*Time stame init-------------------------*/
	TS_Init(&timStamp, &htim9);
 8009772:	4923      	ldr	r1, [pc, #140]	@ (8009800 <SchedulerInit+0xa8>)
 8009774:	4823      	ldr	r0, [pc, #140]	@ (8009804 <SchedulerInit+0xac>)
 8009776:	f000 fdcf 	bl	800a318 <TS_Init>
	TS_SetTimerType(&timStamp, TS_TIM_TYP_TIMER);
 800977a:	2101      	movs	r1, #1
 800977c:	4821      	ldr	r0, [pc, #132]	@ (8009804 <SchedulerInit+0xac>)
 800977e:	f000 fe3b 	bl	800a3f8 <TS_SetTimerType>
	TS_StartTimer(&timStamp);
 8009782:	4820      	ldr	r0, [pc, #128]	@ (8009804 <SchedulerInit+0xac>)
 8009784:	f000 fe24 	bl	800a3d0 <TS_StartTimer>
	DEBUG_INIT(&huart2, &debug);
 8009788:	491f      	ldr	r1, [pc, #124]	@ (8009808 <SchedulerInit+0xb0>)
 800978a:	4820      	ldr	r0, [pc, #128]	@ (800980c <SchedulerInit+0xb4>)
 800978c:	f001 fe84 	bl	800b498 <DEBUG_INIT>
	DEBUG_ENABLE();
 8009790:	f001 febe 	bl	800b510 <DEBUG_ENABLE>

	DEBUG_SPRINT("\n\n");
 8009794:	481e      	ldr	r0, [pc, #120]	@ (8009810 <SchedulerInit+0xb8>)
 8009796:	f001 fef7 	bl	800b588 <DEBUG_SPRINT>
	DEBUG_SPRINT_NL("---------------Started---------------");
 800979a:	481e      	ldr	r0, [pc, #120]	@ (8009814 <SchedulerInit+0xbc>)
 800979c:	f001 ff24 	bl	800b5e8 <DEBUG_SPRINT_NL>




	/*Print HW & FW Version-------------------*/
	PrintVersion();
 80097a0:	f000 f92c 	bl	80099fc <PrintVersion>
	PrintBoardInfo();
 80097a4:	f000 f93c 	bl	8009a20 <PrintBoardInfo>




	/*Initialize all the settings-------------*/
	InitialSettings();
 80097a8:	f000 fa26 	bl	8009bf8 <InitialSettings>
	UpdateSetting();
 80097ac:	f000 fb18 	bl	8009de0 <UpdateSetting>

	/*Initialize the modbus serial line-------*/
	MBRS_Init(&gVar.mbRTUSlave, CONF_DEF_MBRTUS_SLAVE_ADDRESS);
 80097b0:	2101      	movs	r1, #1
 80097b2:	4819      	ldr	r0, [pc, #100]	@ (8009818 <SchedulerInit+0xc0>)
 80097b4:	f003 f92a 	bl	800ca0c <MBRS_Init>
	MBS_Init(&gVar.mbSerial, &huart6, &htim4, &htim5);		// initialize modbus serial
 80097b8:	4b18      	ldr	r3, [pc, #96]	@ (800981c <SchedulerInit+0xc4>)
 80097ba:	4a19      	ldr	r2, [pc, #100]	@ (8009820 <SchedulerInit+0xc8>)
 80097bc:	4919      	ldr	r1, [pc, #100]	@ (8009824 <SchedulerInit+0xcc>)
 80097be:	481a      	ldr	r0, [pc, #104]	@ (8009828 <SchedulerInit+0xd0>)
 80097c0:	f003 f9a0 	bl	800cb04 <MBS_Init>
	MBS_Config(&gVar.mbSerial);								// to configure the modbus serial and 3.5 and 1.5 char timer
 80097c4:	4818      	ldr	r0, [pc, #96]	@ (8009828 <SchedulerInit+0xd0>)
 80097c6:	f003 fa1d 	bl	800cc04 <MBS_Config>


	/*Callback--------------------------------*/
	CB_MB_InitCallback();
 80097ca:	f7ff fafb 	bl	8008dc4 <CB_MB_InitCallback>

	/*Print debug status*/
	uint8_t temp = debug.enable;
 80097ce:	4b0e      	ldr	r3, [pc, #56]	@ (8009808 <SchedulerInit+0xb0>)
 80097d0:	781b      	ldrb	r3, [r3, #0]
 80097d2:	71fb      	strb	r3, [r7, #7]
	debug.enable = 1;
 80097d4:	4b0c      	ldr	r3, [pc, #48]	@ (8009808 <SchedulerInit+0xb0>)
 80097d6:	2201      	movs	r2, #1
 80097d8:	701a      	strb	r2, [r3, #0]
	DEBUG_SPRINT_NL( "Debug: %sabled!", (temp? "En":"Dis"));
 80097da:	79fb      	ldrb	r3, [r7, #7]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d001      	beq.n	80097e4 <SchedulerInit+0x8c>
 80097e0:	4b12      	ldr	r3, [pc, #72]	@ (800982c <SchedulerInit+0xd4>)
 80097e2:	e000      	b.n	80097e6 <SchedulerInit+0x8e>
 80097e4:	4b12      	ldr	r3, [pc, #72]	@ (8009830 <SchedulerInit+0xd8>)
 80097e6:	4619      	mov	r1, r3
 80097e8:	4812      	ldr	r0, [pc, #72]	@ (8009834 <SchedulerInit+0xdc>)
 80097ea:	f001 fefd 	bl	800b5e8 <DEBUG_SPRINT_NL>
	debug.enable = temp;
 80097ee:	4a06      	ldr	r2, [pc, #24]	@ (8009808 <SchedulerInit+0xb0>)
 80097f0:	79fb      	ldrb	r3, [r7, #7]
 80097f2:	7013      	strb	r3, [r2, #0]
}
 80097f4:	bf00      	nop
 80097f6:	3708      	adds	r7, #8
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}
 80097fc:	40020800 	.word	0x40020800
 8009800:	20000594 	.word	0x20000594
 8009804:	20000c08 	.word	0x20000c08
 8009808:	2000097c 	.word	0x2000097c
 800980c:	200005dc 	.word	0x200005dc
 8009810:	0801350c 	.word	0x0801350c
 8009814:	08013510 	.word	0x08013510
 8009818:	200008b0 	.word	0x200008b0
 800981c:	20000504 	.word	0x20000504
 8009820:	200004bc 	.word	0x200004bc
 8009824:	20000624 	.word	0x20000624
 8009828:	2000066c 	.word	0x2000066c
 800982c:	08013538 	.word	0x08013538
 8009830:	0801353c 	.word	0x0801353c
 8009834:	08013540 	.word	0x08013540

08009838 <Scheduler>:

/**
  * @brief Scheduler A is used for the non blocking task
  *
  */
void Scheduler(void){
 8009838:	b580      	push	{r7, lr}
 800983a:	af00      	add	r7, sp, #0



	SupperLoop();
 800983c:	f000 f81b 	bl	8009876 <SupperLoop>

	if(TimeReached(SCHEDULE_SLOW, INTERVAL_250MS)){
 8009840:	21fa      	movs	r1, #250	@ 0xfa
 8009842:	2003      	movs	r0, #3
 8009844:	f000 f8a0 	bl	8009988 <TimeReached>
 8009848:	4603      	mov	r3, r0
 800984a:	2b00      	cmp	r3, #0
 800984c:	d004      	beq.n	8009858 <Scheduler+0x20>
		SetLastScheduleTime(SCHEDULE_SLOW);
 800984e:	2003      	movs	r0, #3
 8009850:	f000 f8c2 	bl	80099d8 <SetLastScheduleTime>
		MediumLoop();
 8009854:	f000 f817 	bl	8009886 <MediumLoop>
	}

	if(TimeReached(SCHEDULE_VERY_SLOW, INTERVAL_5000MS)){
 8009858:	f241 3188 	movw	r1, #5000	@ 0x1388
 800985c:	2004      	movs	r0, #4
 800985e:	f000 f893 	bl	8009988 <TimeReached>
 8009862:	4603      	mov	r3, r0
 8009864:	2b00      	cmp	r3, #0
 8009866:	d004      	beq.n	8009872 <Scheduler+0x3a>
		SetLastScheduleTime(SCHEDULE_VERY_SLOW);
 8009868:	2004      	movs	r0, #4
 800986a:	f000 f8b5 	bl	80099d8 <SetLastScheduleTime>
		VerySlowLoop();
 800986e:	f000 f817 	bl	80098a0 <VerySlowLoop>
	}

}
 8009872:	bf00      	nop
 8009874:	bd80      	pop	{r7, pc}

08009876 <SupperLoop>:
 *
 * @param None
 *
 * @return void
 */
void SupperLoop(void){
 8009876:	b580      	push	{r7, lr}
 8009878:	af00      	add	r7, sp, #0


	/*DIs---------------------*/
	TH_DI();
 800987a:	f000 fc23 	bl	800a0c4 <TH_DI>

	/*DOs---------------------*/
	TH_DO();
 800987e:	f000 fc81 	bl	800a184 <TH_DO>

}
 8009882:	bf00      	nop
 8009884:	bd80      	pop	{r7, pc}

08009886 <MediumLoop>:
 *
 * @param None
 *
 * @return void
 */
void MediumLoop(void){
 8009886:	b580      	push	{r7, lr}
 8009888:	af00      	add	r7, sp, #0
	/*Factory reset-------------*/
	TH_MB_ChecktSlaveAddressChange();
 800988a:	f000 fb81 	bl	8009f90 <TH_MB_ChecktSlaveAddressChange>
	TH_MB_CheckSerialConfigChanges();
 800988e:	f000 fbef 	bl	800a070 <TH_MB_CheckSerialConfigChanges>

	/*Factory reset-------------*/
	FLASH_CheckForChanges();
 8009892:	f7ff fe19 	bl	80094c8 <FLASH_CheckForChanges>

	/*Factory reset-------------*/
	TH_PushButton();
 8009896:	f000 fce9 	bl	800a26c <TH_PushButton>

}
 800989a:	bf00      	nop
 800989c:	bd80      	pop	{r7, pc}
	...

080098a0 <VerySlowLoop>:
 *
 * @param None
 *
 * @return void
 */
void VerySlowLoop(void){
 80098a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098a2:	b087      	sub	sp, #28
 80098a4:	af06      	add	r7, sp, #24

	/*Periodic logging----------*/
	if(!debug.enable) {return;}
 80098a6:	4b31      	ldr	r3, [pc, #196]	@ (800996c <VerySlowLoop+0xcc>)
 80098a8:	781b      	ldrb	r3, [r3, #0]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d059      	beq.n	8009962 <VerySlowLoop+0xc2>

	DEBUG_PRINT("\r\n");
 80098ae:	4830      	ldr	r0, [pc, #192]	@ (8009970 <VerySlowLoop+0xd0>)
 80098b0:	f001 fe3c 	bl	800b52c <DEBUG_PRINT>
	/*Modbus logging----------*/
	DEBUG_SPRINT_NL("Modbus: {SA: %d, SrlConfig:{BR:%d, DB:%d, PB:%d, SB:%d}}",
					gVar.mbRTUSlave.slave_address,
 80098b4:	4b2f      	ldr	r3, [pc, #188]	@ (8009974 <VerySlowLoop+0xd4>)
 80098b6:	f893 3244 	ldrb.w	r3, [r3, #580]	@ 0x244
	DEBUG_SPRINT_NL("Modbus: {SA: %d, SrlConfig:{BR:%d, DB:%d, PB:%d, SB:%d}}",
 80098ba:	4618      	mov	r0, r3
 80098bc:	4b2d      	ldr	r3, [pc, #180]	@ (8009974 <VerySlowLoop+0xd4>)
 80098be:	685a      	ldr	r2, [r3, #4]
					gVar.mbSerial.baudRate, gVar.mbSerial.dataBits,
 80098c0:	4b2c      	ldr	r3, [pc, #176]	@ (8009974 <VerySlowLoop+0xd4>)
 80098c2:	7a1b      	ldrb	r3, [r3, #8]
	DEBUG_SPRINT_NL("Modbus: {SA: %d, SrlConfig:{BR:%d, DB:%d, PB:%d, SB:%d}}",
 80098c4:	461c      	mov	r4, r3
					gVar.mbSerial.parityBit, gVar.mbSerial.stopBit);
 80098c6:	4b2b      	ldr	r3, [pc, #172]	@ (8009974 <VerySlowLoop+0xd4>)
 80098c8:	7a5b      	ldrb	r3, [r3, #9]
	DEBUG_SPRINT_NL("Modbus: {SA: %d, SrlConfig:{BR:%d, DB:%d, PB:%d, SB:%d}}",
 80098ca:	4619      	mov	r1, r3
					gVar.mbSerial.parityBit, gVar.mbSerial.stopBit);
 80098cc:	4b29      	ldr	r3, [pc, #164]	@ (8009974 <VerySlowLoop+0xd4>)
 80098ce:	7a9b      	ldrb	r3, [r3, #10]
	DEBUG_SPRINT_NL("Modbus: {SA: %d, SrlConfig:{BR:%d, DB:%d, PB:%d, SB:%d}}",
 80098d0:	9301      	str	r3, [sp, #4]
 80098d2:	9100      	str	r1, [sp, #0]
 80098d4:	4623      	mov	r3, r4
 80098d6:	4601      	mov	r1, r0
 80098d8:	4827      	ldr	r0, [pc, #156]	@ (8009978 <VerySlowLoop+0xd8>)
 80098da:	f001 fe85 	bl	800b5e8 <DEBUG_SPRINT_NL>

	/*Dis logging----------------*/
	DEBUG_SPRINT_NL("DI 0 to 4: { State[%d, %d, %d, %d], "
					"DbuncDelay[%ld, %ld, %ld, %ld]us }",
					gVar.di[DI_ID_0].state, gVar.di[DI_ID_1].state,
 80098de:	4b25      	ldr	r3, [pc, #148]	@ (8009974 <VerySlowLoop+0xd4>)
 80098e0:	f893 326e 	ldrb.w	r3, [r3, #622]	@ 0x26e
	DEBUG_SPRINT_NL("DI 0 to 4: { State[%d, %d, %d, %d], "
 80098e4:	461d      	mov	r5, r3
					gVar.di[DI_ID_0].state, gVar.di[DI_ID_1].state,
 80098e6:	4b23      	ldr	r3, [pc, #140]	@ (8009974 <VerySlowLoop+0xd4>)
 80098e8:	f893 328a 	ldrb.w	r3, [r3, #650]	@ 0x28a
	DEBUG_SPRINT_NL("DI 0 to 4: { State[%d, %d, %d, %d], "
 80098ec:	461e      	mov	r6, r3
					gVar.di[DI_ID_2].state, gVar.di[DI_ID_3].state,
 80098ee:	4b21      	ldr	r3, [pc, #132]	@ (8009974 <VerySlowLoop+0xd4>)
 80098f0:	f893 32a6 	ldrb.w	r3, [r3, #678]	@ 0x2a6
	DEBUG_SPRINT_NL("DI 0 to 4: { State[%d, %d, %d, %d], "
 80098f4:	469c      	mov	ip, r3
					gVar.di[DI_ID_2].state, gVar.di[DI_ID_3].state,
 80098f6:	4b1f      	ldr	r3, [pc, #124]	@ (8009974 <VerySlowLoop+0xd4>)
 80098f8:	f893 32c2 	ldrb.w	r3, [r3, #706]	@ 0x2c2
	DEBUG_SPRINT_NL("DI 0 to 4: { State[%d, %d, %d, %d], "
 80098fc:	461c      	mov	r4, r3
 80098fe:	4b1d      	ldr	r3, [pc, #116]	@ (8009974 <VerySlowLoop+0xd4>)
 8009900:	f8d3 3260 	ldr.w	r3, [r3, #608]	@ 0x260
 8009904:	4a1b      	ldr	r2, [pc, #108]	@ (8009974 <VerySlowLoop+0xd4>)
 8009906:	f8d2 227c 	ldr.w	r2, [r2, #636]	@ 0x27c
 800990a:	491a      	ldr	r1, [pc, #104]	@ (8009974 <VerySlowLoop+0xd4>)
 800990c:	f8d1 1298 	ldr.w	r1, [r1, #664]	@ 0x298
 8009910:	4818      	ldr	r0, [pc, #96]	@ (8009974 <VerySlowLoop+0xd4>)
 8009912:	f8d0 02b4 	ldr.w	r0, [r0, #692]	@ 0x2b4
 8009916:	9004      	str	r0, [sp, #16]
 8009918:	9103      	str	r1, [sp, #12]
 800991a:	9202      	str	r2, [sp, #8]
 800991c:	9301      	str	r3, [sp, #4]
 800991e:	9400      	str	r4, [sp, #0]
 8009920:	4663      	mov	r3, ip
 8009922:	4632      	mov	r2, r6
 8009924:	4629      	mov	r1, r5
 8009926:	4815      	ldr	r0, [pc, #84]	@ (800997c <VerySlowLoop+0xdc>)
 8009928:	f001 fe5e 	bl	800b5e8 <DEBUG_SPRINT_NL>
					gVar.di[DI_ID_0].debounce.delay,gVar.di[DI_ID_1].debounce.delay,
					gVar.di[DI_ID_2].debounce.delay,gVar.di[DI_ID_3].debounce.delay);
	DEBUG_SPRINT_NL(debug.str);
 800992c:	4814      	ldr	r0, [pc, #80]	@ (8009980 <VerySlowLoop+0xe0>)
 800992e:	f001 fe5b 	bl	800b5e8 <DEBUG_SPRINT_NL>
	/*Dis logging----------------*/
	DEBUG_SPRINT_NL("DO 0 to 4: { State[%d, %d, %d, %d] }",
					gVar.do_[DO_ID_0].state, gVar.do_[DO_ID_1].state,
 8009932:	4b10      	ldr	r3, [pc, #64]	@ (8009974 <VerySlowLoop+0xd4>)
 8009934:	f893 32ce 	ldrb.w	r3, [r3, #718]	@ 0x2ce
	DEBUG_SPRINT_NL("DO 0 to 4: { State[%d, %d, %d, %d] }",
 8009938:	4619      	mov	r1, r3
					gVar.do_[DO_ID_0].state, gVar.do_[DO_ID_1].state,
 800993a:	4b0e      	ldr	r3, [pc, #56]	@ (8009974 <VerySlowLoop+0xd4>)
 800993c:	f893 32da 	ldrb.w	r3, [r3, #730]	@ 0x2da
	DEBUG_SPRINT_NL("DO 0 to 4: { State[%d, %d, %d, %d] }",
 8009940:	461a      	mov	r2, r3
					gVar.do_[DO_ID_2].state, gVar.do_[DO_ID_3].state);
 8009942:	4b0c      	ldr	r3, [pc, #48]	@ (8009974 <VerySlowLoop+0xd4>)
 8009944:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
	DEBUG_SPRINT_NL("DO 0 to 4: { State[%d, %d, %d, %d] }",
 8009948:	4618      	mov	r0, r3
					gVar.do_[DO_ID_2].state, gVar.do_[DO_ID_3].state);
 800994a:	4b0a      	ldr	r3, [pc, #40]	@ (8009974 <VerySlowLoop+0xd4>)
 800994c:	f893 32f2 	ldrb.w	r3, [r3, #754]	@ 0x2f2
	DEBUG_SPRINT_NL("DO 0 to 4: { State[%d, %d, %d, %d] }",
 8009950:	9300      	str	r3, [sp, #0]
 8009952:	4603      	mov	r3, r0
 8009954:	480b      	ldr	r0, [pc, #44]	@ (8009984 <VerySlowLoop+0xe4>)
 8009956:	f001 fe47 	bl	800b5e8 <DEBUG_SPRINT_NL>
	DEBUG_SPRINT_NL(debug.str);
 800995a:	4809      	ldr	r0, [pc, #36]	@ (8009980 <VerySlowLoop+0xe0>)
 800995c:	f001 fe44 	bl	800b5e8 <DEBUG_SPRINT_NL>
 8009960:	e000      	b.n	8009964 <VerySlowLoop+0xc4>
	if(!debug.enable) {return;}
 8009962:	bf00      	nop
}
 8009964:	3704      	adds	r7, #4
 8009966:	46bd      	mov	sp, r7
 8009968:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800996a:	bf00      	nop
 800996c:	2000097c 	.word	0x2000097c
 8009970:	08013550 	.word	0x08013550
 8009974:	2000066c 	.word	0x2000066c
 8009978:	08013554 	.word	0x08013554
 800997c:	08013590 	.word	0x08013590
 8009980:	20000980 	.word	0x20000980
 8009984:	080135d8 	.word	0x080135d8

08009988 <TimeReached>:
  * @param schedule: schedule task id
  * @param interval: interval between two schedule task
  * @retval if time reached it will return true otherwise false
  *
  */
uint8_t TimeReached(uint8_t schedule, uint16_t interval){
 8009988:	b580      	push	{r7, lr}
 800998a:	b082      	sub	sp, #8
 800998c:	af00      	add	r7, sp, #0
 800998e:	4603      	mov	r3, r0
 8009990:	460a      	mov	r2, r1
 8009992:	71fb      	strb	r3, [r7, #7]
 8009994:	4613      	mov	r3, r2
 8009996:	80bb      	strh	r3, [r7, #4]

	return (((HAL_GetTick()-LastScheduleTime[schedule]) >= interval) || ((int32_t)(HAL_GetTick() - LastScheduleTime[schedule]) < 0));
 8009998:	f003 fd30 	bl	800d3fc <HAL_GetTick>
 800999c:	4602      	mov	r2, r0
 800999e:	79fb      	ldrb	r3, [r7, #7]
 80099a0:	490c      	ldr	r1, [pc, #48]	@ (80099d4 <TimeReached+0x4c>)
 80099a2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80099a6:	1ad2      	subs	r2, r2, r3
 80099a8:	88bb      	ldrh	r3, [r7, #4]
 80099aa:	429a      	cmp	r2, r3
 80099ac:	d209      	bcs.n	80099c2 <TimeReached+0x3a>
 80099ae:	f003 fd25 	bl	800d3fc <HAL_GetTick>
 80099b2:	4602      	mov	r2, r0
 80099b4:	79fb      	ldrb	r3, [r7, #7]
 80099b6:	4907      	ldr	r1, [pc, #28]	@ (80099d4 <TimeReached+0x4c>)
 80099b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80099bc:	1ad3      	subs	r3, r2, r3
 80099be:	2b00      	cmp	r3, #0
 80099c0:	da01      	bge.n	80099c6 <TimeReached+0x3e>
 80099c2:	2301      	movs	r3, #1
 80099c4:	e000      	b.n	80099c8 <TimeReached+0x40>
 80099c6:	2300      	movs	r3, #0
 80099c8:	b2db      	uxtb	r3, r3

}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3708      	adds	r7, #8
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}
 80099d2:	bf00      	nop
 80099d4:	20000434 	.word	0x20000434

080099d8 <SetLastScheduleTime>:
/**
  * @brief Sets the last time of the executed schedule task
  * @param schedule: schedule task id
  * @retval none
  */
void SetLastScheduleTime(uint8_t schedule){
 80099d8:	b590      	push	{r4, r7, lr}
 80099da:	b083      	sub	sp, #12
 80099dc:	af00      	add	r7, sp, #0
 80099de:	4603      	mov	r3, r0
 80099e0:	71fb      	strb	r3, [r7, #7]
	LastScheduleTime[schedule] = HAL_GetTick();
 80099e2:	79fc      	ldrb	r4, [r7, #7]
 80099e4:	f003 fd0a 	bl	800d3fc <HAL_GetTick>
 80099e8:	4603      	mov	r3, r0
 80099ea:	4a03      	ldr	r2, [pc, #12]	@ (80099f8 <SetLastScheduleTime+0x20>)
 80099ec:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
 80099f0:	bf00      	nop
 80099f2:	370c      	adds	r7, #12
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd90      	pop	{r4, r7, pc}
 80099f8:	20000434 	.word	0x20000434

080099fc <PrintVersion>:


/* Print theFirmware and hardware version number
 * */
void PrintVersion(void){
 80099fc:	b580      	push	{r7, lr}
 80099fe:	af00      	add	r7, sp, #0
	DEBUG_SPRINT_NL("Hardware Version: %02d.%02d", HW_VIRSION_MAJOR, HW_VIRSION_MINOR);
 8009a00:	2200      	movs	r2, #0
 8009a02:	2101      	movs	r1, #1
 8009a04:	4804      	ldr	r0, [pc, #16]	@ (8009a18 <PrintVersion+0x1c>)
 8009a06:	f001 fdef 	bl	800b5e8 <DEBUG_SPRINT_NL>
	DEBUG_SPRINT_NL("Firmware Version: %02d.%02d", FW_VIRSION_MAJOR, FW_VIRSION_MINOR);
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	2101      	movs	r1, #1
 8009a0e:	4803      	ldr	r0, [pc, #12]	@ (8009a1c <PrintVersion+0x20>)
 8009a10:	f001 fdea 	bl	800b5e8 <DEBUG_SPRINT_NL>
}
 8009a14:	bf00      	nop
 8009a16:	bd80      	pop	{r7, pc}
 8009a18:	08013600 	.word	0x08013600
 8009a1c:	0801361c 	.word	0x0801361c

08009a20 <PrintBoardInfo>:


/* Print the MCU information
 * */
void PrintBoardInfo(void){
 8009a20:	b590      	push	{r4, r7, lr}
 8009a22:	b095      	sub	sp, #84	@ 0x54
 8009a24:	af02      	add	r7, sp, #8
			uint32_t LPWRRSTF : 1;

		}bit;
	}rstReg;

	rstReg.value = RCC->CSR;
 8009a26:	4b69      	ldr	r3, [pc, #420]	@ (8009bcc <PrintBoardInfo+0x1ac>)
 8009a28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a2a:	647b      	str	r3, [r7, #68]	@ 0x44
	char str[64] = {0};
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	607b      	str	r3, [r7, #4]
 8009a30:	f107 0308 	add.w	r3, r7, #8
 8009a34:	223c      	movs	r2, #60	@ 0x3c
 8009a36:	2100      	movs	r1, #0
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f007 fbcb 	bl	80111d4 <memset>
	DEBUG_SPRINT_APPEND(str, "Restart Reason: ");
 8009a3e:	1d3b      	adds	r3, r7, #4
 8009a40:	4963      	ldr	r1, [pc, #396]	@ (8009bd0 <PrintBoardInfo+0x1b0>)
 8009a42:	4618      	mov	r0, r3
 8009a44:	f001 fe1c 	bl	800b680 <DEBUG_SPRINT_APPEND>
	if(rstReg.bit.LPWRRSTF) DEBUG_SPRINT_APPEND(str,  "Low power, ");
 8009a48:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009a4c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009a50:	b2db      	uxtb	r3, r3
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d004      	beq.n	8009a60 <PrintBoardInfo+0x40>
 8009a56:	1d3b      	adds	r3, r7, #4
 8009a58:	495e      	ldr	r1, [pc, #376]	@ (8009bd4 <PrintBoardInfo+0x1b4>)
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f001 fe10 	bl	800b680 <DEBUG_SPRINT_APPEND>
	if(rstReg.bit.WWDGRSTF) DEBUG_SPRINT_APPEND(str, "W-Watchdog, ");
 8009a60:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009a64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a68:	b2db      	uxtb	r3, r3
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d004      	beq.n	8009a78 <PrintBoardInfo+0x58>
 8009a6e:	1d3b      	adds	r3, r7, #4
 8009a70:	4959      	ldr	r1, [pc, #356]	@ (8009bd8 <PrintBoardInfo+0x1b8>)
 8009a72:	4618      	mov	r0, r3
 8009a74:	f001 fe04 	bl	800b680 <DEBUG_SPRINT_APPEND>
	if(rstReg.bit.IWDGRSTF) DEBUG_SPRINT_APPEND( str, "I-Watchdog, ");
 8009a78:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009a7c:	f003 0320 	and.w	r3, r3, #32
 8009a80:	b2db      	uxtb	r3, r3
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d004      	beq.n	8009a90 <PrintBoardInfo+0x70>
 8009a86:	1d3b      	adds	r3, r7, #4
 8009a88:	4954      	ldr	r1, [pc, #336]	@ (8009bdc <PrintBoardInfo+0x1bc>)
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f001 fdf8 	bl	800b680 <DEBUG_SPRINT_APPEND>
	if(rstReg.bit.SFTRSTF) DEBUG_SPRINT_APPEND(str, "Software, ");
 8009a90:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009a94:	f003 0310 	and.w	r3, r3, #16
 8009a98:	b2db      	uxtb	r3, r3
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d004      	beq.n	8009aa8 <PrintBoardInfo+0x88>
 8009a9e:	1d3b      	adds	r3, r7, #4
 8009aa0:	494f      	ldr	r1, [pc, #316]	@ (8009be0 <PrintBoardInfo+0x1c0>)
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f001 fdec 	bl	800b680 <DEBUG_SPRINT_APPEND>
	if(rstReg.bit.PORRSTF) DEBUG_SPRINT_APPEND( str, "POR/PDR, ");
 8009aa8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009aac:	f003 0308 	and.w	r3, r3, #8
 8009ab0:	b2db      	uxtb	r3, r3
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d004      	beq.n	8009ac0 <PrintBoardInfo+0xa0>
 8009ab6:	1d3b      	adds	r3, r7, #4
 8009ab8:	494a      	ldr	r1, [pc, #296]	@ (8009be4 <PrintBoardInfo+0x1c4>)
 8009aba:	4618      	mov	r0, r3
 8009abc:	f001 fde0 	bl	800b680 <DEBUG_SPRINT_APPEND>
	if(rstReg.bit.PINRSTF) DEBUG_SPRINT_APPEND( str, "Hardware, ");
 8009ac0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009ac4:	f003 0304 	and.w	r3, r3, #4
 8009ac8:	b2db      	uxtb	r3, r3
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d004      	beq.n	8009ad8 <PrintBoardInfo+0xb8>
 8009ace:	1d3b      	adds	r3, r7, #4
 8009ad0:	4945      	ldr	r1, [pc, #276]	@ (8009be8 <PrintBoardInfo+0x1c8>)
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f001 fdd4 	bl	800b680 <DEBUG_SPRINT_APPEND>
	if(rstReg.bit.BORRSTF) DEBUG_SPRINT_APPEND( str, "BOR, ");
 8009ad8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009adc:	f003 0302 	and.w	r3, r3, #2
 8009ae0:	b2db      	uxtb	r3, r3
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d004      	beq.n	8009af0 <PrintBoardInfo+0xd0>
 8009ae6:	1d3b      	adds	r3, r7, #4
 8009ae8:	4940      	ldr	r1, [pc, #256]	@ (8009bec <PrintBoardInfo+0x1cc>)
 8009aea:	4618      	mov	r0, r3
 8009aec:	f001 fdc8 	bl	800b680 <DEBUG_SPRINT_APPEND>
	DEBUG_SPRINT_NL(str);
 8009af0:	1d3b      	adds	r3, r7, #4
 8009af2:	4618      	mov	r0, r3
 8009af4:	f001 fd78 	bl	800b5e8 <DEBUG_SPRINT_NL>
	__HAL_RCC_CLEAR_RESET_FLAGS();
 8009af8:	4b34      	ldr	r3, [pc, #208]	@ (8009bcc <PrintBoardInfo+0x1ac>)
 8009afa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009afc:	4a33      	ldr	r2, [pc, #204]	@ (8009bcc <PrintBoardInfo+0x1ac>)
 8009afe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009b02:	6753      	str	r3, [r2, #116]	@ 0x74

	FLASH_Download();
 8009b04:	f7ff fcba 	bl	800947c <FLASH_Download>
	/*Read Slave address*/
	TH_MB_ChecktSlaveAddressChange();
 8009b08:	f000 fa42 	bl	8009f90 <TH_MB_ChecktSlaveAddressChange>

	/*Read Serial COnfig*/
	uint32_t value = 0;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	603b      	str	r3, [r7, #0]
	FLASH_ReadInt(FSA_MB_SERIAL_BAUDRATE, &value);
 8009b10:	463b      	mov	r3, r7
 8009b12:	4619      	mov	r1, r3
 8009b14:	2005      	movs	r0, #5
 8009b16:	f7ff fcfb 	bl	8009510 <FLASH_ReadInt>
	if(!(value < DEF_MAX_U16)){
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b20:	d302      	bcc.n	8009b28 <PrintBoardInfo+0x108>
		value = CONF_DEF_MB_SERIAL_BAUDRATE;
 8009b22:	f44f 4396 	mov.w	r3, #19200	@ 0x4b00
 8009b26:	603b      	str	r3, [r7, #0]
	}
	gVar.mbSerial.baudRate = value;
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	4a31      	ldr	r2, [pc, #196]	@ (8009bf0 <PrintBoardInfo+0x1d0>)
 8009b2c:	6053      	str	r3, [r2, #4]

	FLASH_ReadInt(FSA_MB_SERIAL_DATABIT, (uint32_t*)&value);
 8009b2e:	463b      	mov	r3, r7
 8009b30:	4619      	mov	r1, r3
 8009b32:	2006      	movs	r0, #6
 8009b34:	f7ff fcec 	bl	8009510 <FLASH_ReadInt>
	if(!(value == MBS_DB_7 || value == MBS_DB_8)){
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	2b07      	cmp	r3, #7
 8009b3c:	d004      	beq.n	8009b48 <PrintBoardInfo+0x128>
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	2b08      	cmp	r3, #8
 8009b42:	d001      	beq.n	8009b48 <PrintBoardInfo+0x128>
		value = CONF_DEF_MB_SERIAL_DATABIT;
 8009b44:	2308      	movs	r3, #8
 8009b46:	603b      	str	r3, [r7, #0]
	}
	gVar.mbSerial.dataBits = value;
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	b2da      	uxtb	r2, r3
 8009b4c:	4b28      	ldr	r3, [pc, #160]	@ (8009bf0 <PrintBoardInfo+0x1d0>)
 8009b4e:	721a      	strb	r2, [r3, #8]

	FLASH_ReadInt(FSA_MB_SERIAL_PARITY, (uint32_t*)&value);
 8009b50:	463b      	mov	r3, r7
 8009b52:	4619      	mov	r1, r3
 8009b54:	2007      	movs	r0, #7
 8009b56:	f7ff fcdb 	bl	8009510 <FLASH_ReadInt>
	if(!(value == MBS_PB_NONE || value == MBS_PB_ODD || value == MBS_PB_EVEN)){
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d007      	beq.n	8009b70 <PrintBoardInfo+0x150>
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	2b01      	cmp	r3, #1
 8009b64:	d004      	beq.n	8009b70 <PrintBoardInfo+0x150>
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	2b02      	cmp	r3, #2
 8009b6a:	d001      	beq.n	8009b70 <PrintBoardInfo+0x150>
		value = CONF_DEF_MB_SERIAL_PARITY;
 8009b6c:	2302      	movs	r3, #2
 8009b6e:	603b      	str	r3, [r7, #0]
	}
	gVar.mbSerial.parityBit = value;
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	b2da      	uxtb	r2, r3
 8009b74:	4b1e      	ldr	r3, [pc, #120]	@ (8009bf0 <PrintBoardInfo+0x1d0>)
 8009b76:	725a      	strb	r2, [r3, #9]

	FLASH_ReadInt(FSA_MB_SERIAL_STOPBIT, (uint32_t*)&value);
 8009b78:	463b      	mov	r3, r7
 8009b7a:	4619      	mov	r1, r3
 8009b7c:	2008      	movs	r0, #8
 8009b7e:	f7ff fcc7 	bl	8009510 <FLASH_ReadInt>
	if(!(value == MBS_SB_1 || value == MBS_SB_2)){
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	2b01      	cmp	r3, #1
 8009b86:	d004      	beq.n	8009b92 <PrintBoardInfo+0x172>
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	2b02      	cmp	r3, #2
 8009b8c:	d001      	beq.n	8009b92 <PrintBoardInfo+0x172>
		value = CONF_DEF_MB_SERIAL_STOPBIT;
 8009b8e:	2301      	movs	r3, #1
 8009b90:	603b      	str	r3, [r7, #0]
	}
	gVar.mbSerial.stopBit = value;
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	b2da      	uxtb	r2, r3
 8009b96:	4b16      	ldr	r3, [pc, #88]	@ (8009bf0 <PrintBoardInfo+0x1d0>)
 8009b98:	729a      	strb	r2, [r3, #10]



	DEBUG_SPRINT_NL("Modbus: {SA: %d, SrlConfig:{BR:%d, DB:%d, PB:%d, SB:%d}}",
					gVar.mbRTUSlave.slave_address,
 8009b9a:	4b15      	ldr	r3, [pc, #84]	@ (8009bf0 <PrintBoardInfo+0x1d0>)
 8009b9c:	f893 3244 	ldrb.w	r3, [r3, #580]	@ 0x244
	DEBUG_SPRINT_NL("Modbus: {SA: %d, SrlConfig:{BR:%d, DB:%d, PB:%d, SB:%d}}",
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	4b13      	ldr	r3, [pc, #76]	@ (8009bf0 <PrintBoardInfo+0x1d0>)
 8009ba4:	685a      	ldr	r2, [r3, #4]
					gVar.mbSerial.baudRate, gVar.mbSerial.dataBits,
 8009ba6:	4b12      	ldr	r3, [pc, #72]	@ (8009bf0 <PrintBoardInfo+0x1d0>)
 8009ba8:	7a1b      	ldrb	r3, [r3, #8]
	DEBUG_SPRINT_NL("Modbus: {SA: %d, SrlConfig:{BR:%d, DB:%d, PB:%d, SB:%d}}",
 8009baa:	461c      	mov	r4, r3
					gVar.mbSerial.parityBit, gVar.mbSerial.stopBit);
 8009bac:	4b10      	ldr	r3, [pc, #64]	@ (8009bf0 <PrintBoardInfo+0x1d0>)
 8009bae:	7a5b      	ldrb	r3, [r3, #9]
	DEBUG_SPRINT_NL("Modbus: {SA: %d, SrlConfig:{BR:%d, DB:%d, PB:%d, SB:%d}}",
 8009bb0:	4619      	mov	r1, r3
					gVar.mbSerial.parityBit, gVar.mbSerial.stopBit);
 8009bb2:	4b0f      	ldr	r3, [pc, #60]	@ (8009bf0 <PrintBoardInfo+0x1d0>)
 8009bb4:	7a9b      	ldrb	r3, [r3, #10]
	DEBUG_SPRINT_NL("Modbus: {SA: %d, SrlConfig:{BR:%d, DB:%d, PB:%d, SB:%d}}",
 8009bb6:	9301      	str	r3, [sp, #4]
 8009bb8:	9100      	str	r1, [sp, #0]
 8009bba:	4623      	mov	r3, r4
 8009bbc:	4601      	mov	r1, r0
 8009bbe:	480d      	ldr	r0, [pc, #52]	@ (8009bf4 <PrintBoardInfo+0x1d4>)
 8009bc0:	f001 fd12 	bl	800b5e8 <DEBUG_SPRINT_NL>


}
 8009bc4:	bf00      	nop
 8009bc6:	374c      	adds	r7, #76	@ 0x4c
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd90      	pop	{r4, r7, pc}
 8009bcc:	40023800 	.word	0x40023800
 8009bd0:	08013638 	.word	0x08013638
 8009bd4:	0801364c 	.word	0x0801364c
 8009bd8:	08013658 	.word	0x08013658
 8009bdc:	08013668 	.word	0x08013668
 8009be0:	08013678 	.word	0x08013678
 8009be4:	08013684 	.word	0x08013684
 8009be8:	08013690 	.word	0x08013690
 8009bec:	0801369c 	.word	0x0801369c
 8009bf0:	2000066c 	.word	0x2000066c
 8009bf4:	08013554 	.word	0x08013554

08009bf8 <InitialSettings>:


/*
 * initial settings for the all kind of variables
 * */
void InitialSettings(void){
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b082      	sub	sp, #8
 8009bfc:	af00      	add	r7, sp, #0
	// Utilities-----------------------

	/*Modbus RTU Serial line----------------------*/
	gVar.mbSerial.isDataReceived 	= 0U;
 8009bfe:	4b6f      	ldr	r3, [pc, #444]	@ (8009dbc <InitialSettings+0x1c4>)
 8009c00:	2200      	movs	r2, #0
 8009c02:	735a      	strb	r2, [r3, #13]
	gVar.mbSerial.isReceiving 		= 0U;
 8009c04:	4b6d      	ldr	r3, [pc, #436]	@ (8009dbc <InitialSettings+0x1c4>)
 8009c06:	2200      	movs	r2, #0
 8009c08:	739a      	strb	r2, [r3, #14]
	gVar.mbSerial.isSending 		= 0U;
 8009c0a:	4b6c      	ldr	r3, [pc, #432]	@ (8009dbc <InitialSettings+0x1c4>)
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	73da      	strb	r2, [r3, #15]
	gVar.mbSerial.frameOkFlag		= 0U;
 8009c10:	4b6a      	ldr	r3, [pc, #424]	@ (8009dbc <InitialSettings+0x1c4>)
 8009c12:	2200      	movs	r2, #0
 8009c14:	741a      	strb	r2, [r3, #16]
	gVar.mbSerial.baudRate			= CONF_DEF_MB_SERIAL_BAUDRATE;
 8009c16:	4b69      	ldr	r3, [pc, #420]	@ (8009dbc <InitialSettings+0x1c4>)
 8009c18:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8009c1c:	605a      	str	r2, [r3, #4]
	gVar.mbSerial.dataBits			= CONF_DEF_MB_SERIAL_DATABIT;
 8009c1e:	4b67      	ldr	r3, [pc, #412]	@ (8009dbc <InitialSettings+0x1c4>)
 8009c20:	2208      	movs	r2, #8
 8009c22:	721a      	strb	r2, [r3, #8]
	gVar.mbSerial.parityBit			= CONF_DEF_MB_SERIAL_PARITY;
 8009c24:	4b65      	ldr	r3, [pc, #404]	@ (8009dbc <InitialSettings+0x1c4>)
 8009c26:	2202      	movs	r2, #2
 8009c28:	725a      	strb	r2, [r3, #9]
	gVar.mbSerial.stopBit			= CONF_DEF_MB_SERIAL_STOPBIT;
 8009c2a:	4b64      	ldr	r3, [pc, #400]	@ (8009dbc <InitialSettings+0x1c4>)
 8009c2c:	2201      	movs	r2, #1
 8009c2e:	729a      	strb	r2, [r3, #10]
	gVar.mbSerial.rcvByte 			= &CB_MB_RcvByte;
 8009c30:	4b62      	ldr	r3, [pc, #392]	@ (8009dbc <InitialSettings+0x1c4>)
 8009c32:	4a63      	ldr	r2, [pc, #396]	@ (8009dc0 <InitialSettings+0x1c8>)
 8009c34:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
	gVar.mbSerial.send 				= &CB_MB_Send;
 8009c38:	4b60      	ldr	r3, [pc, #384]	@ (8009dbc <InitialSettings+0x1c4>)
 8009c3a:	4a62      	ldr	r2, [pc, #392]	@ (8009dc4 <InitialSettings+0x1cc>)
 8009c3c:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
	gVar.mbSerial.setUpstream 		= &CB_MB_SetUpstream;
 8009c40:	4b5e      	ldr	r3, [pc, #376]	@ (8009dbc <InitialSettings+0x1c4>)
 8009c42:	4a61      	ldr	r2, [pc, #388]	@ (8009dc8 <InitialSettings+0x1d0>)
 8009c44:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
	gVar.mbSerial.setDownstream 	= &CB_MB_SetDownstream;
 8009c48:	4b5c      	ldr	r3, [pc, #368]	@ (8009dbc <InitialSettings+0x1c4>)
 8009c4a:	4a60      	ldr	r2, [pc, #384]	@ (8009dcc <InitialSettings+0x1d4>)
 8009c4c:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
	HAL_GPIO_WritePin(RS485_RX_LED_GPIO_Port, RS485_RX_LED_Pin, GPIO_PIN_RESET);
 8009c50:	2200      	movs	r2, #0
 8009c52:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8009c56:	485e      	ldr	r0, [pc, #376]	@ (8009dd0 <InitialSettings+0x1d8>)
 8009c58:	f004 fa38 	bl	800e0cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RS485_TX_LED_GPIO_Port, RS485_TX_LED_Pin, GPIO_PIN_RESET);
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009c62:	485b      	ldr	r0, [pc, #364]	@ (8009dd0 <InitialSettings+0x1d8>)
 8009c64:	f004 fa32 	bl	800e0cc <HAL_GPIO_WritePin>

	/*DIs----------------------------------------*/
	for(uint8_t i = DI_ID_0; i < DI_ID_MAX; i++){
 8009c68:	2300      	movs	r3, #0
 8009c6a:	71fb      	strb	r3, [r7, #7]
 8009c6c:	e026      	b.n	8009cbc <InitialSettings+0xc4>
		gVar.di[i].id 		= i;
 8009c6e:	79fa      	ldrb	r2, [r7, #7]
 8009c70:	4952      	ldr	r1, [pc, #328]	@ (8009dbc <InitialSettings+0x1c4>)
 8009c72:	4613      	mov	r3, r2
 8009c74:	00db      	lsls	r3, r3, #3
 8009c76:	1a9b      	subs	r3, r3, r2
 8009c78:	009b      	lsls	r3, r3, #2
 8009c7a:	440b      	add	r3, r1
 8009c7c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8009c80:	79fa      	ldrb	r2, [r7, #7]
 8009c82:	701a      	strb	r2, [r3, #0]
		gVar.di[i].state 	= GPIO_PIN_RESET;
 8009c84:	79fa      	ldrb	r2, [r7, #7]
 8009c86:	494d      	ldr	r1, [pc, #308]	@ (8009dbc <InitialSettings+0x1c4>)
 8009c88:	4613      	mov	r3, r2
 8009c8a:	00db      	lsls	r3, r3, #3
 8009c8c:	1a9b      	subs	r3, r3, r2
 8009c8e:	009b      	lsls	r3, r3, #2
 8009c90:	440b      	add	r3, r1
 8009c92:	f203 236e 	addw	r3, r3, #622	@ 0x26e
 8009c96:	2200      	movs	r2, #0
 8009c98:	701a      	strb	r2, [r3, #0]
		Debounce_Init(&gVar.di[i].debounce, CONF_DEF_DI_DEBOUNCE_DELAY);
 8009c9a:	79fa      	ldrb	r2, [r7, #7]
 8009c9c:	4613      	mov	r3, r2
 8009c9e:	00db      	lsls	r3, r3, #3
 8009ca0:	1a9b      	subs	r3, r3, r2
 8009ca2:	009b      	lsls	r3, r3, #2
 8009ca4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009ca8:	4a44      	ldr	r2, [pc, #272]	@ (8009dbc <InitialSettings+0x1c4>)
 8009caa:	4413      	add	r3, r2
 8009cac:	3308      	adds	r3, #8
 8009cae:	2164      	movs	r1, #100	@ 0x64
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f001 fb93 	bl	800b3dc <Debounce_Init>
	for(uint8_t i = DI_ID_0; i < DI_ID_MAX; i++){
 8009cb6:	79fb      	ldrb	r3, [r7, #7]
 8009cb8:	3301      	adds	r3, #1
 8009cba:	71fb      	strb	r3, [r7, #7]
 8009cbc:	79fb      	ldrb	r3, [r7, #7]
 8009cbe:	2b03      	cmp	r3, #3
 8009cc0:	d9d5      	bls.n	8009c6e <InitialSettings+0x76>
	}
	gVar.di[DI_ID_0].port 	= DI_0_GPIO_Port;
 8009cc2:	4b3e      	ldr	r3, [pc, #248]	@ (8009dbc <InitialSettings+0x1c4>)
 8009cc4:	4a43      	ldr	r2, [pc, #268]	@ (8009dd4 <InitialSettings+0x1dc>)
 8009cc6:	f8c3 2268 	str.w	r2, [r3, #616]	@ 0x268
	gVar.di[DI_ID_0].pin 	= DI_0_Pin;
 8009cca:	4b3c      	ldr	r3, [pc, #240]	@ (8009dbc <InitialSettings+0x1c4>)
 8009ccc:	2201      	movs	r2, #1
 8009cce:	f8a3 226c 	strh.w	r2, [r3, #620]	@ 0x26c
	gVar.di[DI_ID_1].port 	= DI_1_GPIO_Port;
 8009cd2:	4b3a      	ldr	r3, [pc, #232]	@ (8009dbc <InitialSettings+0x1c4>)
 8009cd4:	4a3f      	ldr	r2, [pc, #252]	@ (8009dd4 <InitialSettings+0x1dc>)
 8009cd6:	f8c3 2284 	str.w	r2, [r3, #644]	@ 0x284
	gVar.di[DI_ID_1].pin 	= DI_1_Pin;
 8009cda:	4b38      	ldr	r3, [pc, #224]	@ (8009dbc <InitialSettings+0x1c4>)
 8009cdc:	2202      	movs	r2, #2
 8009cde:	f8a3 2288 	strh.w	r2, [r3, #648]	@ 0x288
	gVar.di[DI_ID_2].port 	= DI_2_GPIO_Port;
 8009ce2:	4b36      	ldr	r3, [pc, #216]	@ (8009dbc <InitialSettings+0x1c4>)
 8009ce4:	4a3b      	ldr	r2, [pc, #236]	@ (8009dd4 <InitialSettings+0x1dc>)
 8009ce6:	f8c3 22a0 	str.w	r2, [r3, #672]	@ 0x2a0
	gVar.di[DI_ID_2].pin 	= DI_2_Pin;
 8009cea:	4b34      	ldr	r3, [pc, #208]	@ (8009dbc <InitialSettings+0x1c4>)
 8009cec:	2210      	movs	r2, #16
 8009cee:	f8a3 22a4 	strh.w	r2, [r3, #676]	@ 0x2a4
	gVar.di[DI_ID_3].port 	= DI_3_GPIO_Port;
 8009cf2:	4b32      	ldr	r3, [pc, #200]	@ (8009dbc <InitialSettings+0x1c4>)
 8009cf4:	4a36      	ldr	r2, [pc, #216]	@ (8009dd0 <InitialSettings+0x1d8>)
 8009cf6:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
	gVar.di[DI_ID_3].pin 	= DI_3_Pin;
 8009cfa:	4b30      	ldr	r3, [pc, #192]	@ (8009dbc <InitialSettings+0x1c4>)
 8009cfc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009d00:	f8a3 22c0 	strh.w	r2, [r3, #704]	@ 0x2c0

	/*DOs----------------------------------------*/
	for(uint8_t i = DO_ID_0; i < DO_ID_MAX; i++){
 8009d04:	2300      	movs	r3, #0
 8009d06:	71bb      	strb	r3, [r7, #6]
 8009d08:	e018      	b.n	8009d3c <InitialSettings+0x144>
		gVar.do_[i].id 		= i;
 8009d0a:	79ba      	ldrb	r2, [r7, #6]
 8009d0c:	492b      	ldr	r1, [pc, #172]	@ (8009dbc <InitialSettings+0x1c4>)
 8009d0e:	4613      	mov	r3, r2
 8009d10:	005b      	lsls	r3, r3, #1
 8009d12:	4413      	add	r3, r2
 8009d14:	009b      	lsls	r3, r3, #2
 8009d16:	440b      	add	r3, r1
 8009d18:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 8009d1c:	79ba      	ldrb	r2, [r7, #6]
 8009d1e:	701a      	strb	r2, [r3, #0]
		gVar.do_[i].state 	= GPIO_PIN_RESET;
 8009d20:	79ba      	ldrb	r2, [r7, #6]
 8009d22:	4926      	ldr	r1, [pc, #152]	@ (8009dbc <InitialSettings+0x1c4>)
 8009d24:	4613      	mov	r3, r2
 8009d26:	005b      	lsls	r3, r3, #1
 8009d28:	4413      	add	r3, r2
 8009d2a:	009b      	lsls	r3, r3, #2
 8009d2c:	440b      	add	r3, r1
 8009d2e:	f203 23ce 	addw	r3, r3, #718	@ 0x2ce
 8009d32:	2200      	movs	r2, #0
 8009d34:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = DO_ID_0; i < DO_ID_MAX; i++){
 8009d36:	79bb      	ldrb	r3, [r7, #6]
 8009d38:	3301      	adds	r3, #1
 8009d3a:	71bb      	strb	r3, [r7, #6]
 8009d3c:	79bb      	ldrb	r3, [r7, #6]
 8009d3e:	2b03      	cmp	r3, #3
 8009d40:	d9e3      	bls.n	8009d0a <InitialSettings+0x112>
	}
	gVar.do_[DO_ID_0].port 	= DO_0_GPIO_Port;
 8009d42:	4b1e      	ldr	r3, [pc, #120]	@ (8009dbc <InitialSettings+0x1c4>)
 8009d44:	4a23      	ldr	r2, [pc, #140]	@ (8009dd4 <InitialSettings+0x1dc>)
 8009d46:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
	gVar.do_[DO_ID_0].pin 	= DO_0_Pin;
 8009d4a:	4b1c      	ldr	r3, [pc, #112]	@ (8009dbc <InitialSettings+0x1c4>)
 8009d4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009d50:	f8a3 22cc 	strh.w	r2, [r3, #716]	@ 0x2cc
	gVar.do_[DO_ID_1].port 	= DO_1_GPIO_Port;
 8009d54:	4b19      	ldr	r3, [pc, #100]	@ (8009dbc <InitialSettings+0x1c4>)
 8009d56:	4a1f      	ldr	r2, [pc, #124]	@ (8009dd4 <InitialSettings+0x1dc>)
 8009d58:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
	gVar.do_[DO_ID_1].pin 	= DO_1_Pin;
 8009d5c:	4b17      	ldr	r3, [pc, #92]	@ (8009dbc <InitialSettings+0x1c4>)
 8009d5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009d62:	f8a3 22d8 	strh.w	r2, [r3, #728]	@ 0x2d8
	gVar.do_[DO_ID_2].port 	= DO_2_GPIO_Port;
 8009d66:	4b15      	ldr	r3, [pc, #84]	@ (8009dbc <InitialSettings+0x1c4>)
 8009d68:	4a1a      	ldr	r2, [pc, #104]	@ (8009dd4 <InitialSettings+0x1dc>)
 8009d6a:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
	gVar.do_[DO_ID_2].pin 	= DO_2_Pin;
 8009d6e:	4b13      	ldr	r3, [pc, #76]	@ (8009dbc <InitialSettings+0x1c4>)
 8009d70:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009d74:	f8a3 22e4 	strh.w	r2, [r3, #740]	@ 0x2e4
	gVar.do_[DO_ID_3].port 	= DO_3_GPIO_Port;
 8009d78:	4b10      	ldr	r3, [pc, #64]	@ (8009dbc <InitialSettings+0x1c4>)
 8009d7a:	4a16      	ldr	r2, [pc, #88]	@ (8009dd4 <InitialSettings+0x1dc>)
 8009d7c:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec
	gVar.do_[DO_ID_3].pin 	= DO_3_Pin;
 8009d80:	4b0e      	ldr	r3, [pc, #56]	@ (8009dbc <InitialSettings+0x1c4>)
 8009d82:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009d86:	f8a3 22f0 	strh.w	r2, [r3, #752]	@ 0x2f0



	/*Push button-------------------------------*/
	gVar.pushButton.pressCount = 0;
 8009d8a:	4b0c      	ldr	r3, [pc, #48]	@ (8009dbc <InitialSettings+0x1c4>)
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	f8c3 230c 	str.w	r2, [r3, #780]	@ 0x30c
	gVar.pushButton.port = SW_0_GPIO_Port;
 8009d92:	4b0a      	ldr	r3, [pc, #40]	@ (8009dbc <InitialSettings+0x1c4>)
 8009d94:	4a10      	ldr	r2, [pc, #64]	@ (8009dd8 <InitialSettings+0x1e0>)
 8009d96:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304
	gVar.pushButton.pin = SW_0_Pin;
 8009d9a:	4b08      	ldr	r3, [pc, #32]	@ (8009dbc <InitialSettings+0x1c4>)
 8009d9c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009da0:	f8a3 2308 	strh.w	r2, [r3, #776]	@ 0x308
	gVar.pushButton.state = 0;
 8009da4:	4b05      	ldr	r3, [pc, #20]	@ (8009dbc <InitialSettings+0x1c4>)
 8009da6:	2200      	movs	r2, #0
 8009da8:	f883 230a 	strb.w	r2, [r3, #778]	@ 0x30a
	Debounce_Init(&gVar.pushButton.debounce, DEF_RSTBTN_DEBOUNCE_DELAY);
 8009dac:	2164      	movs	r1, #100	@ 0x64
 8009dae:	480b      	ldr	r0, [pc, #44]	@ (8009ddc <InitialSettings+0x1e4>)
 8009db0:	f001 fb14 	bl	800b3dc <Debounce_Init>


}
 8009db4:	bf00      	nop
 8009db6:	3708      	adds	r7, #8
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}
 8009dbc:	2000066c 	.word	0x2000066c
 8009dc0:	08008e01 	.word	0x08008e01
 8009dc4:	08008e1d 	.word	0x08008e1d
 8009dc8:	08008e45 	.word	0x08008e45
 8009dcc:	08008e5d 	.word	0x08008e5d
 8009dd0:	40020400 	.word	0x40020400
 8009dd4:	40020000 	.word	0x40020000
 8009dd8:	40020800 	.word	0x40020800
 8009ddc:	20000960 	.word	0x20000960

08009de0 <UpdateSetting>:


/*Update settings from the storage*/
void UpdateSetting(void){
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b082      	sub	sp, #8
 8009de4:	af00      	add	r7, sp, #0
	uint8_t status = FLASH_Download();
 8009de6:	f7ff fb49 	bl	800947c <FLASH_Download>
 8009dea:	4603      	mov	r3, r0
 8009dec:	717b      	strb	r3, [r7, #5]
	if( status != FLASH_ERR_NONE){
 8009dee:	797b      	ldrb	r3, [r7, #5]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d005      	beq.n	8009e00 <UpdateSetting+0x20>
		DEBUG_SPRINT_NL("Storage: Error[%d]->Download Failed!",status);
 8009df4:	797b      	ldrb	r3, [r7, #5]
 8009df6:	4619      	mov	r1, r3
 8009df8:	4853      	ldr	r0, [pc, #332]	@ (8009f48 <UpdateSetting+0x168>)
 8009dfa:	f001 fbf5 	bl	800b5e8 <DEBUG_SPRINT_NL>
 8009dfe:	e002      	b.n	8009e06 <UpdateSetting+0x26>
	}else{
		DEBUG_SPRINT_NL("Storage: Download Successful!");
 8009e00:	4852      	ldr	r0, [pc, #328]	@ (8009f4c <UpdateSetting+0x16c>)
 8009e02:	f001 fbf1 	bl	800b5e8 <DEBUG_SPRINT_NL>
	}
	for(uint16_t address = 0; address < FSA_MAX; address++){
 8009e06:	2300      	movs	r3, #0
 8009e08:	80fb      	strh	r3, [r7, #6]
 8009e0a:	e093      	b.n	8009f34 <UpdateSetting+0x154>
		uint32_t value = 0;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	603b      	str	r3, [r7, #0]
		FLASH_ReadInt(address, &value);
 8009e10:	88fb      	ldrh	r3, [r7, #6]
 8009e12:	463a      	mov	r2, r7
 8009e14:	4611      	mov	r1, r2
 8009e16:	4618      	mov	r0, r3
 8009e18:	f7ff fb7a 	bl	8009510 <FLASH_ReadInt>
		switch (address) {
 8009e1c:	88fb      	ldrh	r3, [r7, #6]
 8009e1e:	3b01      	subs	r3, #1
 8009e20:	2b08      	cmp	r3, #8
 8009e22:	f200 8083 	bhi.w	8009f2c <UpdateSetting+0x14c>
 8009e26:	a201      	add	r2, pc, #4	@ (adr r2, 8009e2c <UpdateSetting+0x4c>)
 8009e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e2c:	08009e51 	.word	0x08009e51
 8009e30:	08009e67 	.word	0x08009e67
 8009e34:	08009e7d 	.word	0x08009e7d
 8009e38:	08009e93 	.word	0x08009e93
 8009e3c:	08009ea9 	.word	0x08009ea9
 8009e40:	08009ebf 	.word	0x08009ebf
 8009e44:	08009ed9 	.word	0x08009ed9
 8009e48:	08009ef9 	.word	0x08009ef9
 8009e4c:	08009f13 	.word	0x08009f13
			/*DIs---------------------------*/
			case FSA_DI0_DEBOUNCE_DELAY:
				if(!(value < DEF_MAX_U16)){
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e56:	d301      	bcc.n	8009e5c <UpdateSetting+0x7c>
					value = CONF_DEF_DI_DEBOUNCE_DELAY;
 8009e58:	2364      	movs	r3, #100	@ 0x64
 8009e5a:	603b      	str	r3, [r7, #0]
				}
				gVar.di[DI_ID_0].debounce.delay = value;
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	4a3c      	ldr	r2, [pc, #240]	@ (8009f50 <UpdateSetting+0x170>)
 8009e60:	f8c2 3260 	str.w	r3, [r2, #608]	@ 0x260
				break;
 8009e64:	e063      	b.n	8009f2e <UpdateSetting+0x14e>
			case FSA_DI1_DEBOUNCE_DELAY:
				if(!(value < DEF_MAX_U16)){
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e6c:	d301      	bcc.n	8009e72 <UpdateSetting+0x92>
					value = CONF_DEF_DI_DEBOUNCE_DELAY;
 8009e6e:	2364      	movs	r3, #100	@ 0x64
 8009e70:	603b      	str	r3, [r7, #0]
				}
				gVar.di[DI_ID_1].debounce.delay = value;
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	4a36      	ldr	r2, [pc, #216]	@ (8009f50 <UpdateSetting+0x170>)
 8009e76:	f8c2 327c 	str.w	r3, [r2, #636]	@ 0x27c
				break;
 8009e7a:	e058      	b.n	8009f2e <UpdateSetting+0x14e>
			case FSA_DI2_DEBOUNCE_DELAY:
				if(!(value < DEF_MAX_U16)){
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e82:	d301      	bcc.n	8009e88 <UpdateSetting+0xa8>
					value = CONF_DEF_DI_DEBOUNCE_DELAY;
 8009e84:	2364      	movs	r3, #100	@ 0x64
 8009e86:	603b      	str	r3, [r7, #0]
				}
				gVar.di[DI_ID_2].debounce.delay = value;
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	4a31      	ldr	r2, [pc, #196]	@ (8009f50 <UpdateSetting+0x170>)
 8009e8c:	f8c2 3298 	str.w	r3, [r2, #664]	@ 0x298
				break;
 8009e90:	e04d      	b.n	8009f2e <UpdateSetting+0x14e>
			case FSA_DI3_DEBOUNCE_DELAY:
				if(!(value < DEF_MAX_U16)){
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e98:	d301      	bcc.n	8009e9e <UpdateSetting+0xbe>
					value = CONF_DEF_DI_DEBOUNCE_DELAY;
 8009e9a:	2364      	movs	r3, #100	@ 0x64
 8009e9c:	603b      	str	r3, [r7, #0]
				}
				gVar.di[DI_ID_3].debounce.delay = value;
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	4a2b      	ldr	r2, [pc, #172]	@ (8009f50 <UpdateSetting+0x170>)
 8009ea2:	f8c2 32b4 	str.w	r3, [r2, #692]	@ 0x2b4
				break;
 8009ea6:	e042      	b.n	8009f2e <UpdateSetting+0x14e>

			/*Modbus Serial---------------------------*/
			case FSA_MB_SERIAL_BAUDRATE:
				if(!(value < DEF_MAX_U16)){
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009eae:	d302      	bcc.n	8009eb6 <UpdateSetting+0xd6>
					value = CONF_DEF_MB_SERIAL_BAUDRATE;
 8009eb0:	f44f 4396 	mov.w	r3, #19200	@ 0x4b00
 8009eb4:	603b      	str	r3, [r7, #0]
				}
				gVar.mbSerial.baudRate = value;
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	4a25      	ldr	r2, [pc, #148]	@ (8009f50 <UpdateSetting+0x170>)
 8009eba:	6053      	str	r3, [r2, #4]
				break;
 8009ebc:	e037      	b.n	8009f2e <UpdateSetting+0x14e>
			case FSA_MB_SERIAL_DATABIT:
				if(!(value == MBS_DB_7 || value == MBS_DB_8)){
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	2b07      	cmp	r3, #7
 8009ec2:	d004      	beq.n	8009ece <UpdateSetting+0xee>
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	2b08      	cmp	r3, #8
 8009ec8:	d001      	beq.n	8009ece <UpdateSetting+0xee>
					value = CONF_DEF_MB_SERIAL_DATABIT;
 8009eca:	2308      	movs	r3, #8
 8009ecc:	603b      	str	r3, [r7, #0]
				}
				gVar.mbSerial.dataBits = value;
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	b2da      	uxtb	r2, r3
 8009ed2:	4b1f      	ldr	r3, [pc, #124]	@ (8009f50 <UpdateSetting+0x170>)
 8009ed4:	721a      	strb	r2, [r3, #8]
				break;
 8009ed6:	e02a      	b.n	8009f2e <UpdateSetting+0x14e>
			case FSA_MB_SERIAL_PARITY:
				if(!(value == MBS_PB_NONE || value == MBS_PB_ODD || value == MBS_PB_EVEN)){
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d007      	beq.n	8009eee <UpdateSetting+0x10e>
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	2b01      	cmp	r3, #1
 8009ee2:	d004      	beq.n	8009eee <UpdateSetting+0x10e>
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	2b02      	cmp	r3, #2
 8009ee8:	d001      	beq.n	8009eee <UpdateSetting+0x10e>
					value = CONF_DEF_MB_SERIAL_PARITY;
 8009eea:	2302      	movs	r3, #2
 8009eec:	603b      	str	r3, [r7, #0]
				}
				gVar.mbSerial.parityBit = value;
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	b2da      	uxtb	r2, r3
 8009ef2:	4b17      	ldr	r3, [pc, #92]	@ (8009f50 <UpdateSetting+0x170>)
 8009ef4:	725a      	strb	r2, [r3, #9]
				break;
 8009ef6:	e01a      	b.n	8009f2e <UpdateSetting+0x14e>
			case FSA_MB_SERIAL_STOPBIT:
				if(!(value == MBS_SB_1 || value == MBS_SB_2)){
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	2b01      	cmp	r3, #1
 8009efc:	d004      	beq.n	8009f08 <UpdateSetting+0x128>
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	2b02      	cmp	r3, #2
 8009f02:	d001      	beq.n	8009f08 <UpdateSetting+0x128>
					value = CONF_DEF_MB_SERIAL_STOPBIT;
 8009f04:	2301      	movs	r3, #1
 8009f06:	603b      	str	r3, [r7, #0]
				}
				gVar.mbSerial.stopBit = value;
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	b2da      	uxtb	r2, r3
 8009f0c:	4b10      	ldr	r3, [pc, #64]	@ (8009f50 <UpdateSetting+0x170>)
 8009f0e:	729a      	strb	r2, [r3, #10]
				break;
 8009f10:	e00d      	b.n	8009f2e <UpdateSetting+0x14e>


				/*Debug---------------------*/
			case FSA_DEBUG_ENABLE:
				if(!(value == 0 || value == 1)){
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d004      	beq.n	8009f22 <UpdateSetting+0x142>
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	2b01      	cmp	r3, #1
 8009f1c:	d001      	beq.n	8009f22 <UpdateSetting+0x142>
					value = CONF_DEF_DEBUG_ENABLE;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	603b      	str	r3, [r7, #0]
				}
				debug.enable = value;
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	b2da      	uxtb	r2, r3
 8009f26:	4b0b      	ldr	r3, [pc, #44]	@ (8009f54 <UpdateSetting+0x174>)
 8009f28:	701a      	strb	r2, [r3, #0]
				break;
 8009f2a:	e000      	b.n	8009f2e <UpdateSetting+0x14e>
			default:
				break;
 8009f2c:	bf00      	nop
	for(uint16_t address = 0; address < FSA_MAX; address++){
 8009f2e:	88fb      	ldrh	r3, [r7, #6]
 8009f30:	3301      	adds	r3, #1
 8009f32:	80fb      	strh	r3, [r7, #6]
 8009f34:	88fb      	ldrh	r3, [r7, #6]
 8009f36:	2b09      	cmp	r3, #9
 8009f38:	f67f af68 	bls.w	8009e0c <UpdateSetting+0x2c>
		}
	}
}
 8009f3c:	bf00      	nop
 8009f3e:	bf00      	nop
 8009f40:	3708      	adds	r7, #8
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}
 8009f46:	bf00      	nop
 8009f48:	080136a4 	.word	0x080136a4
 8009f4c:	080136cc 	.word	0x080136cc
 8009f50:	2000066c 	.word	0x2000066c
 8009f54:	2000097c 	.word	0x2000097c

08009f58 <FactorySettings>:
 *       settings (such as restoring default values) should be handled separately.
 *
 * @attention Ensure that critical data is backed up before calling this function, as the
 *            flash memory will be irreversibly cleared.
 */
void FactorySettings(void){
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	af00      	add	r7, sp, #0
	FLASH_Erase();
 8009f5c:	f7ff fbb8 	bl	80096d0 <FLASH_Erase>
}
 8009f60:	bf00      	nop
 8009f62:	bd80      	pop	{r7, pc}

08009f64 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8009f64:	b480      	push	{r7}
 8009f66:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009f68:	f3bf 8f4f 	dsb	sy
}
 8009f6c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8009f6e:	4b06      	ldr	r3, [pc, #24]	@ (8009f88 <__NVIC_SystemReset+0x24>)
 8009f70:	68db      	ldr	r3, [r3, #12]
 8009f72:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8009f76:	4904      	ldr	r1, [pc, #16]	@ (8009f88 <__NVIC_SystemReset+0x24>)
 8009f78:	4b04      	ldr	r3, [pc, #16]	@ (8009f8c <__NVIC_SystemReset+0x28>)
 8009f7a:	4313      	orrs	r3, r2
 8009f7c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8009f7e:	f3bf 8f4f 	dsb	sy
}
 8009f82:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8009f84:	bf00      	nop
 8009f86:	e7fd      	b.n	8009f84 <__NVIC_SystemReset+0x20>
 8009f88:	e000ed00 	.word	0xe000ed00
 8009f8c:	05fa0004 	.word	0x05fa0004

08009f90 <TH_MB_ChecktSlaveAddressChange>:
 *
 * @param None
 *
 * @return void
 */
void TH_MB_ChecktSlaveAddressChange(void){
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b082      	sub	sp, #8
 8009f94:	af00      	add	r7, sp, #0

	uint32_t tick = 0;
 8009f96:	2300      	movs	r3, #0
 8009f98:	607b      	str	r3, [r7, #4]
	if((HAL_GetTick() - tick)>= DEF_MB_SLAVEADDR_CHECKING_INTERVAL){
 8009f9a:	f003 fa2f 	bl	800d3fc <HAL_GetTick>
 8009f9e:	4602      	mov	r2, r0
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	d053      	beq.n	800a04e <TH_MB_ChecktSlaveAddressChange+0xbe>
				uint8_t SA_3 : 1;
				uint8_t notUsed : 4;
			}bit;
		}slvAddr;

		slvAddr.byte = 0;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	703b      	strb	r3, [r7, #0]

		slvAddr.bit.SA_0 = (uint8_t)HAL_GPIO_ReadPin(SA_0_GPIO_Port, SA_0_Pin);
 8009faa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009fae:	482a      	ldr	r0, [pc, #168]	@ (800a058 <TH_MB_ChecktSlaveAddressChange+0xc8>)
 8009fb0:	f004 f874 	bl	800e09c <HAL_GPIO_ReadPin>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	f003 0301 	and.w	r3, r3, #1
 8009fba:	b2da      	uxtb	r2, r3
 8009fbc:	783b      	ldrb	r3, [r7, #0]
 8009fbe:	f362 0300 	bfi	r3, r2, #0, #1
 8009fc2:	703b      	strb	r3, [r7, #0]
		slvAddr.bit.SA_1 = (uint8_t)HAL_GPIO_ReadPin(SA_1_GPIO_Port, SA_1_Pin);
 8009fc4:	2108      	movs	r1, #8
 8009fc6:	4824      	ldr	r0, [pc, #144]	@ (800a058 <TH_MB_ChecktSlaveAddressChange+0xc8>)
 8009fc8:	f004 f868 	bl	800e09c <HAL_GPIO_ReadPin>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	f003 0301 	and.w	r3, r3, #1
 8009fd2:	b2da      	uxtb	r2, r3
 8009fd4:	783b      	ldrb	r3, [r7, #0]
 8009fd6:	f362 0341 	bfi	r3, r2, #1, #1
 8009fda:	703b      	strb	r3, [r7, #0]
		slvAddr.bit.SA_2 = (uint8_t)HAL_GPIO_ReadPin(SA_2_GPIO_Port, SA_2_Pin);
 8009fdc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009fe0:	481e      	ldr	r0, [pc, #120]	@ (800a05c <TH_MB_ChecktSlaveAddressChange+0xcc>)
 8009fe2:	f004 f85b 	bl	800e09c <HAL_GPIO_ReadPin>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	f003 0301 	and.w	r3, r3, #1
 8009fec:	b2da      	uxtb	r2, r3
 8009fee:	783b      	ldrb	r3, [r7, #0]
 8009ff0:	f362 0382 	bfi	r3, r2, #2, #1
 8009ff4:	703b      	strb	r3, [r7, #0]
		slvAddr.bit.SA_3 = (uint8_t)HAL_GPIO_ReadPin(SA_3_GPIO_Port, SA_3_Pin);
 8009ff6:	2104      	movs	r1, #4
 8009ff8:	4817      	ldr	r0, [pc, #92]	@ (800a058 <TH_MB_ChecktSlaveAddressChange+0xc8>)
 8009ffa:	f004 f84f 	bl	800e09c <HAL_GPIO_ReadPin>
 8009ffe:	4603      	mov	r3, r0
 800a000:	f003 0301 	and.w	r3, r3, #1
 800a004:	b2da      	uxtb	r2, r3
 800a006:	783b      	ldrb	r3, [r7, #0]
 800a008:	f362 03c3 	bfi	r3, r2, #3, #1
 800a00c:	703b      	strb	r3, [r7, #0]


		if((gVar.mbRTUSlave.slave_address != slvAddr.byte) && (slvAddr.byte > 0)){
 800a00e:	4b14      	ldr	r3, [pc, #80]	@ (800a060 <TH_MB_ChecktSlaveAddressChange+0xd0>)
 800a010:	f893 2244 	ldrb.w	r2, [r3, #580]	@ 0x244
 800a014:	783b      	ldrb	r3, [r7, #0]
 800a016:	429a      	cmp	r2, r3
 800a018:	d019      	beq.n	800a04e <TH_MB_ChecktSlaveAddressChange+0xbe>
 800a01a:	783b      	ldrb	r3, [r7, #0]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d016      	beq.n	800a04e <TH_MB_ChecktSlaveAddressChange+0xbe>
			DEBUG_SPRINT_APPEND(debug.str,"Slave Address: [Changed] [%d(Old)->", gVar.mbRTUSlave.slave_address);
 800a020:	4b0f      	ldr	r3, [pc, #60]	@ (800a060 <TH_MB_ChecktSlaveAddressChange+0xd0>)
 800a022:	f893 3244 	ldrb.w	r3, [r3, #580]	@ 0x244
 800a026:	461a      	mov	r2, r3
 800a028:	490e      	ldr	r1, [pc, #56]	@ (800a064 <TH_MB_ChecktSlaveAddressChange+0xd4>)
 800a02a:	480f      	ldr	r0, [pc, #60]	@ (800a068 <TH_MB_ChecktSlaveAddressChange+0xd8>)
 800a02c:	f001 fb28 	bl	800b680 <DEBUG_SPRINT_APPEND>
			gVar.mbRTUSlave.slave_address = slvAddr.byte;
 800a030:	783a      	ldrb	r2, [r7, #0]
 800a032:	4b0b      	ldr	r3, [pc, #44]	@ (800a060 <TH_MB_ChecktSlaveAddressChange+0xd0>)
 800a034:	f883 2244 	strb.w	r2, [r3, #580]	@ 0x244
			DEBUG_SPRINT_APPEND(debug.str,"%d(New)]", gVar.mbRTUSlave.slave_address);
 800a038:	4b09      	ldr	r3, [pc, #36]	@ (800a060 <TH_MB_ChecktSlaveAddressChange+0xd0>)
 800a03a:	f893 3244 	ldrb.w	r3, [r3, #580]	@ 0x244
 800a03e:	461a      	mov	r2, r3
 800a040:	490a      	ldr	r1, [pc, #40]	@ (800a06c <TH_MB_ChecktSlaveAddressChange+0xdc>)
 800a042:	4809      	ldr	r0, [pc, #36]	@ (800a068 <TH_MB_ChecktSlaveAddressChange+0xd8>)
 800a044:	f001 fb1c 	bl	800b680 <DEBUG_SPRINT_APPEND>
			DEBUG_SPRINT_NL(debug.str);
 800a048:	4807      	ldr	r0, [pc, #28]	@ (800a068 <TH_MB_ChecktSlaveAddressChange+0xd8>)
 800a04a:	f001 facd 	bl	800b5e8 <DEBUG_SPRINT_NL>
		}
	}
}
 800a04e:	bf00      	nop
 800a050:	3708      	adds	r7, #8
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}
 800a056:	bf00      	nop
 800a058:	40020400 	.word	0x40020400
 800a05c:	40020000 	.word	0x40020000
 800a060:	2000066c 	.word	0x2000066c
 800a064:	080136ec 	.word	0x080136ec
 800a068:	20000980 	.word	0x20000980
 800a06c:	08013710 	.word	0x08013710

0800a070 <TH_MB_CheckSerialConfigChanges>:
 * This function monitors the `saveSrlCnfFlag` to determine whether there are
 * changes to the serial configuration that need to be saved and applied. If
 * changes are detected, it applies the configuration, updates the system, and
 * stores the new settings in flash memory.
 */
void TH_MB_CheckSerialConfigChanges(void){
 800a070:	b580      	push	{r7, lr}
 800a072:	af00      	add	r7, sp, #0

	/* Check the save command to save and apply
	 * the serial configuration changes
	 * */
	if(!gVar.mbSerial.saveSrlCnfFlag) {return;}
 800a074:	4b12      	ldr	r3, [pc, #72]	@ (800a0c0 <TH_MB_CheckSerialConfigChanges+0x50>)
 800a076:	7adb      	ldrb	r3, [r3, #11]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d01e      	beq.n	800a0ba <TH_MB_CheckSerialConfigChanges+0x4a>
	gVar.mbSerial.saveSrlCnfFlag = 0;
 800a07c:	4b10      	ldr	r3, [pc, #64]	@ (800a0c0 <TH_MB_CheckSerialConfigChanges+0x50>)
 800a07e:	2200      	movs	r2, #0
 800a080:	72da      	strb	r2, [r3, #11]
	/*Apply the changes*/
	MBS_Config(&gVar.mbSerial);
 800a082:	480f      	ldr	r0, [pc, #60]	@ (800a0c0 <TH_MB_CheckSerialConfigChanges+0x50>)
 800a084:	f002 fdbe 	bl	800cc04 <MBS_Config>

	/*Save the changes*/
	FLASH_WriteInt(FSA_MB_SERIAL_BAUDRATE, gVar.mbSerial.baudRate);
 800a088:	4b0d      	ldr	r3, [pc, #52]	@ (800a0c0 <TH_MB_CheckSerialConfigChanges+0x50>)
 800a08a:	685b      	ldr	r3, [r3, #4]
 800a08c:	4619      	mov	r1, r3
 800a08e:	2005      	movs	r0, #5
 800a090:	f7ff fa58 	bl	8009544 <FLASH_WriteInt>
	FLASH_WriteInt(FSA_MB_SERIAL_DATABIT, gVar.mbSerial.dataBits);
 800a094:	4b0a      	ldr	r3, [pc, #40]	@ (800a0c0 <TH_MB_CheckSerialConfigChanges+0x50>)
 800a096:	7a1b      	ldrb	r3, [r3, #8]
 800a098:	4619      	mov	r1, r3
 800a09a:	2006      	movs	r0, #6
 800a09c:	f7ff fa52 	bl	8009544 <FLASH_WriteInt>
	FLASH_WriteInt(FSA_MB_SERIAL_PARITY, gVar.mbSerial.parityBit);
 800a0a0:	4b07      	ldr	r3, [pc, #28]	@ (800a0c0 <TH_MB_CheckSerialConfigChanges+0x50>)
 800a0a2:	7a5b      	ldrb	r3, [r3, #9]
 800a0a4:	4619      	mov	r1, r3
 800a0a6:	2007      	movs	r0, #7
 800a0a8:	f7ff fa4c 	bl	8009544 <FLASH_WriteInt>
	FLASH_WriteInt(FSA_MB_SERIAL_STOPBIT, gVar.mbSerial.stopBit);
 800a0ac:	4b04      	ldr	r3, [pc, #16]	@ (800a0c0 <TH_MB_CheckSerialConfigChanges+0x50>)
 800a0ae:	7a9b      	ldrb	r3, [r3, #10]
 800a0b0:	4619      	mov	r1, r3
 800a0b2:	2008      	movs	r0, #8
 800a0b4:	f7ff fa46 	bl	8009544 <FLASH_WriteInt>
 800a0b8:	e000      	b.n	800a0bc <TH_MB_CheckSerialConfigChanges+0x4c>
	if(!gVar.mbSerial.saveSrlCnfFlag) {return;}
 800a0ba:	bf00      	nop
}
 800a0bc:	bd80      	pop	{r7, pc}
 800a0be:	bf00      	nop
 800a0c0:	2000066c 	.word	0x2000066c

0800a0c4 <TH_DI>:
 *
 * @param None
 *
 * @return void
 */
void TH_DI(void){
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b084      	sub	sp, #16
 800a0c8:	af00      	add	r7, sp, #0
	uint32_t currentTime = 0;
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	60bb      	str	r3, [r7, #8]
	uint8_t inputState = 0;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	71fb      	strb	r3, [r7, #7]

	for(uint8_t i = DI_ID_0; i < DI_ID_MAX; i++){
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	73fb      	strb	r3, [r7, #15]
 800a0d6:	e048      	b.n	800a16a <TH_DI+0xa6>
		currentTime = (uint32_t)TS_GetUS(&timStamp);;
 800a0d8:	4828      	ldr	r0, [pc, #160]	@ (800a17c <TH_DI+0xb8>)
 800a0da:	f000 f99d 	bl	800a418 <TS_GetUS>
 800a0de:	4602      	mov	r2, r0
 800a0e0:	460b      	mov	r3, r1
 800a0e2:	4613      	mov	r3, r2
 800a0e4:	60bb      	str	r3, [r7, #8]
		inputState = HAL_GPIO_ReadPin(gVar.di[i].port, gVar.di[i].pin);
 800a0e6:	7bfa      	ldrb	r2, [r7, #15]
 800a0e8:	4925      	ldr	r1, [pc, #148]	@ (800a180 <TH_DI+0xbc>)
 800a0ea:	4613      	mov	r3, r2
 800a0ec:	00db      	lsls	r3, r3, #3
 800a0ee:	1a9b      	subs	r3, r3, r2
 800a0f0:	009b      	lsls	r3, r3, #2
 800a0f2:	440b      	add	r3, r1
 800a0f4:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800a0f8:	6818      	ldr	r0, [r3, #0]
 800a0fa:	7bfa      	ldrb	r2, [r7, #15]
 800a0fc:	4920      	ldr	r1, [pc, #128]	@ (800a180 <TH_DI+0xbc>)
 800a0fe:	4613      	mov	r3, r2
 800a100:	00db      	lsls	r3, r3, #3
 800a102:	1a9b      	subs	r3, r3, r2
 800a104:	009b      	lsls	r3, r3, #2
 800a106:	440b      	add	r3, r1
 800a108:	f503 731b 	add.w	r3, r3, #620	@ 0x26c
 800a10c:	881b      	ldrh	r3, [r3, #0]
 800a10e:	4619      	mov	r1, r3
 800a110:	f003 ffc4 	bl	800e09c <HAL_GPIO_ReadPin>
 800a114:	4603      	mov	r3, r0
 800a116:	71fb      	strb	r3, [r7, #7]
		uint8_t status = Debounce(&gVar.di[i].debounce, currentTime, inputState);
 800a118:	7bfa      	ldrb	r2, [r7, #15]
 800a11a:	4613      	mov	r3, r2
 800a11c:	00db      	lsls	r3, r3, #3
 800a11e:	1a9b      	subs	r3, r3, r2
 800a120:	009b      	lsls	r3, r3, #2
 800a122:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a126:	4a16      	ldr	r2, [pc, #88]	@ (800a180 <TH_DI+0xbc>)
 800a128:	4413      	add	r3, r2
 800a12a:	3308      	adds	r3, #8
 800a12c:	79fa      	ldrb	r2, [r7, #7]
 800a12e:	68b9      	ldr	r1, [r7, #8]
 800a130:	4618      	mov	r0, r3
 800a132:	f001 f978 	bl	800b426 <Debounce>
 800a136:	4603      	mov	r3, r0
 800a138:	71bb      	strb	r3, [r7, #6]
		gVar.di[i].state = gVar.di[i].debounce.state;
 800a13a:	7bf9      	ldrb	r1, [r7, #15]
 800a13c:	7bfa      	ldrb	r2, [r7, #15]
 800a13e:	4810      	ldr	r0, [pc, #64]	@ (800a180 <TH_DI+0xbc>)
 800a140:	460b      	mov	r3, r1
 800a142:	00db      	lsls	r3, r3, #3
 800a144:	1a5b      	subs	r3, r3, r1
 800a146:	009b      	lsls	r3, r3, #2
 800a148:	4403      	add	r3, r0
 800a14a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800a14e:	7818      	ldrb	r0, [r3, #0]
 800a150:	490b      	ldr	r1, [pc, #44]	@ (800a180 <TH_DI+0xbc>)
 800a152:	4613      	mov	r3, r2
 800a154:	00db      	lsls	r3, r3, #3
 800a156:	1a9b      	subs	r3, r3, r2
 800a158:	009b      	lsls	r3, r3, #2
 800a15a:	440b      	add	r3, r1
 800a15c:	f203 236e 	addw	r3, r3, #622	@ 0x26e
 800a160:	4602      	mov	r2, r0
 800a162:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = DI_ID_0; i < DI_ID_MAX; i++){
 800a164:	7bfb      	ldrb	r3, [r7, #15]
 800a166:	3301      	adds	r3, #1
 800a168:	73fb      	strb	r3, [r7, #15]
 800a16a:	7bfb      	ldrb	r3, [r7, #15]
 800a16c:	2b03      	cmp	r3, #3
 800a16e:	d9b3      	bls.n	800a0d8 <TH_DI+0x14>
		if(status){
//			DEBUG_SPRINT_NL("DI_%d: {State: %d}",i, gVar.di[i].state);
		}
	}
}
 800a170:	bf00      	nop
 800a172:	bf00      	nop
 800a174:	3710      	adds	r7, #16
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}
 800a17a:	bf00      	nop
 800a17c:	20000c08 	.word	0x20000c08
 800a180:	2000066c 	.word	0x2000066c

0800a184 <TH_DO>:
 *
 * @param None
 *
 * @return void
 */
void TH_DO(void){
 800a184:	b590      	push	{r4, r7, lr}
 800a186:	b083      	sub	sp, #12
 800a188:	af00      	add	r7, sp, #0
	for(uint8_t i = DO_ID_0; i < DO_ID_MAX; i++){
 800a18a:	2300      	movs	r3, #0
 800a18c:	71fb      	strb	r3, [r7, #7]
 800a18e:	e060      	b.n	800a252 <TH_DO+0xce>
		gVar.do_[i].state = HAL_GPIO_ReadPin(gVar.do_[i].port, gVar.do_[i].pin);
 800a190:	79fa      	ldrb	r2, [r7, #7]
 800a192:	4934      	ldr	r1, [pc, #208]	@ (800a264 <TH_DO+0xe0>)
 800a194:	4613      	mov	r3, r2
 800a196:	005b      	lsls	r3, r3, #1
 800a198:	4413      	add	r3, r2
 800a19a:	009b      	lsls	r3, r3, #2
 800a19c:	440b      	add	r3, r1
 800a19e:	f503 7332 	add.w	r3, r3, #712	@ 0x2c8
 800a1a2:	6818      	ldr	r0, [r3, #0]
 800a1a4:	79fa      	ldrb	r2, [r7, #7]
 800a1a6:	492f      	ldr	r1, [pc, #188]	@ (800a264 <TH_DO+0xe0>)
 800a1a8:	4613      	mov	r3, r2
 800a1aa:	005b      	lsls	r3, r3, #1
 800a1ac:	4413      	add	r3, r2
 800a1ae:	009b      	lsls	r3, r3, #2
 800a1b0:	440b      	add	r3, r1
 800a1b2:	f503 7333 	add.w	r3, r3, #716	@ 0x2cc
 800a1b6:	881b      	ldrh	r3, [r3, #0]
 800a1b8:	79fc      	ldrb	r4, [r7, #7]
 800a1ba:	4619      	mov	r1, r3
 800a1bc:	f003 ff6e 	bl	800e09c <HAL_GPIO_ReadPin>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	4619      	mov	r1, r3
 800a1c4:	4a27      	ldr	r2, [pc, #156]	@ (800a264 <TH_DO+0xe0>)
 800a1c6:	4623      	mov	r3, r4
 800a1c8:	005b      	lsls	r3, r3, #1
 800a1ca:	4423      	add	r3, r4
 800a1cc:	009b      	lsls	r3, r3, #2
 800a1ce:	4413      	add	r3, r2
 800a1d0:	f203 23ce 	addw	r3, r3, #718	@ 0x2ce
 800a1d4:	460a      	mov	r2, r1
 800a1d6:	701a      	strb	r2, [r3, #0]
		if(gVar.do_[i].state != gVar.do_[i].lastState){
 800a1d8:	79fa      	ldrb	r2, [r7, #7]
 800a1da:	4922      	ldr	r1, [pc, #136]	@ (800a264 <TH_DO+0xe0>)
 800a1dc:	4613      	mov	r3, r2
 800a1de:	005b      	lsls	r3, r3, #1
 800a1e0:	4413      	add	r3, r2
 800a1e2:	009b      	lsls	r3, r3, #2
 800a1e4:	440b      	add	r3, r1
 800a1e6:	f203 23ce 	addw	r3, r3, #718	@ 0x2ce
 800a1ea:	7819      	ldrb	r1, [r3, #0]
 800a1ec:	79fa      	ldrb	r2, [r7, #7]
 800a1ee:	481d      	ldr	r0, [pc, #116]	@ (800a264 <TH_DO+0xe0>)
 800a1f0:	4613      	mov	r3, r2
 800a1f2:	005b      	lsls	r3, r3, #1
 800a1f4:	4413      	add	r3, r2
 800a1f6:	009b      	lsls	r3, r3, #2
 800a1f8:	4403      	add	r3, r0
 800a1fa:	f203 23cf 	addw	r3, r3, #719	@ 0x2cf
 800a1fe:	781b      	ldrb	r3, [r3, #0]
 800a200:	4299      	cmp	r1, r3
 800a202:	d023      	beq.n	800a24c <TH_DO+0xc8>
			gVar.do_[i].lastState = gVar.do_[i].state;
 800a204:	79f9      	ldrb	r1, [r7, #7]
 800a206:	79fa      	ldrb	r2, [r7, #7]
 800a208:	4816      	ldr	r0, [pc, #88]	@ (800a264 <TH_DO+0xe0>)
 800a20a:	460b      	mov	r3, r1
 800a20c:	005b      	lsls	r3, r3, #1
 800a20e:	440b      	add	r3, r1
 800a210:	009b      	lsls	r3, r3, #2
 800a212:	4403      	add	r3, r0
 800a214:	f203 23ce 	addw	r3, r3, #718	@ 0x2ce
 800a218:	7818      	ldrb	r0, [r3, #0]
 800a21a:	4912      	ldr	r1, [pc, #72]	@ (800a264 <TH_DO+0xe0>)
 800a21c:	4613      	mov	r3, r2
 800a21e:	005b      	lsls	r3, r3, #1
 800a220:	4413      	add	r3, r2
 800a222:	009b      	lsls	r3, r3, #2
 800a224:	440b      	add	r3, r1
 800a226:	f203 23cf 	addw	r3, r3, #719	@ 0x2cf
 800a22a:	4602      	mov	r2, r0
 800a22c:	701a      	strb	r2, [r3, #0]
			DEBUG_SPRINT_NL("DO_%d: {State: %d}",i, gVar.do_[i].state);
 800a22e:	79f9      	ldrb	r1, [r7, #7]
 800a230:	79fa      	ldrb	r2, [r7, #7]
 800a232:	480c      	ldr	r0, [pc, #48]	@ (800a264 <TH_DO+0xe0>)
 800a234:	4613      	mov	r3, r2
 800a236:	005b      	lsls	r3, r3, #1
 800a238:	4413      	add	r3, r2
 800a23a:	009b      	lsls	r3, r3, #2
 800a23c:	4403      	add	r3, r0
 800a23e:	f203 23ce 	addw	r3, r3, #718	@ 0x2ce
 800a242:	781b      	ldrb	r3, [r3, #0]
 800a244:	461a      	mov	r2, r3
 800a246:	4808      	ldr	r0, [pc, #32]	@ (800a268 <TH_DO+0xe4>)
 800a248:	f001 f9ce 	bl	800b5e8 <DEBUG_SPRINT_NL>
	for(uint8_t i = DO_ID_0; i < DO_ID_MAX; i++){
 800a24c:	79fb      	ldrb	r3, [r7, #7]
 800a24e:	3301      	adds	r3, #1
 800a250:	71fb      	strb	r3, [r7, #7]
 800a252:	79fb      	ldrb	r3, [r7, #7]
 800a254:	2b03      	cmp	r3, #3
 800a256:	d99b      	bls.n	800a190 <TH_DO+0xc>
		}
	}
}
 800a258:	bf00      	nop
 800a25a:	bf00      	nop
 800a25c:	370c      	adds	r7, #12
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd90      	pop	{r4, r7, pc}
 800a262:	bf00      	nop
 800a264:	2000066c 	.word	0x2000066c
 800a268:	0801371c 	.word	0x0801371c

0800a26c <TH_PushButton>:
 * @note Ensure that this function is not called unintentionally, as the factory reset will
 *       erase all stored data.
 *
 * @attention This function causes an MCU reset, and all unsaved data will be lost.
 */
void TH_PushButton(void){
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b082      	sub	sp, #8
 800a270:	af00      	add	r7, sp, #0
	static uint32_t tick = 0U;

	uint32_t currentTime = (uint32_t)TS_GetUS(&timStamp);;
 800a272:	4821      	ldr	r0, [pc, #132]	@ (800a2f8 <TH_PushButton+0x8c>)
 800a274:	f000 f8d0 	bl	800a418 <TS_GetUS>
 800a278:	4602      	mov	r2, r0
 800a27a:	460b      	mov	r3, r1
 800a27c:	4613      	mov	r3, r2
 800a27e:	607b      	str	r3, [r7, #4]
	uint8_t inputState = HAL_GPIO_ReadPin(SW_0_GPIO_Port, SW_0_Pin);
 800a280:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800a284:	481d      	ldr	r0, [pc, #116]	@ (800a2fc <TH_PushButton+0x90>)
 800a286:	f003 ff09 	bl	800e09c <HAL_GPIO_ReadPin>
 800a28a:	4603      	mov	r3, r0
 800a28c:	70fb      	strb	r3, [r7, #3]
	Debounce(&gVar.pushButton.debounce, currentTime, inputState);
 800a28e:	78fb      	ldrb	r3, [r7, #3]
 800a290:	461a      	mov	r2, r3
 800a292:	6879      	ldr	r1, [r7, #4]
 800a294:	481a      	ldr	r0, [pc, #104]	@ (800a300 <TH_PushButton+0x94>)
 800a296:	f001 f8c6 	bl	800b426 <Debounce>
	gVar.pushButton.state = gVar.pushButton.debounce.state;
 800a29a:	4b1a      	ldr	r3, [pc, #104]	@ (800a304 <TH_PushButton+0x98>)
 800a29c:	f893 2300 	ldrb.w	r2, [r3, #768]	@ 0x300
 800a2a0:	4b18      	ldr	r3, [pc, #96]	@ (800a304 <TH_PushButton+0x98>)
 800a2a2:	f883 230a 	strb.w	r2, [r3, #778]	@ 0x30a
	if(gVar.pushButton.state){
 800a2a6:	4b17      	ldr	r3, [pc, #92]	@ (800a304 <TH_PushButton+0x98>)
 800a2a8:	f893 330a 	ldrb.w	r3, [r3, #778]	@ 0x30a
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d019      	beq.n	800a2e4 <TH_PushButton+0x78>
		/*Factory reset*/
		if((HAL_GetTick() - tick) >= DEF_RSTBTN_FACT_RST_DELAY){
 800a2b0:	f003 f8a4 	bl	800d3fc <HAL_GetTick>
 800a2b4:	4602      	mov	r2, r0
 800a2b6:	4b14      	ldr	r3, [pc, #80]	@ (800a308 <TH_PushButton+0x9c>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	1ad3      	subs	r3, r2, r3
 800a2bc:	f242 720f 	movw	r2, #9999	@ 0x270f
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	d914      	bls.n	800a2ee <TH_PushButton+0x82>
			DEBUG_SPRINT_NL("Factory Reset: Started");
 800a2c4:	4811      	ldr	r0, [pc, #68]	@ (800a30c <TH_PushButton+0xa0>)
 800a2c6:	f001 f98f 	bl	800b5e8 <DEBUG_SPRINT_NL>
			FactorySettings();
 800a2ca:	f7ff fe45 	bl	8009f58 <FactorySettings>
			DEBUG_SPRINT_NL("Factory Reset: Done!");
 800a2ce:	4810      	ldr	r0, [pc, #64]	@ (800a310 <TH_PushButton+0xa4>)
 800a2d0:	f001 f98a 	bl	800b5e8 <DEBUG_SPRINT_NL>
			HAL_Delay(1);
 800a2d4:	2001      	movs	r0, #1
 800a2d6:	f003 f89d 	bl	800d414 <HAL_Delay>
			DEBUG_SPRINT_NL("Device Restarting...");
 800a2da:	480e      	ldr	r0, [pc, #56]	@ (800a314 <TH_PushButton+0xa8>)
 800a2dc:	f001 f984 	bl	800b5e8 <DEBUG_SPRINT_NL>
			NVIC_SystemReset();		// to reset the mcu
 800a2e0:	f7ff fe40 	bl	8009f64 <__NVIC_SystemReset>
		}
	}else{
		tick = HAL_GetTick();
 800a2e4:	f003 f88a 	bl	800d3fc <HAL_GetTick>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	4a07      	ldr	r2, [pc, #28]	@ (800a308 <TH_PushButton+0x9c>)
 800a2ec:	6013      	str	r3, [r2, #0]
	}
}
 800a2ee:	bf00      	nop
 800a2f0:	3708      	adds	r7, #8
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}
 800a2f6:	bf00      	nop
 800a2f8:	20000c08 	.word	0x20000c08
 800a2fc:	40020800 	.word	0x40020800
 800a300:	20000960 	.word	0x20000960
 800a304:	2000066c 	.word	0x2000066c
 800a308:	20000448 	.word	0x20000448
 800a30c:	08013730 	.word	0x08013730
 800a310:	08013748 	.word	0x08013748
 800a314:	08013760 	.word	0x08013760

0800a318 <TS_Init>:
TIM_HandleTypeDef *htim;
static uint32_t mcuSysClk;
static double mcuSysClkFacktor;
static uint64_t lastCount;		// total count from the last power up

void TS_Init(TimeStamp *ts, TIM_HandleTypeDef *_htim){
 800a318:	b580      	push	{r7, lr}
 800a31a:	ed2d 8b02 	vpush	{d8}
 800a31e:	b082      	sub	sp, #8
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
 800a324:	6039      	str	r1, [r7, #0]
	htim = _htim;
 800a326:	4a25      	ldr	r2, [pc, #148]	@ (800a3bc <TS_Init+0xa4>)
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	6013      	str	r3, [r2, #0]
	mcuSysClk = HAL_RCC_GetSysClockFreq();
 800a32c:	f004 f86e 	bl	800e40c <HAL_RCC_GetSysClockFreq>
 800a330:	4603      	mov	r3, r0
 800a332:	4a23      	ldr	r2, [pc, #140]	@ (800a3c0 <TS_Init+0xa8>)
 800a334:	6013      	str	r3, [r2, #0]
	mcuSysClkFacktor = (double)(((htim->Init.Prescaler+1.0f)*1000000.0f)/HAL_RCC_GetSysClockFreq());
 800a336:	4b21      	ldr	r3, [pc, #132]	@ (800a3bc <TS_Init+0xa4>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	685b      	ldr	r3, [r3, #4]
 800a33c:	ee07 3a90 	vmov	s15, r3
 800a340:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a344:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a348:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a34c:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800a3c4 <TS_Init+0xac>
 800a350:	ee27 8a87 	vmul.f32	s16, s15, s14
 800a354:	f004 f85a 	bl	800e40c <HAL_RCC_GetSysClockFreq>
 800a358:	ee07 0a90 	vmov	s15, r0
 800a35c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a360:	ee88 7a27 	vdiv.f32	s14, s16, s15
 800a364:	ee17 0a10 	vmov	r0, s14
 800a368:	f7fe f826 	bl	80083b8 <__aeabi_f2d>
 800a36c:	4602      	mov	r2, r0
 800a36e:	460b      	mov	r3, r1
 800a370:	4915      	ldr	r1, [pc, #84]	@ (800a3c8 <TS_Init+0xb0>)
 800a372:	e9c1 2300 	strd	r2, r3, [r1]
	lastCount = 0;
 800a376:	4915      	ldr	r1, [pc, #84]	@ (800a3cc <TS_Init+0xb4>)
 800a378:	f04f 0200 	mov.w	r2, #0
 800a37c:	f04f 0300 	mov.w	r3, #0
 800a380:	e9c1 2300 	strd	r2, r3, [r1]

	ts->currentTime 	= 0;
 800a384:	6879      	ldr	r1, [r7, #4]
 800a386:	f04f 0200 	mov.w	r2, #0
 800a38a:	f04f 0300 	mov.w	r3, #0
 800a38e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	ts->ovfCount 		= 0;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2200      	movs	r2, #0
 800a396:	611a      	str	r2, [r3, #16]
	ts->timerType 		= TS_TIM_TYP_SYSTICK;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2200      	movs	r2, #0
 800a39c:	701a      	strb	r2, [r3, #0]
	ts->sec 			= 0;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	615a      	str	r2, [r3, #20]
	ts->us 			= 0;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	61da      	str	r2, [r3, #28]
	ts->ms 			= 0;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	619a      	str	r2, [r3, #24]
}
 800a3b0:	bf00      	nop
 800a3b2:	3708      	adds	r7, #8
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	ecbd 8b02 	vpop	{d8}
 800a3ba:	bd80      	pop	{r7, pc}
 800a3bc:	2000044c 	.word	0x2000044c
 800a3c0:	20000450 	.word	0x20000450
 800a3c4:	49742400 	.word	0x49742400
 800a3c8:	20000458 	.word	0x20000458
 800a3cc:	20000460 	.word	0x20000460

0800a3d0 <TS_StartTimer>:
/* This function start the timer
 * */
void TS_StartTimer(TimeStamp *ts){
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b082      	sub	sp, #8
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
	if(ts->timerType == TS_TIM_TYP_TIMER){
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	781b      	ldrb	r3, [r3, #0]
 800a3dc:	2b01      	cmp	r3, #1
 800a3de:	d104      	bne.n	800a3ea <TS_StartTimer+0x1a>
		HAL_TIM_Base_Start_IT(htim);
 800a3e0:	4b04      	ldr	r3, [pc, #16]	@ (800a3f4 <TS_StartTimer+0x24>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f004 fd2f 	bl	800ee48 <HAL_TIM_Base_Start_IT>
	}
}
 800a3ea:	bf00      	nop
 800a3ec:	3708      	adds	r7, #8
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}
 800a3f2:	bf00      	nop
 800a3f4:	2000044c 	.word	0x2000044c

0800a3f8 <TS_SetTimerType>:
	if(ts->timerType == TS_TIM_TYP_TIMER){
		HAL_TIM_Base_Stop_IT(htim);
	}
}

void TS_SetTimerType(TimeStamp *ts, TS_TimerType type){
 800a3f8:	b480      	push	{r7}
 800a3fa:	b083      	sub	sp, #12
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
 800a400:	460b      	mov	r3, r1
 800a402:	70fb      	strb	r3, [r7, #3]
	ts->timerType = type;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	78fa      	ldrb	r2, [r7, #3]
 800a408:	701a      	strb	r2, [r3, #0]
}
 800a40a:	bf00      	nop
 800a40c:	370c      	adds	r7, #12
 800a40e:	46bd      	mov	sp, r7
 800a410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a414:	4770      	bx	lr
	...

0800a418 <TS_GetUS>:
	ts->currentTime = ((uint64_t)htim->Instance->CNT + lastCount)*mcuSysClkFacktor;
}

/* This function returns total microsecond
 * */
uint64_t TS_GetUS(TimeStamp *ts){
 800a418:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a41c:	b082      	sub	sp, #8
 800a41e:	af00      	add	r7, sp, #0
 800a420:	6078      	str	r0, [r7, #4]
//		ts->currentTime = (uint64_t)htim->Instance->CNT + (uint64_t)((uint64_t)htim->Init.Period * (uint64_t)ts->ovfCount);
//		ts->currentTime = ts->currentTime*(((htim->Init.Prescaler+1)*1000000U)/mcuSysClk);
//	}
//	return ts->currentTime;

	ts->currentTime = (uint64_t)(( ts->timerType == TS_TIM_TYP_SYSTICK) ? ((HAL_GetTick()*1000)) : (htim->Instance->CNT + lastCount)*mcuSysClkFacktor);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	781b      	ldrb	r3, [r3, #0]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d112      	bne.n	800a450 <TS_GetUS+0x38>
 800a42a:	f002 ffe7 	bl	800d3fc <HAL_GetTick>
 800a42e:	4603      	mov	r3, r0
 800a430:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a434:	fb02 f303 	mul.w	r3, r2, r3
 800a438:	4618      	mov	r0, r3
 800a43a:	f7fd ff9b 	bl	8008374 <__aeabi_ui2d>
 800a43e:	4602      	mov	r2, r0
 800a440:	460b      	mov	r3, r1
 800a442:	4610      	mov	r0, r2
 800a444:	4619      	mov	r1, r3
 800a446:	f7fe fb1f 	bl	8008a88 <__aeabi_d2ulz>
 800a44a:	4602      	mov	r2, r0
 800a44c:	460b      	mov	r3, r1
 800a44e:	e01e      	b.n	800a48e <TS_GetUS+0x76>
 800a450:	4b15      	ldr	r3, [pc, #84]	@ (800a4a8 <TS_GetUS+0x90>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a458:	2200      	movs	r2, #0
 800a45a:	461c      	mov	r4, r3
 800a45c:	4615      	mov	r5, r2
 800a45e:	4b13      	ldr	r3, [pc, #76]	@ (800a4ac <TS_GetUS+0x94>)
 800a460:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a464:	eb14 0802 	adds.w	r8, r4, r2
 800a468:	eb45 0903 	adc.w	r9, r5, r3
 800a46c:	4640      	mov	r0, r8
 800a46e:	4649      	mov	r1, r9
 800a470:	f7fd ffc4 	bl	80083fc <__aeabi_ul2d>
 800a474:	4b0e      	ldr	r3, [pc, #56]	@ (800a4b0 <TS_GetUS+0x98>)
 800a476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a47a:	f7fd fff5 	bl	8008468 <__aeabi_dmul>
 800a47e:	4602      	mov	r2, r0
 800a480:	460b      	mov	r3, r1
 800a482:	4610      	mov	r0, r2
 800a484:	4619      	mov	r1, r3
 800a486:	f7fe faff 	bl	8008a88 <__aeabi_d2ulz>
 800a48a:	4602      	mov	r2, r0
 800a48c:	460b      	mov	r3, r1
 800a48e:	6879      	ldr	r1, [r7, #4]
 800a490:	e9c1 2302 	strd	r2, r3, [r1, #8]
	return ts->currentTime;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	e9d3 2302 	ldrd	r2, r3, [r3, #8]

}
 800a49a:	4610      	mov	r0, r2
 800a49c:	4619      	mov	r1, r3
 800a49e:	3708      	adds	r7, #8
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a4a6:	bf00      	nop
 800a4a8:	2000044c 	.word	0x2000044c
 800a4ac:	20000460 	.word	0x20000460
 800a4b0:	20000458 	.word	0x20000458

0800a4b4 <TS_GetTime>:
uint64_t TS_GetMS(TimeStamp *ts){
	return (TS_GetUS(ts)/1000);

}

void TS_GetTime(TimeStamp *ts){
 800a4b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a4b8:	b08a      	sub	sp, #40	@ 0x28
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	6278      	str	r0, [r7, #36]	@ 0x24
	TS_GetUS(ts);
 800a4be:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a4c0:	f7ff ffaa 	bl	800a418 <TS_GetUS>
	ts->sec = ts->currentTime/1000000;
 800a4c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4c6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800a4ca:	4a3a      	ldr	r2, [pc, #232]	@ (800a5b4 <TS_GetTime+0x100>)
 800a4cc:	f04f 0300 	mov.w	r3, #0
 800a4d0:	f7fe fac2 	bl	8008a58 <__aeabi_uldivmod>
 800a4d4:	4602      	mov	r2, r0
 800a4d6:	460b      	mov	r3, r1
 800a4d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4da:	615a      	str	r2, [r3, #20]
	ts->ms = (ts->currentTime - ((uint64_t)ts->sec*1000000))/1000;
 800a4dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4de:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800a4e2:	e9c7 0100 	strd	r0, r1, [r7]
 800a4e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4e8:	695b      	ldr	r3, [r3, #20]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	469a      	mov	sl, r3
 800a4ee:	4693      	mov	fp, r2
 800a4f0:	4652      	mov	r2, sl
 800a4f2:	465b      	mov	r3, fp
 800a4f4:	f04f 0000 	mov.w	r0, #0
 800a4f8:	f04f 0100 	mov.w	r1, #0
 800a4fc:	0159      	lsls	r1, r3, #5
 800a4fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a502:	0150      	lsls	r0, r2, #5
 800a504:	4602      	mov	r2, r0
 800a506:	460b      	mov	r3, r1
 800a508:	ebb2 040a 	subs.w	r4, r2, sl
 800a50c:	eb63 050b 	sbc.w	r5, r3, fp
 800a510:	f04f 0200 	mov.w	r2, #0
 800a514:	f04f 0300 	mov.w	r3, #0
 800a518:	026b      	lsls	r3, r5, #9
 800a51a:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 800a51e:	0262      	lsls	r2, r4, #9
 800a520:	4614      	mov	r4, r2
 800a522:	461d      	mov	r5, r3
 800a524:	eb14 080a 	adds.w	r8, r4, sl
 800a528:	eb45 090b 	adc.w	r9, r5, fp
 800a52c:	f04f 0200 	mov.w	r2, #0
 800a530:	f04f 0300 	mov.w	r3, #0
 800a534:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800a538:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800a53c:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800a540:	ebb2 0108 	subs.w	r1, r2, r8
 800a544:	60b9      	str	r1, [r7, #8]
 800a546:	eb63 0309 	sbc.w	r3, r3, r9
 800a54a:	60fb      	str	r3, [r7, #12]
 800a54c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a550:	460b      	mov	r3, r1
 800a552:	eb13 030a 	adds.w	r3, r3, sl
 800a556:	61bb      	str	r3, [r7, #24]
 800a558:	4613      	mov	r3, r2
 800a55a:	eb43 030b 	adc.w	r3, r3, fp
 800a55e:	61fb      	str	r3, [r7, #28]
 800a560:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a564:	4603      	mov	r3, r0
 800a566:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800a56a:	4622      	mov	r2, r4
 800a56c:	1a9b      	subs	r3, r3, r2
 800a56e:	613b      	str	r3, [r7, #16]
 800a570:	460b      	mov	r3, r1
 800a572:	462a      	mov	r2, r5
 800a574:	eb63 0302 	sbc.w	r3, r3, r2
 800a578:	617b      	str	r3, [r7, #20]
 800a57a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a57e:	f04f 0300 	mov.w	r3, #0
 800a582:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a586:	f7fe fa67 	bl	8008a58 <__aeabi_uldivmod>
 800a58a:	4602      	mov	r2, r0
 800a58c:	460b      	mov	r3, r1
 800a58e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a590:	619a      	str	r2, [r3, #24]
	ts->us = (ts->currentTime)%1000;
 800a592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a594:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800a598:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a59c:	f04f 0300 	mov.w	r3, #0
 800a5a0:	f7fe fa5a 	bl	8008a58 <__aeabi_uldivmod>
 800a5a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5a6:	61da      	str	r2, [r3, #28]

}
 800a5a8:	bf00      	nop
 800a5aa:	3728      	adds	r7, #40	@ 0x28
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a5b2:	bf00      	nop
 800a5b4:	000f4240 	.word	0x000f4240

0800a5b8 <TS_CatchOVF>:



void TS_CatchOVF(TimeStamp *ts){
 800a5b8:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 800a5bc:	b083      	sub	sp, #12
 800a5be:	af00      	add	r7, sp, #0
 800a5c0:	6078      	str	r0, [r7, #4]

	ts->ovfCount++;
 800a5c2:	6879      	ldr	r1, [r7, #4]
 800a5c4:	6909      	ldr	r1, [r1, #16]
 800a5c6:	1c48      	adds	r0, r1, #1
 800a5c8:	6879      	ldr	r1, [r7, #4]
 800a5ca:	6108      	str	r0, [r1, #16]
	lastCount =  (uint64_t)((uint64_t)htim->Init.Period * (uint64_t)ts->ovfCount);
 800a5cc:	490e      	ldr	r1, [pc, #56]	@ (800a608 <TS_CatchOVF+0x50>)
 800a5ce:	6809      	ldr	r1, [r1, #0]
 800a5d0:	68c9      	ldr	r1, [r1, #12]
 800a5d2:	2000      	movs	r0, #0
 800a5d4:	4688      	mov	r8, r1
 800a5d6:	4681      	mov	r9, r0
 800a5d8:	6879      	ldr	r1, [r7, #4]
 800a5da:	6909      	ldr	r1, [r1, #16]
 800a5dc:	2000      	movs	r0, #0
 800a5de:	460c      	mov	r4, r1
 800a5e0:	4605      	mov	r5, r0
 800a5e2:	fb04 f009 	mul.w	r0, r4, r9
 800a5e6:	fb08 f105 	mul.w	r1, r8, r5
 800a5ea:	4401      	add	r1, r0
 800a5ec:	fba8 2304 	umull	r2, r3, r8, r4
 800a5f0:	4419      	add	r1, r3
 800a5f2:	460b      	mov	r3, r1
 800a5f4:	4905      	ldr	r1, [pc, #20]	@ (800a60c <TS_CatchOVF+0x54>)
 800a5f6:	e9c1 2300 	strd	r2, r3, [r1]

}
 800a5fa:	bf00      	nop
 800a5fc:	370c      	adds	r7, #12
 800a5fe:	46bd      	mov	sp, r7
 800a600:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 800a604:	4770      	bx	lr
 800a606:	bf00      	nop
 800a608:	2000044c 	.word	0x2000044c
 800a60c:	20000460 	.word	0x20000460

0800a610 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b082      	sub	sp, #8
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800a618:	1d39      	adds	r1, r7, #4
 800a61a:	f04f 33ff 	mov.w	r3, #4294967295
 800a61e:	2201      	movs	r2, #1
 800a620:	4803      	ldr	r0, [pc, #12]	@ (800a630 <__io_putchar+0x20>)
 800a622:	f005 f891 	bl	800f748 <HAL_UART_Transmit>
  return ch;
 800a626:	687b      	ldr	r3, [r7, #4]
}
 800a628:	4618      	mov	r0, r3
 800a62a:	3708      	adds	r7, #8
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}
 800a630:	200005dc 	.word	0x200005dc

0800a634 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a638:	f002 fe7a 	bl	800d330 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a63c:	f000 f82e 	bl	800a69c <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a640:	f000 fa66 	bl	800ab10 <MX_GPIO_Init>
  MX_TIM3_Init();
 800a644:	f000 f8b4 	bl	800a7b0 <MX_TIM3_Init>
  MX_TIM4_Init();
 800a648:	f000 f900 	bl	800a84c <MX_TIM4_Init>
  MX_TIM5_Init();
 800a64c:	f000 f94c 	bl	800a8e8 <MX_TIM5_Init>
  MX_TIM9_Init();
 800a650:	f000 f9ce 	bl	800a9f0 <MX_TIM9_Init>
  MX_USART2_UART_Init();
 800a654:	f000 fa06 	bl	800aa64 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 800a658:	f000 fa2e 	bl	800aab8 <MX_USART6_UART_Init>
  MX_TIM6_Init();
 800a65c:	f000 f992 	bl	800a984 <MX_TIM6_Init>
  MX_IWDG_Init();
 800a660:	f000 f88c 	bl	800a77c <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */


  /*Init Scheduler--------------*/
  SchedulerInit();
 800a664:	f7ff f878 	bl	8009758 <SchedulerInit>

  while (1)
  {
	  /*General purpose loop--------------*/
	  static uint32_t tick = 0u;
	  while((HAL_GetTick() - tick) >= 1000){
 800a668:	e007      	b.n	800a67a <main+0x46>
		  tick = HAL_GetTick();
 800a66a:	f002 fec7 	bl	800d3fc <HAL_GetTick>
 800a66e:	4603      	mov	r3, r0
 800a670:	4a08      	ldr	r2, [pc, #32]	@ (800a694 <main+0x60>)
 800a672:	6013      	str	r3, [r2, #0]
		  HAL_IWDG_Refresh(&hiwdg);
 800a674:	4808      	ldr	r0, [pc, #32]	@ (800a698 <main+0x64>)
 800a676:	f003 fd9e 	bl	800e1b6 <HAL_IWDG_Refresh>
	  while((HAL_GetTick() - tick) >= 1000){
 800a67a:	f002 febf 	bl	800d3fc <HAL_GetTick>
 800a67e:	4602      	mov	r2, r0
 800a680:	4b04      	ldr	r3, [pc, #16]	@ (800a694 <main+0x60>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	1ad3      	subs	r3, r2, r3
 800a686:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a68a:	d2ee      	bcs.n	800a66a <main+0x36>

	  }

	  /*Main Scheduler loop*/
	  Scheduler();
 800a68c:	f7ff f8d4 	bl	8009838 <Scheduler>
  {
 800a690:	e7ea      	b.n	800a668 <main+0x34>
 800a692:	bf00      	nop
 800a694:	20000c28 	.word	0x20000c28
 800a698:	20000468 	.word	0x20000468

0800a69c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b094      	sub	sp, #80	@ 0x50
 800a6a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a6a2:	f107 031c 	add.w	r3, r7, #28
 800a6a6:	2234      	movs	r2, #52	@ 0x34
 800a6a8:	2100      	movs	r1, #0
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f006 fd92 	bl	80111d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a6b0:	f107 0308 	add.w	r3, r7, #8
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	601a      	str	r2, [r3, #0]
 800a6b8:	605a      	str	r2, [r3, #4]
 800a6ba:	609a      	str	r2, [r3, #8]
 800a6bc:	60da      	str	r2, [r3, #12]
 800a6be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	607b      	str	r3, [r7, #4]
 800a6c4:	4b2b      	ldr	r3, [pc, #172]	@ (800a774 <SystemClock_Config+0xd8>)
 800a6c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6c8:	4a2a      	ldr	r2, [pc, #168]	@ (800a774 <SystemClock_Config+0xd8>)
 800a6ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a6ce:	6413      	str	r3, [r2, #64]	@ 0x40
 800a6d0:	4b28      	ldr	r3, [pc, #160]	@ (800a774 <SystemClock_Config+0xd8>)
 800a6d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a6d8:	607b      	str	r3, [r7, #4]
 800a6da:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800a6dc:	2300      	movs	r3, #0
 800a6de:	603b      	str	r3, [r7, #0]
 800a6e0:	4b25      	ldr	r3, [pc, #148]	@ (800a778 <SystemClock_Config+0xdc>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800a6e8:	4a23      	ldr	r2, [pc, #140]	@ (800a778 <SystemClock_Config+0xdc>)
 800a6ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a6ee:	6013      	str	r3, [r2, #0]
 800a6f0:	4b21      	ldr	r3, [pc, #132]	@ (800a778 <SystemClock_Config+0xdc>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a6f8:	603b      	str	r3, [r7, #0]
 800a6fa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800a6fc:	230a      	movs	r3, #10
 800a6fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800a700:	2301      	movs	r3, #1
 800a702:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800a704:	2310      	movs	r3, #16
 800a706:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800a708:	2301      	movs	r3, #1
 800a70a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a70c:	2302      	movs	r3, #2
 800a70e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800a710:	2300      	movs	r3, #0
 800a712:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800a714:	2308      	movs	r3, #8
 800a716:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 800a718:	2354      	movs	r3, #84	@ 0x54
 800a71a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a71c:	2302      	movs	r3, #2
 800a71e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800a720:	2307      	movs	r3, #7
 800a722:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800a724:	2302      	movs	r3, #2
 800a726:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a728:	f107 031c 	add.w	r3, r7, #28
 800a72c:	4618      	mov	r0, r3
 800a72e:	f004 f89d 	bl	800e86c <HAL_RCC_OscConfig>
 800a732:	4603      	mov	r3, r0
 800a734:	2b00      	cmp	r3, #0
 800a736:	d001      	beq.n	800a73c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800a738:	f000 fac2 	bl	800acc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a73c:	230f      	movs	r3, #15
 800a73e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a740:	2302      	movs	r3, #2
 800a742:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a744:	2300      	movs	r3, #0
 800a746:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800a748:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a74c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800a74e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a752:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800a754:	f107 0308 	add.w	r3, r7, #8
 800a758:	2102      	movs	r1, #2
 800a75a:	4618      	mov	r0, r3
 800a75c:	f003 fd3c 	bl	800e1d8 <HAL_RCC_ClockConfig>
 800a760:	4603      	mov	r3, r0
 800a762:	2b00      	cmp	r3, #0
 800a764:	d001      	beq.n	800a76a <SystemClock_Config+0xce>
  {
    Error_Handler();
 800a766:	f000 faab 	bl	800acc0 <Error_Handler>
  }
}
 800a76a:	bf00      	nop
 800a76c:	3750      	adds	r7, #80	@ 0x50
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}
 800a772:	bf00      	nop
 800a774:	40023800 	.word	0x40023800
 800a778:	40007000 	.word	0x40007000

0800a77c <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800a780:	4b09      	ldr	r3, [pc, #36]	@ (800a7a8 <MX_IWDG_Init+0x2c>)
 800a782:	4a0a      	ldr	r2, [pc, #40]	@ (800a7ac <MX_IWDG_Init+0x30>)
 800a784:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 800a786:	4b08      	ldr	r3, [pc, #32]	@ (800a7a8 <MX_IWDG_Init+0x2c>)
 800a788:	2204      	movs	r2, #4
 800a78a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 800a78c:	4b06      	ldr	r3, [pc, #24]	@ (800a7a8 <MX_IWDG_Init+0x2c>)
 800a78e:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800a792:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800a794:	4804      	ldr	r0, [pc, #16]	@ (800a7a8 <MX_IWDG_Init+0x2c>)
 800a796:	f003 fccc 	bl	800e132 <HAL_IWDG_Init>
 800a79a:	4603      	mov	r3, r0
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d001      	beq.n	800a7a4 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 800a7a0:	f000 fa8e 	bl	800acc0 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800a7a4:	bf00      	nop
 800a7a6:	bd80      	pop	{r7, pc}
 800a7a8:	20000468 	.word	0x20000468
 800a7ac:	40003000 	.word	0x40003000

0800a7b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b086      	sub	sp, #24
 800a7b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a7b6:	f107 0308 	add.w	r3, r7, #8
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	601a      	str	r2, [r3, #0]
 800a7be:	605a      	str	r2, [r3, #4]
 800a7c0:	609a      	str	r2, [r3, #8]
 800a7c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a7c4:	463b      	mov	r3, r7
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	601a      	str	r2, [r3, #0]
 800a7ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800a7cc:	4b1d      	ldr	r3, [pc, #116]	@ (800a844 <MX_TIM3_Init+0x94>)
 800a7ce:	4a1e      	ldr	r2, [pc, #120]	@ (800a848 <MX_TIM3_Init+0x98>)
 800a7d0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 800a7d2:	4b1c      	ldr	r3, [pc, #112]	@ (800a844 <MX_TIM3_Init+0x94>)
 800a7d4:	2253      	movs	r2, #83	@ 0x53
 800a7d6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a7d8:	4b1a      	ldr	r3, [pc, #104]	@ (800a844 <MX_TIM3_Init+0x94>)
 800a7da:	2200      	movs	r2, #0
 800a7dc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 800a7de:	4b19      	ldr	r3, [pc, #100]	@ (800a844 <MX_TIM3_Init+0x94>)
 800a7e0:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800a7e4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a7e6:	4b17      	ldr	r3, [pc, #92]	@ (800a844 <MX_TIM3_Init+0x94>)
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a7ec:	4b15      	ldr	r3, [pc, #84]	@ (800a844 <MX_TIM3_Init+0x94>)
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800a7f2:	4814      	ldr	r0, [pc, #80]	@ (800a844 <MX_TIM3_Init+0x94>)
 800a7f4:	f004 fad8 	bl	800eda8 <HAL_TIM_Base_Init>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d001      	beq.n	800a802 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800a7fe:	f000 fa5f 	bl	800acc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a802:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a806:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800a808:	f107 0308 	add.w	r3, r7, #8
 800a80c:	4619      	mov	r1, r3
 800a80e:	480d      	ldr	r0, [pc, #52]	@ (800a844 <MX_TIM3_Init+0x94>)
 800a810:	f004 fc7a 	bl	800f108 <HAL_TIM_ConfigClockSource>
 800a814:	4603      	mov	r3, r0
 800a816:	2b00      	cmp	r3, #0
 800a818:	d001      	beq.n	800a81e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800a81a:	f000 fa51 	bl	800acc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 800a81e:	2310      	movs	r3, #16
 800a820:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a822:	2300      	movs	r3, #0
 800a824:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800a826:	463b      	mov	r3, r7
 800a828:	4619      	mov	r1, r3
 800a82a:	4806      	ldr	r0, [pc, #24]	@ (800a844 <MX_TIM3_Init+0x94>)
 800a82c:	f004 feac 	bl	800f588 <HAL_TIMEx_MasterConfigSynchronization>
 800a830:	4603      	mov	r3, r0
 800a832:	2b00      	cmp	r3, #0
 800a834:	d001      	beq.n	800a83a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800a836:	f000 fa43 	bl	800acc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800a83a:	bf00      	nop
 800a83c:	3718      	adds	r7, #24
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}
 800a842:	bf00      	nop
 800a844:	20000474 	.word	0x20000474
 800a848:	40000400 	.word	0x40000400

0800a84c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b086      	sub	sp, #24
 800a850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a852:	f107 0308 	add.w	r3, r7, #8
 800a856:	2200      	movs	r2, #0
 800a858:	601a      	str	r2, [r3, #0]
 800a85a:	605a      	str	r2, [r3, #4]
 800a85c:	609a      	str	r2, [r3, #8]
 800a85e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a860:	463b      	mov	r3, r7
 800a862:	2200      	movs	r2, #0
 800a864:	601a      	str	r2, [r3, #0]
 800a866:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800a868:	4b1d      	ldr	r3, [pc, #116]	@ (800a8e0 <MX_TIM4_Init+0x94>)
 800a86a:	4a1e      	ldr	r2, [pc, #120]	@ (800a8e4 <MX_TIM4_Init+0x98>)
 800a86c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84;
 800a86e:	4b1c      	ldr	r3, [pc, #112]	@ (800a8e0 <MX_TIM4_Init+0x94>)
 800a870:	2254      	movs	r2, #84	@ 0x54
 800a872:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a874:	4b1a      	ldr	r3, [pc, #104]	@ (800a8e0 <MX_TIM4_Init+0x94>)
 800a876:	2200      	movs	r2, #0
 800a878:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1563;
 800a87a:	4b19      	ldr	r3, [pc, #100]	@ (800a8e0 <MX_TIM4_Init+0x94>)
 800a87c:	f240 621b 	movw	r2, #1563	@ 0x61b
 800a880:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a882:	4b17      	ldr	r3, [pc, #92]	@ (800a8e0 <MX_TIM4_Init+0x94>)
 800a884:	2200      	movs	r2, #0
 800a886:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a888:	4b15      	ldr	r3, [pc, #84]	@ (800a8e0 <MX_TIM4_Init+0x94>)
 800a88a:	2200      	movs	r2, #0
 800a88c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800a88e:	4814      	ldr	r0, [pc, #80]	@ (800a8e0 <MX_TIM4_Init+0x94>)
 800a890:	f004 fa8a 	bl	800eda8 <HAL_TIM_Base_Init>
 800a894:	4603      	mov	r3, r0
 800a896:	2b00      	cmp	r3, #0
 800a898:	d001      	beq.n	800a89e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800a89a:	f000 fa11 	bl	800acc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a89e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a8a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800a8a4:	f107 0308 	add.w	r3, r7, #8
 800a8a8:	4619      	mov	r1, r3
 800a8aa:	480d      	ldr	r0, [pc, #52]	@ (800a8e0 <MX_TIM4_Init+0x94>)
 800a8ac:	f004 fc2c 	bl	800f108 <HAL_TIM_ConfigClockSource>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d001      	beq.n	800a8ba <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800a8b6:	f000 fa03 	bl	800acc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800a8c2:	463b      	mov	r3, r7
 800a8c4:	4619      	mov	r1, r3
 800a8c6:	4806      	ldr	r0, [pc, #24]	@ (800a8e0 <MX_TIM4_Init+0x94>)
 800a8c8:	f004 fe5e 	bl	800f588 <HAL_TIMEx_MasterConfigSynchronization>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d001      	beq.n	800a8d6 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800a8d2:	f000 f9f5 	bl	800acc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800a8d6:	bf00      	nop
 800a8d8:	3718      	adds	r7, #24
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}
 800a8de:	bf00      	nop
 800a8e0:	200004bc 	.word	0x200004bc
 800a8e4:	40000800 	.word	0x40000800

0800a8e8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b086      	sub	sp, #24
 800a8ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a8ee:	f107 0308 	add.w	r3, r7, #8
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	601a      	str	r2, [r3, #0]
 800a8f6:	605a      	str	r2, [r3, #4]
 800a8f8:	609a      	str	r2, [r3, #8]
 800a8fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a8fc:	463b      	mov	r3, r7
 800a8fe:	2200      	movs	r2, #0
 800a900:	601a      	str	r2, [r3, #0]
 800a902:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800a904:	4b1d      	ldr	r3, [pc, #116]	@ (800a97c <MX_TIM5_Init+0x94>)
 800a906:	4a1e      	ldr	r2, [pc, #120]	@ (800a980 <MX_TIM5_Init+0x98>)
 800a908:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84;
 800a90a:	4b1c      	ldr	r3, [pc, #112]	@ (800a97c <MX_TIM5_Init+0x94>)
 800a90c:	2254      	movs	r2, #84	@ 0x54
 800a90e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a910:	4b1a      	ldr	r3, [pc, #104]	@ (800a97c <MX_TIM5_Init+0x94>)
 800a912:	2200      	movs	r2, #0
 800a914:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 3647;
 800a916:	4b19      	ldr	r3, [pc, #100]	@ (800a97c <MX_TIM5_Init+0x94>)
 800a918:	f640 623f 	movw	r2, #3647	@ 0xe3f
 800a91c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a91e:	4b17      	ldr	r3, [pc, #92]	@ (800a97c <MX_TIM5_Init+0x94>)
 800a920:	2200      	movs	r2, #0
 800a922:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a924:	4b15      	ldr	r3, [pc, #84]	@ (800a97c <MX_TIM5_Init+0x94>)
 800a926:	2200      	movs	r2, #0
 800a928:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800a92a:	4814      	ldr	r0, [pc, #80]	@ (800a97c <MX_TIM5_Init+0x94>)
 800a92c:	f004 fa3c 	bl	800eda8 <HAL_TIM_Base_Init>
 800a930:	4603      	mov	r3, r0
 800a932:	2b00      	cmp	r3, #0
 800a934:	d001      	beq.n	800a93a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800a936:	f000 f9c3 	bl	800acc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a93a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a93e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800a940:	f107 0308 	add.w	r3, r7, #8
 800a944:	4619      	mov	r1, r3
 800a946:	480d      	ldr	r0, [pc, #52]	@ (800a97c <MX_TIM5_Init+0x94>)
 800a948:	f004 fbde 	bl	800f108 <HAL_TIM_ConfigClockSource>
 800a94c:	4603      	mov	r3, r0
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d001      	beq.n	800a956 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800a952:	f000 f9b5 	bl	800acc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a956:	2300      	movs	r3, #0
 800a958:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a95a:	2300      	movs	r3, #0
 800a95c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800a95e:	463b      	mov	r3, r7
 800a960:	4619      	mov	r1, r3
 800a962:	4806      	ldr	r0, [pc, #24]	@ (800a97c <MX_TIM5_Init+0x94>)
 800a964:	f004 fe10 	bl	800f588 <HAL_TIMEx_MasterConfigSynchronization>
 800a968:	4603      	mov	r3, r0
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d001      	beq.n	800a972 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800a96e:	f000 f9a7 	bl	800acc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800a972:	bf00      	nop
 800a974:	3718      	adds	r7, #24
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}
 800a97a:	bf00      	nop
 800a97c:	20000504 	.word	0x20000504
 800a980:	40000c00 	.word	0x40000c00

0800a984 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b082      	sub	sp, #8
 800a988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a98a:	463b      	mov	r3, r7
 800a98c:	2200      	movs	r2, #0
 800a98e:	601a      	str	r2, [r3, #0]
 800a990:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800a992:	4b15      	ldr	r3, [pc, #84]	@ (800a9e8 <MX_TIM6_Init+0x64>)
 800a994:	4a15      	ldr	r2, [pc, #84]	@ (800a9ec <MX_TIM6_Init+0x68>)
 800a996:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 800a998:	4b13      	ldr	r3, [pc, #76]	@ (800a9e8 <MX_TIM6_Init+0x64>)
 800a99a:	2253      	movs	r2, #83	@ 0x53
 800a99c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a99e:	4b12      	ldr	r3, [pc, #72]	@ (800a9e8 <MX_TIM6_Init+0x64>)
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800a9a4:	4b10      	ldr	r3, [pc, #64]	@ (800a9e8 <MX_TIM6_Init+0x64>)
 800a9a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a9aa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a9ac:	4b0e      	ldr	r3, [pc, #56]	@ (800a9e8 <MX_TIM6_Init+0x64>)
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800a9b2:	480d      	ldr	r0, [pc, #52]	@ (800a9e8 <MX_TIM6_Init+0x64>)
 800a9b4:	f004 f9f8 	bl	800eda8 <HAL_TIM_Base_Init>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d001      	beq.n	800a9c2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800a9be:	f000 f97f 	bl	800acc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800a9ca:	463b      	mov	r3, r7
 800a9cc:	4619      	mov	r1, r3
 800a9ce:	4806      	ldr	r0, [pc, #24]	@ (800a9e8 <MX_TIM6_Init+0x64>)
 800a9d0:	f004 fdda 	bl	800f588 <HAL_TIMEx_MasterConfigSynchronization>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d001      	beq.n	800a9de <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800a9da:	f000 f971 	bl	800acc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800a9de:	bf00      	nop
 800a9e0:	3708      	adds	r7, #8
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}
 800a9e6:	bf00      	nop
 800a9e8:	2000054c 	.word	0x2000054c
 800a9ec:	40001000 	.word	0x40001000

0800a9f0 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b084      	sub	sp, #16
 800a9f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a9f6:	463b      	mov	r3, r7
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	601a      	str	r2, [r3, #0]
 800a9fc:	605a      	str	r2, [r3, #4]
 800a9fe:	609a      	str	r2, [r3, #8]
 800aa00:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800aa02:	4b16      	ldr	r3, [pc, #88]	@ (800aa5c <MX_TIM9_Init+0x6c>)
 800aa04:	4a16      	ldr	r2, [pc, #88]	@ (800aa60 <MX_TIM9_Init+0x70>)
 800aa06:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 84-1;
 800aa08:	4b14      	ldr	r3, [pc, #80]	@ (800aa5c <MX_TIM9_Init+0x6c>)
 800aa0a:	2253      	movs	r2, #83	@ 0x53
 800aa0c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800aa0e:	4b13      	ldr	r3, [pc, #76]	@ (800aa5c <MX_TIM9_Init+0x6c>)
 800aa10:	2200      	movs	r2, #0
 800aa12:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 800aa14:	4b11      	ldr	r3, [pc, #68]	@ (800aa5c <MX_TIM9_Init+0x6c>)
 800aa16:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800aa1a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800aa1c:	4b0f      	ldr	r3, [pc, #60]	@ (800aa5c <MX_TIM9_Init+0x6c>)
 800aa1e:	2200      	movs	r2, #0
 800aa20:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800aa22:	4b0e      	ldr	r3, [pc, #56]	@ (800aa5c <MX_TIM9_Init+0x6c>)
 800aa24:	2280      	movs	r2, #128	@ 0x80
 800aa26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800aa28:	480c      	ldr	r0, [pc, #48]	@ (800aa5c <MX_TIM9_Init+0x6c>)
 800aa2a:	f004 f9bd 	bl	800eda8 <HAL_TIM_Base_Init>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d001      	beq.n	800aa38 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 800aa34:	f000 f944 	bl	800acc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800aa38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800aa3c:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800aa3e:	463b      	mov	r3, r7
 800aa40:	4619      	mov	r1, r3
 800aa42:	4806      	ldr	r0, [pc, #24]	@ (800aa5c <MX_TIM9_Init+0x6c>)
 800aa44:	f004 fb60 	bl	800f108 <HAL_TIM_ConfigClockSource>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d001      	beq.n	800aa52 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 800aa4e:	f000 f937 	bl	800acc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 800aa52:	bf00      	nop
 800aa54:	3710      	adds	r7, #16
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}
 800aa5a:	bf00      	nop
 800aa5c:	20000594 	.word	0x20000594
 800aa60:	40014000 	.word	0x40014000

0800aa64 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800aa68:	4b10      	ldr	r3, [pc, #64]	@ (800aaac <MX_USART2_UART_Init+0x48>)
 800aa6a:	4a11      	ldr	r2, [pc, #68]	@ (800aab0 <MX_USART2_UART_Init+0x4c>)
 800aa6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 576000;
 800aa6e:	4b0f      	ldr	r3, [pc, #60]	@ (800aaac <MX_USART2_UART_Init+0x48>)
 800aa70:	4a10      	ldr	r2, [pc, #64]	@ (800aab4 <MX_USART2_UART_Init+0x50>)
 800aa72:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800aa74:	4b0d      	ldr	r3, [pc, #52]	@ (800aaac <MX_USART2_UART_Init+0x48>)
 800aa76:	2200      	movs	r2, #0
 800aa78:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800aa7a:	4b0c      	ldr	r3, [pc, #48]	@ (800aaac <MX_USART2_UART_Init+0x48>)
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800aa80:	4b0a      	ldr	r3, [pc, #40]	@ (800aaac <MX_USART2_UART_Init+0x48>)
 800aa82:	2200      	movs	r2, #0
 800aa84:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800aa86:	4b09      	ldr	r3, [pc, #36]	@ (800aaac <MX_USART2_UART_Init+0x48>)
 800aa88:	220c      	movs	r2, #12
 800aa8a:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800aa8c:	4b07      	ldr	r3, [pc, #28]	@ (800aaac <MX_USART2_UART_Init+0x48>)
 800aa8e:	2200      	movs	r2, #0
 800aa90:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800aa92:	4b06      	ldr	r3, [pc, #24]	@ (800aaac <MX_USART2_UART_Init+0x48>)
 800aa94:	2200      	movs	r2, #0
 800aa96:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800aa98:	4804      	ldr	r0, [pc, #16]	@ (800aaac <MX_USART2_UART_Init+0x48>)
 800aa9a:	f004 fe05 	bl	800f6a8 <HAL_UART_Init>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d001      	beq.n	800aaa8 <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 800aaa4:	f000 f90c 	bl	800acc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800aaa8:	bf00      	nop
 800aaaa:	bd80      	pop	{r7, pc}
 800aaac:	200005dc 	.word	0x200005dc
 800aab0:	40004400 	.word	0x40004400
 800aab4:	0008ca00 	.word	0x0008ca00

0800aab8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800aabc:	4b12      	ldr	r3, [pc, #72]	@ (800ab08 <MX_USART6_UART_Init+0x50>)
 800aabe:	4a13      	ldr	r2, [pc, #76]	@ (800ab0c <MX_USART6_UART_Init+0x54>)
 800aac0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 19200;
 800aac2:	4b11      	ldr	r3, [pc, #68]	@ (800ab08 <MX_USART6_UART_Init+0x50>)
 800aac4:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 800aac8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_9B;
 800aaca:	4b0f      	ldr	r3, [pc, #60]	@ (800ab08 <MX_USART6_UART_Init+0x50>)
 800aacc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800aad0:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800aad2:	4b0d      	ldr	r3, [pc, #52]	@ (800ab08 <MX_USART6_UART_Init+0x50>)
 800aad4:	2200      	movs	r2, #0
 800aad6:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_EVEN;
 800aad8:	4b0b      	ldr	r3, [pc, #44]	@ (800ab08 <MX_USART6_UART_Init+0x50>)
 800aada:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800aade:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800aae0:	4b09      	ldr	r3, [pc, #36]	@ (800ab08 <MX_USART6_UART_Init+0x50>)
 800aae2:	220c      	movs	r2, #12
 800aae4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800aae6:	4b08      	ldr	r3, [pc, #32]	@ (800ab08 <MX_USART6_UART_Init+0x50>)
 800aae8:	2200      	movs	r2, #0
 800aaea:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_8;
 800aaec:	4b06      	ldr	r3, [pc, #24]	@ (800ab08 <MX_USART6_UART_Init+0x50>)
 800aaee:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800aaf2:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800aaf4:	4804      	ldr	r0, [pc, #16]	@ (800ab08 <MX_USART6_UART_Init+0x50>)
 800aaf6:	f004 fdd7 	bl	800f6a8 <HAL_UART_Init>
 800aafa:	4603      	mov	r3, r0
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d001      	beq.n	800ab04 <MX_USART6_UART_Init+0x4c>
  {
    Error_Handler();
 800ab00:	f000 f8de 	bl	800acc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800ab04:	bf00      	nop
 800ab06:	bd80      	pop	{r7, pc}
 800ab08:	20000624 	.word	0x20000624
 800ab0c:	40011400 	.word	0x40011400

0800ab10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b08a      	sub	sp, #40	@ 0x28
 800ab14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ab16:	f107 0314 	add.w	r3, r7, #20
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	601a      	str	r2, [r3, #0]
 800ab1e:	605a      	str	r2, [r3, #4]
 800ab20:	609a      	str	r2, [r3, #8]
 800ab22:	60da      	str	r2, [r3, #12]
 800ab24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800ab26:	2300      	movs	r3, #0
 800ab28:	613b      	str	r3, [r7, #16]
 800ab2a:	4b60      	ldr	r3, [pc, #384]	@ (800acac <MX_GPIO_Init+0x19c>)
 800ab2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab2e:	4a5f      	ldr	r2, [pc, #380]	@ (800acac <MX_GPIO_Init+0x19c>)
 800ab30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab34:	6313      	str	r3, [r2, #48]	@ 0x30
 800ab36:	4b5d      	ldr	r3, [pc, #372]	@ (800acac <MX_GPIO_Init+0x19c>)
 800ab38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab3e:	613b      	str	r3, [r7, #16]
 800ab40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800ab42:	2300      	movs	r3, #0
 800ab44:	60fb      	str	r3, [r7, #12]
 800ab46:	4b59      	ldr	r3, [pc, #356]	@ (800acac <MX_GPIO_Init+0x19c>)
 800ab48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab4a:	4a58      	ldr	r2, [pc, #352]	@ (800acac <MX_GPIO_Init+0x19c>)
 800ab4c:	f043 0301 	orr.w	r3, r3, #1
 800ab50:	6313      	str	r3, [r2, #48]	@ 0x30
 800ab52:	4b56      	ldr	r3, [pc, #344]	@ (800acac <MX_GPIO_Init+0x19c>)
 800ab54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab56:	f003 0301 	and.w	r3, r3, #1
 800ab5a:	60fb      	str	r3, [r7, #12]
 800ab5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800ab5e:	2300      	movs	r3, #0
 800ab60:	60bb      	str	r3, [r7, #8]
 800ab62:	4b52      	ldr	r3, [pc, #328]	@ (800acac <MX_GPIO_Init+0x19c>)
 800ab64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab66:	4a51      	ldr	r2, [pc, #324]	@ (800acac <MX_GPIO_Init+0x19c>)
 800ab68:	f043 0302 	orr.w	r3, r3, #2
 800ab6c:	6313      	str	r3, [r2, #48]	@ 0x30
 800ab6e:	4b4f      	ldr	r3, [pc, #316]	@ (800acac <MX_GPIO_Init+0x19c>)
 800ab70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab72:	f003 0302 	and.w	r3, r3, #2
 800ab76:	60bb      	str	r3, [r7, #8]
 800ab78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	607b      	str	r3, [r7, #4]
 800ab7e:	4b4b      	ldr	r3, [pc, #300]	@ (800acac <MX_GPIO_Init+0x19c>)
 800ab80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab82:	4a4a      	ldr	r2, [pc, #296]	@ (800acac <MX_GPIO_Init+0x19c>)
 800ab84:	f043 0304 	orr.w	r3, r3, #4
 800ab88:	6313      	str	r3, [r2, #48]	@ 0x30
 800ab8a:	4b48      	ldr	r3, [pc, #288]	@ (800acac <MX_GPIO_Init+0x19c>)
 800ab8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab8e:	f003 0304 	and.w	r3, r3, #4
 800ab92:	607b      	str	r3, [r7, #4]
 800ab94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800ab96:	2300      	movs	r3, #0
 800ab98:	603b      	str	r3, [r7, #0]
 800ab9a:	4b44      	ldr	r3, [pc, #272]	@ (800acac <MX_GPIO_Init+0x19c>)
 800ab9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab9e:	4a43      	ldr	r2, [pc, #268]	@ (800acac <MX_GPIO_Init+0x19c>)
 800aba0:	f043 0308 	orr.w	r3, r3, #8
 800aba4:	6313      	str	r3, [r2, #48]	@ 0x30
 800aba6:	4b41      	ldr	r3, [pc, #260]	@ (800acac <MX_GPIO_Init+0x19c>)
 800aba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abaa:	f003 0308 	and.w	r3, r3, #8
 800abae:	603b      	str	r3, [r7, #0]
 800abb0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RS485_RX_LED_Pin|RS485_TX_LED_Pin, GPIO_PIN_RESET);
 800abb2:	2200      	movs	r2, #0
 800abb4:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 800abb8:	483d      	ldr	r0, [pc, #244]	@ (800acb0 <MX_GPIO_Init+0x1a0>)
 800abba:	f003 fa87 	bl	800e0cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DO_0_Pin|DO_1_Pin|DO_2_Pin|DO_3_Pin, GPIO_PIN_RESET);
 800abbe:	2200      	movs	r2, #0
 800abc0:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 800abc4:	483b      	ldr	r0, [pc, #236]	@ (800acb4 <MX_GPIO_Init+0x1a4>)
 800abc6:	f003 fa81 	bl	800e0cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PWR_LED_Pin|STATUS_LED_Pin, GPIO_PIN_RESET);
 800abca:	2200      	movs	r2, #0
 800abcc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800abd0:	4839      	ldr	r0, [pc, #228]	@ (800acb8 <MX_GPIO_Init+0x1a8>)
 800abd2:	f003 fa7b 	bl	800e0cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_DIR_GPIO_Port, RS485_DIR_Pin, GPIO_PIN_RESET);
 800abd6:	2200      	movs	r2, #0
 800abd8:	2104      	movs	r1, #4
 800abda:	4838      	ldr	r0, [pc, #224]	@ (800acbc <MX_GPIO_Init+0x1ac>)
 800abdc:	f003 fa76 	bl	800e0cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DI_0_Pin DI_1_Pin DI_2_Pin SA_2_Pin */
  GPIO_InitStruct.Pin = DI_0_Pin|DI_1_Pin|DI_2_Pin|SA_2_Pin;
 800abe0:	f248 0313 	movw	r3, #32787	@ 0x8013
 800abe4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800abe6:	2300      	movs	r3, #0
 800abe8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800abea:	2302      	movs	r3, #2
 800abec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800abee:	f107 0314 	add.w	r3, r7, #20
 800abf2:	4619      	mov	r1, r3
 800abf4:	482f      	ldr	r0, [pc, #188]	@ (800acb4 <MX_GPIO_Init+0x1a4>)
 800abf6:	f003 f8bd 	bl	800dd74 <HAL_GPIO_Init>

  /*Configure GPIO pins : SA_3_Pin SA_1_Pin DI_3_Pin SA_0_Pin */
  GPIO_InitStruct.Pin = SA_3_Pin|SA_1_Pin|DI_3_Pin|SA_0_Pin;
 800abfa:	f44f 7343 	mov.w	r3, #780	@ 0x30c
 800abfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ac00:	2300      	movs	r3, #0
 800ac02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800ac04:	2302      	movs	r3, #2
 800ac06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ac08:	f107 0314 	add.w	r3, r7, #20
 800ac0c:	4619      	mov	r1, r3
 800ac0e:	4828      	ldr	r0, [pc, #160]	@ (800acb0 <MX_GPIO_Init+0x1a0>)
 800ac10:	f003 f8b0 	bl	800dd74 <HAL_GPIO_Init>

  /*Configure GPIO pins : RS485_RX_LED_Pin RS485_TX_LED_Pin */
  GPIO_InitStruct.Pin = RS485_RX_LED_Pin|RS485_TX_LED_Pin;
 800ac14:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800ac18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ac1a:	2301      	movs	r3, #1
 800ac1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800ac1e:	2302      	movs	r3, #2
 800ac20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800ac22:	2302      	movs	r3, #2
 800ac24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ac26:	f107 0314 	add.w	r3, r7, #20
 800ac2a:	4619      	mov	r1, r3
 800ac2c:	4820      	ldr	r0, [pc, #128]	@ (800acb0 <MX_GPIO_Init+0x1a0>)
 800ac2e:	f003 f8a1 	bl	800dd74 <HAL_GPIO_Init>

  /*Configure GPIO pins : DO_0_Pin DO_1_Pin DO_2_Pin DO_3_Pin */
  GPIO_InitStruct.Pin = DO_0_Pin|DO_1_Pin|DO_2_Pin|DO_3_Pin;
 800ac32:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800ac36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ac38:	2301      	movs	r3, #1
 800ac3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800ac3c:	2302      	movs	r3, #2
 800ac3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ac40:	2303      	movs	r3, #3
 800ac42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ac44:	f107 0314 	add.w	r3, r7, #20
 800ac48:	4619      	mov	r1, r3
 800ac4a:	481a      	ldr	r0, [pc, #104]	@ (800acb4 <MX_GPIO_Init+0x1a4>)
 800ac4c:	f003 f892 	bl	800dd74 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_0_Pin */
  GPIO_InitStruct.Pin = SW_0_Pin;
 800ac50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ac54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ac56:	2300      	movs	r3, #0
 800ac58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800ac5a:	2302      	movs	r3, #2
 800ac5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_0_GPIO_Port, &GPIO_InitStruct);
 800ac5e:	f107 0314 	add.w	r3, r7, #20
 800ac62:	4619      	mov	r1, r3
 800ac64:	4814      	ldr	r0, [pc, #80]	@ (800acb8 <MX_GPIO_Init+0x1a8>)
 800ac66:	f003 f885 	bl	800dd74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWR_LED_Pin STATUS_LED_Pin */
  GPIO_InitStruct.Pin = PWR_LED_Pin|STATUS_LED_Pin;
 800ac6a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800ac6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ac70:	2301      	movs	r3, #1
 800ac72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800ac74:	2302      	movs	r3, #2
 800ac76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ac7c:	f107 0314 	add.w	r3, r7, #20
 800ac80:	4619      	mov	r1, r3
 800ac82:	480d      	ldr	r0, [pc, #52]	@ (800acb8 <MX_GPIO_Init+0x1a8>)
 800ac84:	f003 f876 	bl	800dd74 <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_DIR_Pin */
  GPIO_InitStruct.Pin = RS485_DIR_Pin;
 800ac88:	2304      	movs	r3, #4
 800ac8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800ac90:	2302      	movs	r3, #2
 800ac92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800ac94:	2302      	movs	r3, #2
 800ac96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RS485_DIR_GPIO_Port, &GPIO_InitStruct);
 800ac98:	f107 0314 	add.w	r3, r7, #20
 800ac9c:	4619      	mov	r1, r3
 800ac9e:	4807      	ldr	r0, [pc, #28]	@ (800acbc <MX_GPIO_Init+0x1ac>)
 800aca0:	f003 f868 	bl	800dd74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800aca4:	bf00      	nop
 800aca6:	3728      	adds	r7, #40	@ 0x28
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}
 800acac:	40023800 	.word	0x40023800
 800acb0:	40020400 	.word	0x40020400
 800acb4:	40020000 	.word	0x40020000
 800acb8:	40020800 	.word	0x40020800
 800acbc:	40020c00 	.word	0x40020c00

0800acc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800acc0:	b480      	push	{r7}
 800acc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800acc4:	b672      	cpsid	i
}
 800acc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800acc8:	bf00      	nop
 800acca:	e7fd      	b.n	800acc8 <Error_Handler+0x8>

0800accc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b082      	sub	sp, #8
 800acd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800acd2:	2300      	movs	r3, #0
 800acd4:	607b      	str	r3, [r7, #4]
 800acd6:	4b16      	ldr	r3, [pc, #88]	@ (800ad30 <HAL_MspInit+0x64>)
 800acd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800acda:	4a15      	ldr	r2, [pc, #84]	@ (800ad30 <HAL_MspInit+0x64>)
 800acdc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ace0:	6453      	str	r3, [r2, #68]	@ 0x44
 800ace2:	4b13      	ldr	r3, [pc, #76]	@ (800ad30 <HAL_MspInit+0x64>)
 800ace4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ace6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800acea:	607b      	str	r3, [r7, #4]
 800acec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800acee:	2300      	movs	r3, #0
 800acf0:	603b      	str	r3, [r7, #0]
 800acf2:	4b0f      	ldr	r3, [pc, #60]	@ (800ad30 <HAL_MspInit+0x64>)
 800acf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acf6:	4a0e      	ldr	r2, [pc, #56]	@ (800ad30 <HAL_MspInit+0x64>)
 800acf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800acfc:	6413      	str	r3, [r2, #64]	@ 0x40
 800acfe:	4b0c      	ldr	r3, [pc, #48]	@ (800ad30 <HAL_MspInit+0x64>)
 800ad00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ad06:	603b      	str	r3, [r7, #0]
 800ad08:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800ad0a:	2007      	movs	r0, #7
 800ad0c:	f002 fc76 	bl	800d5fc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 1);
 800ad10:	2201      	movs	r2, #1
 800ad12:	2100      	movs	r1, #0
 800ad14:	f06f 0004 	mvn.w	r0, #4
 800ad18:	f002 fc7b 	bl	800d612 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 4);
 800ad1c:	2204      	movs	r2, #4
 800ad1e:	2100      	movs	r1, #0
 800ad20:	f06f 0003 	mvn.w	r0, #3
 800ad24:	f002 fc75 	bl	800d612 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ad28:	bf00      	nop
 800ad2a:	3708      	adds	r7, #8
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}
 800ad30:	40023800 	.word	0x40023800

0800ad34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b088      	sub	sp, #32
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	4a3e      	ldr	r2, [pc, #248]	@ (800ae3c <HAL_TIM_Base_MspInit+0x108>)
 800ad42:	4293      	cmp	r3, r2
 800ad44:	d10e      	bne.n	800ad64 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800ad46:	2300      	movs	r3, #0
 800ad48:	61fb      	str	r3, [r7, #28]
 800ad4a:	4b3d      	ldr	r3, [pc, #244]	@ (800ae40 <HAL_TIM_Base_MspInit+0x10c>)
 800ad4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad4e:	4a3c      	ldr	r2, [pc, #240]	@ (800ae40 <HAL_TIM_Base_MspInit+0x10c>)
 800ad50:	f043 0302 	orr.w	r3, r3, #2
 800ad54:	6413      	str	r3, [r2, #64]	@ 0x40
 800ad56:	4b3a      	ldr	r3, [pc, #232]	@ (800ae40 <HAL_TIM_Base_MspInit+0x10c>)
 800ad58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad5a:	f003 0302 	and.w	r3, r3, #2
 800ad5e:	61fb      	str	r3, [r7, #28]
 800ad60:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 800ad62:	e066      	b.n	800ae32 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM4)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	4a36      	ldr	r2, [pc, #216]	@ (800ae44 <HAL_TIM_Base_MspInit+0x110>)
 800ad6a:	4293      	cmp	r3, r2
 800ad6c:	d116      	bne.n	800ad9c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800ad6e:	2300      	movs	r3, #0
 800ad70:	61bb      	str	r3, [r7, #24]
 800ad72:	4b33      	ldr	r3, [pc, #204]	@ (800ae40 <HAL_TIM_Base_MspInit+0x10c>)
 800ad74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad76:	4a32      	ldr	r2, [pc, #200]	@ (800ae40 <HAL_TIM_Base_MspInit+0x10c>)
 800ad78:	f043 0304 	orr.w	r3, r3, #4
 800ad7c:	6413      	str	r3, [r2, #64]	@ 0x40
 800ad7e:	4b30      	ldr	r3, [pc, #192]	@ (800ae40 <HAL_TIM_Base_MspInit+0x10c>)
 800ad80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad82:	f003 0304 	and.w	r3, r3, #4
 800ad86:	61bb      	str	r3, [r7, #24]
 800ad88:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 1);
 800ad8a:	2201      	movs	r2, #1
 800ad8c:	2100      	movs	r1, #0
 800ad8e:	201e      	movs	r0, #30
 800ad90:	f002 fc3f 	bl	800d612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800ad94:	201e      	movs	r0, #30
 800ad96:	f002 fc58 	bl	800d64a <HAL_NVIC_EnableIRQ>
}
 800ad9a:	e04a      	b.n	800ae32 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM5)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	4a29      	ldr	r2, [pc, #164]	@ (800ae48 <HAL_TIM_Base_MspInit+0x114>)
 800ada2:	4293      	cmp	r3, r2
 800ada4:	d116      	bne.n	800add4 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800ada6:	2300      	movs	r3, #0
 800ada8:	617b      	str	r3, [r7, #20]
 800adaa:	4b25      	ldr	r3, [pc, #148]	@ (800ae40 <HAL_TIM_Base_MspInit+0x10c>)
 800adac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adae:	4a24      	ldr	r2, [pc, #144]	@ (800ae40 <HAL_TIM_Base_MspInit+0x10c>)
 800adb0:	f043 0308 	orr.w	r3, r3, #8
 800adb4:	6413      	str	r3, [r2, #64]	@ 0x40
 800adb6:	4b22      	ldr	r3, [pc, #136]	@ (800ae40 <HAL_TIM_Base_MspInit+0x10c>)
 800adb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adba:	f003 0308 	and.w	r3, r3, #8
 800adbe:	617b      	str	r3, [r7, #20]
 800adc0:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 1);
 800adc2:	2201      	movs	r2, #1
 800adc4:	2100      	movs	r1, #0
 800adc6:	2032      	movs	r0, #50	@ 0x32
 800adc8:	f002 fc23 	bl	800d612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800adcc:	2032      	movs	r0, #50	@ 0x32
 800adce:	f002 fc3c 	bl	800d64a <HAL_NVIC_EnableIRQ>
}
 800add2:	e02e      	b.n	800ae32 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM6)
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	4a1c      	ldr	r2, [pc, #112]	@ (800ae4c <HAL_TIM_Base_MspInit+0x118>)
 800adda:	4293      	cmp	r3, r2
 800addc:	d10e      	bne.n	800adfc <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800adde:	2300      	movs	r3, #0
 800ade0:	613b      	str	r3, [r7, #16]
 800ade2:	4b17      	ldr	r3, [pc, #92]	@ (800ae40 <HAL_TIM_Base_MspInit+0x10c>)
 800ade4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ade6:	4a16      	ldr	r2, [pc, #88]	@ (800ae40 <HAL_TIM_Base_MspInit+0x10c>)
 800ade8:	f043 0310 	orr.w	r3, r3, #16
 800adec:	6413      	str	r3, [r2, #64]	@ 0x40
 800adee:	4b14      	ldr	r3, [pc, #80]	@ (800ae40 <HAL_TIM_Base_MspInit+0x10c>)
 800adf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adf2:	f003 0310 	and.w	r3, r3, #16
 800adf6:	613b      	str	r3, [r7, #16]
 800adf8:	693b      	ldr	r3, [r7, #16]
}
 800adfa:	e01a      	b.n	800ae32 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM9)
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	4a13      	ldr	r2, [pc, #76]	@ (800ae50 <HAL_TIM_Base_MspInit+0x11c>)
 800ae02:	4293      	cmp	r3, r2
 800ae04:	d115      	bne.n	800ae32 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800ae06:	2300      	movs	r3, #0
 800ae08:	60fb      	str	r3, [r7, #12]
 800ae0a:	4b0d      	ldr	r3, [pc, #52]	@ (800ae40 <HAL_TIM_Base_MspInit+0x10c>)
 800ae0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae0e:	4a0c      	ldr	r2, [pc, #48]	@ (800ae40 <HAL_TIM_Base_MspInit+0x10c>)
 800ae10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ae14:	6453      	str	r3, [r2, #68]	@ 0x44
 800ae16:	4b0a      	ldr	r3, [pc, #40]	@ (800ae40 <HAL_TIM_Base_MspInit+0x10c>)
 800ae18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ae1e:	60fb      	str	r3, [r7, #12]
 800ae20:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 5);
 800ae22:	2205      	movs	r2, #5
 800ae24:	2100      	movs	r1, #0
 800ae26:	2018      	movs	r0, #24
 800ae28:	f002 fbf3 	bl	800d612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800ae2c:	2018      	movs	r0, #24
 800ae2e:	f002 fc0c 	bl	800d64a <HAL_NVIC_EnableIRQ>
}
 800ae32:	bf00      	nop
 800ae34:	3720      	adds	r7, #32
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}
 800ae3a:	bf00      	nop
 800ae3c:	40000400 	.word	0x40000400
 800ae40:	40023800 	.word	0x40023800
 800ae44:	40000800 	.word	0x40000800
 800ae48:	40000c00 	.word	0x40000c00
 800ae4c:	40001000 	.word	0x40001000
 800ae50:	40014000 	.word	0x40014000

0800ae54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b08c      	sub	sp, #48	@ 0x30
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ae5c:	f107 031c 	add.w	r3, r7, #28
 800ae60:	2200      	movs	r2, #0
 800ae62:	601a      	str	r2, [r3, #0]
 800ae64:	605a      	str	r2, [r3, #4]
 800ae66:	609a      	str	r2, [r3, #8]
 800ae68:	60da      	str	r2, [r3, #12]
 800ae6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	4a3a      	ldr	r2, [pc, #232]	@ (800af5c <HAL_UART_MspInit+0x108>)
 800ae72:	4293      	cmp	r3, r2
 800ae74:	d134      	bne.n	800aee0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800ae76:	2300      	movs	r3, #0
 800ae78:	61bb      	str	r3, [r7, #24]
 800ae7a:	4b39      	ldr	r3, [pc, #228]	@ (800af60 <HAL_UART_MspInit+0x10c>)
 800ae7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae7e:	4a38      	ldr	r2, [pc, #224]	@ (800af60 <HAL_UART_MspInit+0x10c>)
 800ae80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ae84:	6413      	str	r3, [r2, #64]	@ 0x40
 800ae86:	4b36      	ldr	r3, [pc, #216]	@ (800af60 <HAL_UART_MspInit+0x10c>)
 800ae88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ae8e:	61bb      	str	r3, [r7, #24]
 800ae90:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ae92:	2300      	movs	r3, #0
 800ae94:	617b      	str	r3, [r7, #20]
 800ae96:	4b32      	ldr	r3, [pc, #200]	@ (800af60 <HAL_UART_MspInit+0x10c>)
 800ae98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae9a:	4a31      	ldr	r2, [pc, #196]	@ (800af60 <HAL_UART_MspInit+0x10c>)
 800ae9c:	f043 0301 	orr.w	r3, r3, #1
 800aea0:	6313      	str	r3, [r2, #48]	@ 0x30
 800aea2:	4b2f      	ldr	r3, [pc, #188]	@ (800af60 <HAL_UART_MspInit+0x10c>)
 800aea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aea6:	f003 0301 	and.w	r3, r3, #1
 800aeaa:	617b      	str	r3, [r7, #20]
 800aeac:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = DBUG_TX_U2_Pin|DBUG_RX_U2_Pin;
 800aeae:	230c      	movs	r3, #12
 800aeb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aeb2:	2302      	movs	r3, #2
 800aeb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aeba:	2300      	movs	r3, #0
 800aebc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800aebe:	2307      	movs	r3, #7
 800aec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aec2:	f107 031c 	add.w	r3, r7, #28
 800aec6:	4619      	mov	r1, r3
 800aec8:	4826      	ldr	r0, [pc, #152]	@ (800af64 <HAL_UART_MspInit+0x110>)
 800aeca:	f002 ff53 	bl	800dd74 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 4);
 800aece:	2204      	movs	r2, #4
 800aed0:	2100      	movs	r1, #0
 800aed2:	2026      	movs	r0, #38	@ 0x26
 800aed4:	f002 fb9d 	bl	800d612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800aed8:	2026      	movs	r0, #38	@ 0x26
 800aeda:	f002 fbb6 	bl	800d64a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800aede:	e038      	b.n	800af52 <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART6)
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	4a20      	ldr	r2, [pc, #128]	@ (800af68 <HAL_UART_MspInit+0x114>)
 800aee6:	4293      	cmp	r3, r2
 800aee8:	d133      	bne.n	800af52 <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART6_CLK_ENABLE();
 800aeea:	2300      	movs	r3, #0
 800aeec:	613b      	str	r3, [r7, #16]
 800aeee:	4b1c      	ldr	r3, [pc, #112]	@ (800af60 <HAL_UART_MspInit+0x10c>)
 800aef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aef2:	4a1b      	ldr	r2, [pc, #108]	@ (800af60 <HAL_UART_MspInit+0x10c>)
 800aef4:	f043 0320 	orr.w	r3, r3, #32
 800aef8:	6453      	str	r3, [r2, #68]	@ 0x44
 800aefa:	4b19      	ldr	r3, [pc, #100]	@ (800af60 <HAL_UART_MspInit+0x10c>)
 800aefc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aefe:	f003 0320 	and.w	r3, r3, #32
 800af02:	613b      	str	r3, [r7, #16]
 800af04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800af06:	2300      	movs	r3, #0
 800af08:	60fb      	str	r3, [r7, #12]
 800af0a:	4b15      	ldr	r3, [pc, #84]	@ (800af60 <HAL_UART_MspInit+0x10c>)
 800af0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af0e:	4a14      	ldr	r2, [pc, #80]	@ (800af60 <HAL_UART_MspInit+0x10c>)
 800af10:	f043 0304 	orr.w	r3, r3, #4
 800af14:	6313      	str	r3, [r2, #48]	@ 0x30
 800af16:	4b12      	ldr	r3, [pc, #72]	@ (800af60 <HAL_UART_MspInit+0x10c>)
 800af18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af1a:	f003 0304 	and.w	r3, r3, #4
 800af1e:	60fb      	str	r3, [r7, #12]
 800af20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RS485_TX_U6_Pin|RS485_RX_U6_Pin;
 800af22:	23c0      	movs	r3, #192	@ 0xc0
 800af24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af26:	2302      	movs	r3, #2
 800af28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af2a:	2300      	movs	r3, #0
 800af2c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800af2e:	2303      	movs	r3, #3
 800af30:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800af32:	2308      	movs	r3, #8
 800af34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800af36:	f107 031c 	add.w	r3, r7, #28
 800af3a:	4619      	mov	r1, r3
 800af3c:	480b      	ldr	r0, [pc, #44]	@ (800af6c <HAL_UART_MspInit+0x118>)
 800af3e:	f002 ff19 	bl	800dd74 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800af42:	2200      	movs	r2, #0
 800af44:	2100      	movs	r1, #0
 800af46:	2047      	movs	r0, #71	@ 0x47
 800af48:	f002 fb63 	bl	800d612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800af4c:	2047      	movs	r0, #71	@ 0x47
 800af4e:	f002 fb7c 	bl	800d64a <HAL_NVIC_EnableIRQ>
}
 800af52:	bf00      	nop
 800af54:	3730      	adds	r7, #48	@ 0x30
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}
 800af5a:	bf00      	nop
 800af5c:	40004400 	.word	0x40004400
 800af60:	40023800 	.word	0x40023800
 800af64:	40020000 	.word	0x40020000
 800af68:	40011400 	.word	0x40011400
 800af6c:	40020800 	.word	0x40020800

0800af70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800af70:	b480      	push	{r7}
 800af72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800af74:	bf00      	nop
 800af76:	e7fd      	b.n	800af74 <NMI_Handler+0x4>

0800af78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	DEBUG_SPRINT_NL("\r\n----------HardFault----------");
 800af7c:	4802      	ldr	r0, [pc, #8]	@ (800af88 <HardFault_Handler+0x10>)
 800af7e:	f000 fb33 	bl	800b5e8 <DEBUG_SPRINT_NL>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800af82:	bf00      	nop
 800af84:	e7fd      	b.n	800af82 <HardFault_Handler+0xa>
 800af86:	bf00      	nop
 800af88:	08013778 	.word	0x08013778

0800af8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	DEBUG_SPRINT_NL("\r\n----------MemManageFault----------");
 800af90:	4802      	ldr	r0, [pc, #8]	@ (800af9c <MemManage_Handler+0x10>)
 800af92:	f000 fb29 	bl	800b5e8 <DEBUG_SPRINT_NL>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800af96:	bf00      	nop
 800af98:	e7fd      	b.n	800af96 <MemManage_Handler+0xa>
 800af9a:	bf00      	nop
 800af9c:	08013798 	.word	0x08013798

0800afa0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	DEBUG_SPRINT_NL("\r\n----------BusFault----------");
 800afa4:	4802      	ldr	r0, [pc, #8]	@ (800afb0 <BusFault_Handler+0x10>)
 800afa6:	f000 fb1f 	bl	800b5e8 <DEBUG_SPRINT_NL>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800afaa:	bf00      	nop
 800afac:	e7fd      	b.n	800afaa <BusFault_Handler+0xa>
 800afae:	bf00      	nop
 800afb0:	080137c0 	.word	0x080137c0

0800afb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	DEBUG_SPRINT_NL("\r\n----------UsageFault----------");
 800afb8:	4802      	ldr	r0, [pc, #8]	@ (800afc4 <UsageFault_Handler+0x10>)
 800afba:	f000 fb15 	bl	800b5e8 <DEBUG_SPRINT_NL>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800afbe:	bf00      	nop
 800afc0:	e7fd      	b.n	800afbe <UsageFault_Handler+0xa>
 800afc2:	bf00      	nop
 800afc4:	080137e0 	.word	0x080137e0

0800afc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800afc8:	b480      	push	{r7}
 800afca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800afcc:	bf00      	nop
 800afce:	46bd      	mov	sp, r7
 800afd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd4:	4770      	bx	lr

0800afd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800afd6:	b480      	push	{r7}
 800afd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800afda:	bf00      	nop
 800afdc:	46bd      	mov	sp, r7
 800afde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe2:	4770      	bx	lr

0800afe4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800afe4:	b480      	push	{r7}
 800afe6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800afe8:	bf00      	nop
 800afea:	46bd      	mov	sp, r7
 800afec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff0:	4770      	bx	lr

0800aff2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800aff2:	b580      	push	{r7, lr}
 800aff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800aff6:	f002 f9ed 	bl	800d3d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800affa:	bf00      	nop
 800affc:	bd80      	pop	{r7, pc}
	...

0800b000 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */
	TS_CatchOVF(&timStamp);
 800b004:	4803      	ldr	r0, [pc, #12]	@ (800b014 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 800b006:	f7ff fad7 	bl	800a5b8 <TS_CatchOVF>
  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 800b00a:	4803      	ldr	r0, [pc, #12]	@ (800b018 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 800b00c:	f003 ff8c 	bl	800ef28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800b010:	bf00      	nop
 800b012:	bd80      	pop	{r7, pc}
 800b014:	20000c08 	.word	0x20000c08
 800b018:	20000594 	.word	0x20000594

0800b01c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	/*-------- for 1.5 char -------------*/
	MBS_ChackRcvdFrame(&gVar.mbSerial, &gVar.mbRTUSlave);		// DEPRECATED: Sept 20, 2023
 800b020:	4904      	ldr	r1, [pc, #16]	@ (800b034 <TIM4_IRQHandler+0x18>)
 800b022:	4805      	ldr	r0, [pc, #20]	@ (800b038 <TIM4_IRQHandler+0x1c>)
 800b024:	f002 f812 	bl	800d04c <MBS_ChackRcvdFrame>
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800b028:	4804      	ldr	r0, [pc, #16]	@ (800b03c <TIM4_IRQHandler+0x20>)
 800b02a:	f003 ff7d 	bl	800ef28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800b02e:	bf00      	nop
 800b030:	bd80      	pop	{r7, pc}
 800b032:	bf00      	nop
 800b034:	200008b0 	.word	0x200008b0
 800b038:	2000066c 	.word	0x2000066c
 800b03c:	200004bc 	.word	0x200004bc

0800b040 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800b044:	4802      	ldr	r0, [pc, #8]	@ (800b050 <USART2_IRQHandler+0x10>)
 800b046:	f004 fc0b 	bl	800f860 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800b04a:	bf00      	nop
 800b04c:	bd80      	pop	{r7, pc}
 800b04e:	bf00      	nop
 800b050:	200005dc 	.word	0x200005dc

0800b054 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	/*-------- for 3.5 char -------------*/
	MBS_StopReceiving(&gVar.mbSerial);
 800b058:	4803      	ldr	r0, [pc, #12]	@ (800b068 <TIM5_IRQHandler+0x14>)
 800b05a:	f001 ff9f 	bl	800cf9c <MBS_StopReceiving>
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800b05e:	4803      	ldr	r0, [pc, #12]	@ (800b06c <TIM5_IRQHandler+0x18>)
 800b060:	f003 ff62 	bl	800ef28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800b064:	bf00      	nop
 800b066:	bd80      	pop	{r7, pc}
 800b068:	2000066c 	.word	0x2000066c
 800b06c:	20000504 	.word	0x20000504

0800b070 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	MBS_Receive(&gVar.mbSerial);
 800b074:	4803      	ldr	r0, [pc, #12]	@ (800b084 <USART6_IRQHandler+0x14>)
 800b076:	f001 ff0d 	bl	800ce94 <MBS_Receive>
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800b07a:	4803      	ldr	r0, [pc, #12]	@ (800b088 <USART6_IRQHandler+0x18>)
 800b07c:	f004 fbf0 	bl	800f860 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */
//
  /* USER CODE END USART6_IRQn 1 */
}
 800b080:	bf00      	nop
 800b082:	bd80      	pop	{r7, pc}
 800b084:	2000066c 	.word	0x2000066c
 800b088:	20000624 	.word	0x20000624

0800b08c <HAL_UART_ErrorCallback>:

/* USER CODE BEGIN 1 */

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b092      	sub	sp, #72	@ 0x48
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART6) {
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	4a5c      	ldr	r2, [pc, #368]	@ (800b20c <HAL_UART_ErrorCallback+0x180>)
 800b09a:	4293      	cmp	r3, r2
 800b09c:	f040 80b2 	bne.w	800b204 <HAL_UART_ErrorCallback+0x178>
		char str[50] = {0};
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	60fb      	str	r3, [r7, #12]
 800b0a4:	f107 0310 	add.w	r3, r7, #16
 800b0a8:	222e      	movs	r2, #46	@ 0x2e
 800b0aa:	2100      	movs	r1, #0
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	f006 f891 	bl	80111d4 <memset>
		uint8_t len = 0;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		len += sprintf(&str[len],"MB_Err: ");
 800b0b8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800b0bc:	f107 020c 	add.w	r2, r7, #12
 800b0c0:	4413      	add	r3, r2
 800b0c2:	4953      	ldr	r1, [pc, #332]	@ (800b210 <HAL_UART_ErrorCallback+0x184>)
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	f006 f801 	bl	80110cc <siprintf>
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	b2da      	uxtb	r2, r3
 800b0ce:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800b0d2:	4413      	add	r3, r2
 800b0d4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	//	len = sprintf(str,"MB_ERR[%ld]: ",huart2.ErrorCode);
		if(huart->ErrorCode & HAL_UART_ERROR_PE){
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0dc:	f003 0301 	and.w	r3, r3, #1
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d00f      	beq.n	800b104 <HAL_UART_ErrorCallback+0x78>
			len += sprintf(&str[len],"PE, ");
 800b0e4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800b0e8:	f107 020c 	add.w	r2, r7, #12
 800b0ec:	4413      	add	r3, r2
 800b0ee:	4949      	ldr	r1, [pc, #292]	@ (800b214 <HAL_UART_ErrorCallback+0x188>)
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f005 ffeb 	bl	80110cc <siprintf>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	b2da      	uxtb	r2, r3
 800b0fa:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800b0fe:	4413      	add	r3, r2
 800b100:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		} if(huart->ErrorCode & HAL_UART_ERROR_NE){
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b108:	f003 0302 	and.w	r3, r3, #2
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d00f      	beq.n	800b130 <HAL_UART_ErrorCallback+0xa4>
			len += sprintf(&str[len],"NE, ");
 800b110:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800b114:	f107 020c 	add.w	r2, r7, #12
 800b118:	4413      	add	r3, r2
 800b11a:	493f      	ldr	r1, [pc, #252]	@ (800b218 <HAL_UART_ErrorCallback+0x18c>)
 800b11c:	4618      	mov	r0, r3
 800b11e:	f005 ffd5 	bl	80110cc <siprintf>
 800b122:	4603      	mov	r3, r0
 800b124:	b2da      	uxtb	r2, r3
 800b126:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800b12a:	4413      	add	r3, r2
 800b12c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		} if(huart->ErrorCode & HAL_UART_ERROR_FE){
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b134:	f003 0304 	and.w	r3, r3, #4
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d00f      	beq.n	800b15c <HAL_UART_ErrorCallback+0xd0>
			len += sprintf(&str[len],"FE, ");
 800b13c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800b140:	f107 020c 	add.w	r2, r7, #12
 800b144:	4413      	add	r3, r2
 800b146:	4935      	ldr	r1, [pc, #212]	@ (800b21c <HAL_UART_ErrorCallback+0x190>)
 800b148:	4618      	mov	r0, r3
 800b14a:	f005 ffbf 	bl	80110cc <siprintf>
 800b14e:	4603      	mov	r3, r0
 800b150:	b2da      	uxtb	r2, r3
 800b152:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800b156:	4413      	add	r3, r2
 800b158:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		} if(huart->ErrorCode & HAL_UART_ERROR_ORE){
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b160:	f003 0308 	and.w	r3, r3, #8
 800b164:	2b00      	cmp	r3, #0
 800b166:	d00f      	beq.n	800b188 <HAL_UART_ErrorCallback+0xfc>
			len += sprintf(&str[len],"OE, ");
 800b168:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800b16c:	f107 020c 	add.w	r2, r7, #12
 800b170:	4413      	add	r3, r2
 800b172:	492b      	ldr	r1, [pc, #172]	@ (800b220 <HAL_UART_ErrorCallback+0x194>)
 800b174:	4618      	mov	r0, r3
 800b176:	f005 ffa9 	bl	80110cc <siprintf>
 800b17a:	4603      	mov	r3, r0
 800b17c:	b2da      	uxtb	r2, r3
 800b17e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800b182:	4413      	add	r3, r2
 800b184:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

		} if(huart->ErrorCode & HAL_UART_ERROR_DMA){
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b18c:	f003 0310 	and.w	r3, r3, #16
 800b190:	2b00      	cmp	r3, #0
 800b192:	d00f      	beq.n	800b1b4 <HAL_UART_ErrorCallback+0x128>
			len += sprintf(&str[len],"DMA, ");
 800b194:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800b198:	f107 020c 	add.w	r2, r7, #12
 800b19c:	4413      	add	r3, r2
 800b19e:	4921      	ldr	r1, [pc, #132]	@ (800b224 <HAL_UART_ErrorCallback+0x198>)
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	f005 ff93 	bl	80110cc <siprintf>
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	b2da      	uxtb	r2, r3
 800b1aa:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800b1ae:	4413      	add	r3, r2
 800b1b0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		}

		len += sprintf(&str[len],"\r\n");
 800b1b4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800b1b8:	f107 020c 	add.w	r2, r7, #12
 800b1bc:	4413      	add	r3, r2
 800b1be:	491a      	ldr	r1, [pc, #104]	@ (800b228 <HAL_UART_ErrorCallback+0x19c>)
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f005 ff83 	bl	80110cc <siprintf>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	b2da      	uxtb	r2, r3
 800b1ca:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800b1ce:	4413      	add	r3, r2
 800b1d0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		DEBUG_PRINT(str);
 800b1d4:	f107 030c 	add.w	r3, r7, #12
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f000 f9a7 	bl	800b52c <DEBUG_PRINT>

//		gVar.mbSerial.errCount++;

		__HAL_UART_CLEAR_OREFLAG(huart);
 800b1de:	2300      	movs	r3, #0
 800b1e0:	643b      	str	r3, [r7, #64]	@ 0x40
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	643b      	str	r3, [r7, #64]	@ 0x40
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	685b      	ldr	r3, [r3, #4]
 800b1f0:	643b      	str	r3, [r7, #64]	@ 0x40
 800b1f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
		__HAL_UART_ENABLE_IT(huart,UART_IT_RXNE);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	68da      	ldr	r2, [r3, #12]
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	f042 0220 	orr.w	r2, r2, #32
 800b202:	60da      	str	r2, [r3, #12]
	}
}
 800b204:	bf00      	nop
 800b206:	3748      	adds	r7, #72	@ 0x48
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}
 800b20c:	40011400 	.word	0x40011400
 800b210:	08013804 	.word	0x08013804
 800b214:	08013810 	.word	0x08013810
 800b218:	08013818 	.word	0x08013818
 800b21c:	08013820 	.word	0x08013820
 800b220:	08013828 	.word	0x08013828
 800b224:	08013830 	.word	0x08013830
 800b228:	08013838 	.word	0x08013838

0800b22c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800b22c:	b480      	push	{r7}
 800b22e:	af00      	add	r7, sp, #0
	return 1;
 800b230:	2301      	movs	r3, #1
}
 800b232:	4618      	mov	r0, r3
 800b234:	46bd      	mov	sp, r7
 800b236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23a:	4770      	bx	lr

0800b23c <_kill>:

int _kill(int pid, int sig)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b082      	sub	sp, #8
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800b246:	f006 f827 	bl	8011298 <__errno>
 800b24a:	4603      	mov	r3, r0
 800b24c:	2216      	movs	r2, #22
 800b24e:	601a      	str	r2, [r3, #0]
	return -1;
 800b250:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b254:	4618      	mov	r0, r3
 800b256:	3708      	adds	r7, #8
 800b258:	46bd      	mov	sp, r7
 800b25a:	bd80      	pop	{r7, pc}

0800b25c <_exit>:

void _exit (int status)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b082      	sub	sp, #8
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800b264:	f04f 31ff 	mov.w	r1, #4294967295
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f7ff ffe7 	bl	800b23c <_kill>
	while (1) {}		/* Make sure we hang here */
 800b26e:	bf00      	nop
 800b270:	e7fd      	b.n	800b26e <_exit+0x12>

0800b272 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b272:	b580      	push	{r7, lr}
 800b274:	b086      	sub	sp, #24
 800b276:	af00      	add	r7, sp, #0
 800b278:	60f8      	str	r0, [r7, #12]
 800b27a:	60b9      	str	r1, [r7, #8]
 800b27c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b27e:	2300      	movs	r3, #0
 800b280:	617b      	str	r3, [r7, #20]
 800b282:	e00a      	b.n	800b29a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800b284:	f3af 8000 	nop.w
 800b288:	4601      	mov	r1, r0
 800b28a:	68bb      	ldr	r3, [r7, #8]
 800b28c:	1c5a      	adds	r2, r3, #1
 800b28e:	60ba      	str	r2, [r7, #8]
 800b290:	b2ca      	uxtb	r2, r1
 800b292:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b294:	697b      	ldr	r3, [r7, #20]
 800b296:	3301      	adds	r3, #1
 800b298:	617b      	str	r3, [r7, #20]
 800b29a:	697a      	ldr	r2, [r7, #20]
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	429a      	cmp	r2, r3
 800b2a0:	dbf0      	blt.n	800b284 <_read+0x12>
	}

return len;
 800b2a2:	687b      	ldr	r3, [r7, #4]
}
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	3718      	adds	r7, #24
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	bd80      	pop	{r7, pc}

0800b2ac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b086      	sub	sp, #24
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	60f8      	str	r0, [r7, #12]
 800b2b4:	60b9      	str	r1, [r7, #8]
 800b2b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	617b      	str	r3, [r7, #20]
 800b2bc:	e009      	b.n	800b2d2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	1c5a      	adds	r2, r3, #1
 800b2c2:	60ba      	str	r2, [r7, #8]
 800b2c4:	781b      	ldrb	r3, [r3, #0]
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f7ff f9a2 	bl	800a610 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b2cc:	697b      	ldr	r3, [r7, #20]
 800b2ce:	3301      	adds	r3, #1
 800b2d0:	617b      	str	r3, [r7, #20]
 800b2d2:	697a      	ldr	r2, [r7, #20]
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	429a      	cmp	r2, r3
 800b2d8:	dbf1      	blt.n	800b2be <_write+0x12>
	}
	return len;
 800b2da:	687b      	ldr	r3, [r7, #4]
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3718      	adds	r7, #24
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}

0800b2e4 <_close>:

int _close(int file)
{
 800b2e4:	b480      	push	{r7}
 800b2e6:	b083      	sub	sp, #12
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
	return -1;
 800b2ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	370c      	adds	r7, #12
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fa:	4770      	bx	lr

0800b2fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 800b2fc:	b480      	push	{r7}
 800b2fe:	b083      	sub	sp, #12
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
 800b304:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800b30c:	605a      	str	r2, [r3, #4]
	return 0;
 800b30e:	2300      	movs	r3, #0
}
 800b310:	4618      	mov	r0, r3
 800b312:	370c      	adds	r7, #12
 800b314:	46bd      	mov	sp, r7
 800b316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31a:	4770      	bx	lr

0800b31c <_isatty>:

int _isatty(int file)
{
 800b31c:	b480      	push	{r7}
 800b31e:	b083      	sub	sp, #12
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
	return 1;
 800b324:	2301      	movs	r3, #1
}
 800b326:	4618      	mov	r0, r3
 800b328:	370c      	adds	r7, #12
 800b32a:	46bd      	mov	sp, r7
 800b32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b330:	4770      	bx	lr

0800b332 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800b332:	b480      	push	{r7}
 800b334:	b085      	sub	sp, #20
 800b336:	af00      	add	r7, sp, #0
 800b338:	60f8      	str	r0, [r7, #12]
 800b33a:	60b9      	str	r1, [r7, #8]
 800b33c:	607a      	str	r2, [r7, #4]
	return 0;
 800b33e:	2300      	movs	r3, #0
}
 800b340:	4618      	mov	r0, r3
 800b342:	3714      	adds	r7, #20
 800b344:	46bd      	mov	sp, r7
 800b346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34a:	4770      	bx	lr

0800b34c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b086      	sub	sp, #24
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800b354:	4a14      	ldr	r2, [pc, #80]	@ (800b3a8 <_sbrk+0x5c>)
 800b356:	4b15      	ldr	r3, [pc, #84]	@ (800b3ac <_sbrk+0x60>)
 800b358:	1ad3      	subs	r3, r2, r3
 800b35a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800b35c:	697b      	ldr	r3, [r7, #20]
 800b35e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800b360:	4b13      	ldr	r3, [pc, #76]	@ (800b3b0 <_sbrk+0x64>)
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d102      	bne.n	800b36e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800b368:	4b11      	ldr	r3, [pc, #68]	@ (800b3b0 <_sbrk+0x64>)
 800b36a:	4a12      	ldr	r2, [pc, #72]	@ (800b3b4 <_sbrk+0x68>)
 800b36c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800b36e:	4b10      	ldr	r3, [pc, #64]	@ (800b3b0 <_sbrk+0x64>)
 800b370:	681a      	ldr	r2, [r3, #0]
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	4413      	add	r3, r2
 800b376:	693a      	ldr	r2, [r7, #16]
 800b378:	429a      	cmp	r2, r3
 800b37a:	d207      	bcs.n	800b38c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800b37c:	f005 ff8c 	bl	8011298 <__errno>
 800b380:	4603      	mov	r3, r0
 800b382:	220c      	movs	r2, #12
 800b384:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800b386:	f04f 33ff 	mov.w	r3, #4294967295
 800b38a:	e009      	b.n	800b3a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800b38c:	4b08      	ldr	r3, [pc, #32]	@ (800b3b0 <_sbrk+0x64>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800b392:	4b07      	ldr	r3, [pc, #28]	@ (800b3b0 <_sbrk+0x64>)
 800b394:	681a      	ldr	r2, [r3, #0]
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	4413      	add	r3, r2
 800b39a:	4a05      	ldr	r2, [pc, #20]	@ (800b3b0 <_sbrk+0x64>)
 800b39c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800b39e:	68fb      	ldr	r3, [r7, #12]
}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	3718      	adds	r7, #24
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}
 800b3a8:	20020000 	.word	0x20020000
 800b3ac:	00000400 	.word	0x00000400
 800b3b0:	20000c2c 	.word	0x20000c2c
 800b3b4:	20000de0 	.word	0x20000de0

0800b3b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b3bc:	4b06      	ldr	r3, [pc, #24]	@ (800b3d8 <SystemInit+0x20>)
 800b3be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b3c2:	4a05      	ldr	r2, [pc, #20]	@ (800b3d8 <SystemInit+0x20>)
 800b3c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b3c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800b3cc:	bf00      	nop
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d4:	4770      	bx	lr
 800b3d6:	bf00      	nop
 800b3d8:	e000ed00 	.word	0xe000ed00

0800b3dc <Debounce_Init>:
 */

#include "Debounce.h"

/*@Brief Debounce main function*/
void Debounce_Init(Debounce_ts *debounce, uint32_t delay){
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b082      	sub	sp, #8
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
 800b3e4:	6039      	str	r1, [r7, #0]
	Debounce_Clear(debounce);
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f000 f807 	bl	800b3fa <Debounce_Clear>
	debounce->delay = delay;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	683a      	ldr	r2, [r7, #0]
 800b3f0:	609a      	str	r2, [r3, #8]
}
 800b3f2:	bf00      	nop
 800b3f4:	3708      	adds	r7, #8
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}

0800b3fa <Debounce_Clear>:

void Debounce_Clear(Debounce_ts *debounce){
 800b3fa:	b480      	push	{r7}
 800b3fc:	b083      	sub	sp, #12
 800b3fe:	af00      	add	r7, sp, #0
 800b400:	6078      	str	r0, [r7, #4]
	debounce->lastState = 0;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2200      	movs	r2, #0
 800b406:	735a      	strb	r2, [r3, #13]
	debounce->state = 0;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2200      	movs	r2, #0
 800b40c:	731a      	strb	r2, [r3, #12]
	debounce->lastTime = 0;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2200      	movs	r2, #0
 800b412:	605a      	str	r2, [r3, #4]
	debounce->currentTime = 0;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2200      	movs	r2, #0
 800b418:	601a      	str	r2, [r3, #0]
}
 800b41a:	bf00      	nop
 800b41c:	370c      	adds	r7, #12
 800b41e:	46bd      	mov	sp, r7
 800b420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b424:	4770      	bx	lr

0800b426 <Debounce>:

/*@Brief Debounce main function*/
uint8_t Debounce(Debounce_ts *debounce, uint32_t currentTime, uint8_t inputState){
 800b426:	b480      	push	{r7}
 800b428:	b087      	sub	sp, #28
 800b42a:	af00      	add	r7, sp, #0
 800b42c:	60f8      	str	r0, [r7, #12]
 800b42e:	60b9      	str	r1, [r7, #8]
 800b430:	4613      	mov	r3, r2
 800b432:	71fb      	strb	r3, [r7, #7]
	uint8_t ret = 0;
 800b434:	2300      	movs	r3, #0
 800b436:	75fb      	strb	r3, [r7, #23]
	if(debounce->state == inputState) {	return ret;	}
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	7b1b      	ldrb	r3, [r3, #12]
 800b43c:	79fa      	ldrb	r2, [r7, #7]
 800b43e:	429a      	cmp	r2, r3
 800b440:	d101      	bne.n	800b446 <Debounce+0x20>
 800b442:	7dfb      	ldrb	r3, [r7, #23]
 800b444:	e022      	b.n	800b48c <Debounce+0x66>
	else { debounce->currentTime = currentTime;}
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	68ba      	ldr	r2, [r7, #8]
 800b44a:	601a      	str	r2, [r3, #0]

	/*Timeout Check*/
	if((debounce->currentTime - debounce->lastTime) >= debounce->delay){
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	681a      	ldr	r2, [r3, #0]
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	685b      	ldr	r3, [r3, #4]
 800b454:	1ad2      	subs	r2, r2, r3
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	689b      	ldr	r3, [r3, #8]
 800b45a:	429a      	cmp	r2, r3
 800b45c:	d315      	bcc.n	800b48a <Debounce+0x64>
		debounce->state = inputState;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	79fa      	ldrb	r2, [r7, #7]
 800b462:	731a      	strb	r2, [r3, #12]
		if(debounce->state != debounce->lastState){
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	7b1a      	ldrb	r2, [r3, #12]
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	7b5b      	ldrb	r3, [r3, #13]
 800b46c:	429a      	cmp	r2, r3
 800b46e:	d006      	beq.n	800b47e <Debounce+0x58>
			// Input state has changed
			debounce->lastState = debounce->state;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	7b1a      	ldrb	r2, [r3, #12]
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	735a      	strb	r2, [r3, #13]
			ret = 1;
 800b478:	2301      	movs	r3, #1
 800b47a:	75fb      	strb	r3, [r7, #23]
 800b47c:	e001      	b.n	800b482 <Debounce+0x5c>
		}else{
			ret = 0;
 800b47e:	2300      	movs	r3, #0
 800b480:	75fb      	strb	r3, [r7, #23]
		}
		debounce->lastTime = debounce->currentTime;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	681a      	ldr	r2, [r3, #0]
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	605a      	str	r2, [r3, #4]
	}

	return ret;
 800b48a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b48c:	4618      	mov	r0, r3
 800b48e:	371c      	adds	r7, #28
 800b490:	46bd      	mov	sp, r7
 800b492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b496:	4770      	bx	lr

0800b498 <DEBUG_INIT>:
  * @brief  Initializes Debug port
   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *	               the configuration information for the specified UART module.
  * @retval HAL status
  */
void DEBUG_INIT(UART_HandleTypeDef *_huart, Debug_ts *_debug){
 800b498:	b580      	push	{r7, lr}
 800b49a:	b082      	sub	sp, #8
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
 800b4a0:	6039      	str	r1, [r7, #0]
	huart = _huart;
 800b4a2:	4a19      	ldr	r2, [pc, #100]	@ (800b508 <DEBUG_INIT+0x70>)
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6013      	str	r3, [r2, #0]
	_dbg = _debug;
 800b4a8:	4a18      	ldr	r2, [pc, #96]	@ (800b50c <DEBUG_INIT+0x74>)
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	6013      	str	r3, [r2, #0]
	_dbg->len = 0;
 800b4ae:	4b17      	ldr	r3, [pc, #92]	@ (800b50c <DEBUG_INIT+0x74>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	805a      	strh	r2, [r3, #2]
	_dbg->rxBuffSize = 0;
 800b4b6:	4b15      	ldr	r3, [pc, #84]	@ (800b50c <DEBUG_INIT+0x74>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	f883 2284 	strb.w	r2, [r3, #644]	@ 0x284
	_dbg->isDataRcvd = 0;
 800b4c0:	4b12      	ldr	r3, [pc, #72]	@ (800b50c <DEBUG_INIT+0x74>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	f883 2285 	strb.w	r2, [r3, #645]	@ 0x285
	memset(_dbg->str, 0, sizeof(_dbg->str));
 800b4ca:	4b10      	ldr	r3, [pc, #64]	@ (800b50c <DEBUG_INIT+0x74>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	3304      	adds	r3, #4
 800b4d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b4d4:	2100      	movs	r1, #0
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	f005 fe7c 	bl	80111d4 <memset>
	memset(_dbg->rxBuff, 0, DBUG_RX_BUFF_SIZE);
 800b4dc:	4b0b      	ldr	r3, [pc, #44]	@ (800b50c <DEBUG_INIT+0x74>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 800b4e4:	2280      	movs	r2, #128	@ 0x80
 800b4e6:	2100      	movs	r1, #0
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	f005 fe73 	bl	80111d4 <memset>
//	memset(_dbg->rxMsg, 0, DBUG_RX_BUFF_SIZE);
	__HAL_UART_ENABLE_IT(_huart, UART_IT_RXNE);		// enable uart receive interrupt
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	68da      	ldr	r2, [r3, #12]
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	f042 0220 	orr.w	r2, r2, #32
 800b4fc:	60da      	str	r2, [r3, #12]
//	DEBUG_RcvDMAStart(_dbg->rxBuff, DBUG_RX_BUFF_SIZE);

}
 800b4fe:	bf00      	nop
 800b500:	3708      	adds	r7, #8
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}
 800b506:	bf00      	nop
 800b508:	20000c30 	.word	0x20000c30
 800b50c:	20000c34 	.word	0x20000c34

0800b510 <DEBUG_ENABLE>:
 * This function sets the `enable` flag of the `debug` structure
 * to indicate that debugging is enabled.
 *
 * @return void No return value.
 */
void DEBUG_ENABLE(void){
 800b510:	b480      	push	{r7}
 800b512:	af00      	add	r7, sp, #0
	_dbg->enable = DBUG_ENABLED;
 800b514:	4b04      	ldr	r3, [pc, #16]	@ (800b528 <DEBUG_ENABLE+0x18>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	2201      	movs	r2, #1
 800b51a:	701a      	strb	r2, [r3, #0]
}
 800b51c:	bf00      	nop
 800b51e:	46bd      	mov	sp, r7
 800b520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b524:	4770      	bx	lr
 800b526:	bf00      	nop
 800b528:	20000c34 	.word	0x20000c34

0800b52c <DEBUG_PRINT>:
/**
  * @brief  Prints string
  * @param  pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @retval HAL status
  */
void DEBUG_PRINT(const char *pData){
 800b52c:	b5b0      	push	{r4, r5, r7, lr}
 800b52e:	b084      	sub	sp, #16
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
	if(_dbg->enable == DBUG_ENABLED){
 800b534:	4b12      	ldr	r3, [pc, #72]	@ (800b580 <DEBUG_PRINT+0x54>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	781b      	ldrb	r3, [r3, #0]
 800b53a:	2b01      	cmp	r3, #1
 800b53c:	d11c      	bne.n	800b578 <DEBUG_PRINT+0x4c>
		int len = strlen(pData);
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f7fc fdce 	bl	80080e0 <strlen>
 800b544:	4603      	mov	r3, r0
 800b546:	60fb      	str	r3, [r7, #12]
		if(len > 0U){
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d014      	beq.n	800b578 <DEBUG_PRINT+0x4c>

			HAL_UART_Transmit(huart, (uint8_t *)pData, len, DBUG_TransTimeout(len));
 800b54e:	4b0d      	ldr	r3, [pc, #52]	@ (800b584 <DEBUG_PRINT+0x58>)
 800b550:	681c      	ldr	r4, [r3, #0]
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	b29d      	uxth	r5, r3
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	b21b      	sxth	r3, r3
 800b55a:	4618      	mov	r0, r3
 800b55c:	f000 f8ea 	bl	800b734 <DBUG_TransTimeout>
 800b560:	4603      	mov	r3, r0
 800b562:	462a      	mov	r2, r5
 800b564:	6879      	ldr	r1, [r7, #4]
 800b566:	4620      	mov	r0, r4
 800b568:	f004 f8ee 	bl	800f748 <HAL_UART_Transmit>
			memset((char *)pData,0,len);
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	461a      	mov	r2, r3
 800b570:	2100      	movs	r1, #0
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f005 fe2e 	bl	80111d4 <memset>
		}
	}
}
 800b578:	bf00      	nop
 800b57a:	3710      	adds	r7, #16
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bdb0      	pop	{r4, r5, r7, pc}
 800b580:	20000c34 	.word	0x20000c34
 800b584:	20000c30 	.word	0x20000c30

0800b588 <DEBUG_SPRINT>:
/**
  * @brief  Prints string
  * @param  pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @retval HAL status
  */
int DEBUG_SPRINT(char *format, ...){
 800b588:	b40f      	push	{r0, r1, r2, r3}
 800b58a:	b580      	push	{r7, lr}
 800b58c:	b082      	sub	sp, #8
 800b58e:	af00      	add	r7, sp, #0
	if(_dbg->enable != DBUG_ENABLED) return 0;
 800b590:	4b14      	ldr	r3, [pc, #80]	@ (800b5e4 <DEBUG_SPRINT+0x5c>)
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	781b      	ldrb	r3, [r3, #0]
 800b596:	2b01      	cmp	r3, #1
 800b598:	d001      	beq.n	800b59e <DEBUG_SPRINT+0x16>
 800b59a:	2300      	movs	r3, #0
 800b59c:	e01a      	b.n	800b5d4 <DEBUG_SPRINT+0x4c>
	va_list aptr;
	int32_t ret;

	va_start(aptr, format);
 800b59e:	f107 0314 	add.w	r3, r7, #20
 800b5a2:	603b      	str	r3, [r7, #0]
	ret = vsprintf(_dbg->str, format, aptr);
 800b5a4:	4b0f      	ldr	r3, [pc, #60]	@ (800b5e4 <DEBUG_SPRINT+0x5c>)
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	3304      	adds	r3, #4
 800b5aa:	683a      	ldr	r2, [r7, #0]
 800b5ac:	6939      	ldr	r1, [r7, #16]
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f005 fe06 	bl	80111c0 <vsiprintf>
 800b5b4:	6078      	str	r0, [r7, #4]
	va_end(aptr);
	if(ret>0){
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	dd0a      	ble.n	800b5d2 <DEBUG_SPRINT+0x4a>
		_dbg->len = ret;
 800b5bc:	4b09      	ldr	r3, [pc, #36]	@ (800b5e4 <DEBUG_SPRINT+0x5c>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	687a      	ldr	r2, [r7, #4]
 800b5c2:	b292      	uxth	r2, r2
 800b5c4:	805a      	strh	r2, [r3, #2]
		DEBUG_PRINT(_dbg->str);
 800b5c6:	4b07      	ldr	r3, [pc, #28]	@ (800b5e4 <DEBUG_SPRINT+0x5c>)
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	3304      	adds	r3, #4
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	f7ff ffad 	bl	800b52c <DEBUG_PRINT>
	}

	return ret;
 800b5d2:	687b      	ldr	r3, [r7, #4]
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	3708      	adds	r7, #8
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b5de:	b004      	add	sp, #16
 800b5e0:	4770      	bx	lr
 800b5e2:	bf00      	nop
 800b5e4:	20000c34 	.word	0x20000c34

0800b5e8 <DEBUG_SPRINT_NL>:
/**
  * @brief  Prints string
  * @param  pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @retval HAL status
  */
int DEBUG_SPRINT_NL(char *format, ...){
 800b5e8:	b40f      	push	{r0, r1, r2, r3}
 800b5ea:	b580      	push	{r7, lr}
 800b5ec:	b092      	sub	sp, #72	@ 0x48
 800b5ee:	af02      	add	r7, sp, #8
	if(_dbg->enable != DBUG_ENABLED) return 0;
 800b5f0:	4b1f      	ldr	r3, [pc, #124]	@ (800b670 <DEBUG_SPRINT_NL+0x88>)
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	781b      	ldrb	r3, [r3, #0]
 800b5f6:	2b01      	cmp	r3, #1
 800b5f8:	d001      	beq.n	800b5fe <DEBUG_SPRINT_NL+0x16>
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	e030      	b.n	800b660 <DEBUG_SPRINT_NL+0x78>
	va_list aptr;
	int32_t ret;

	va_start(aptr, format);
 800b5fe:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800b602:	63bb      	str	r3, [r7, #56]	@ 0x38
	ret = vsprintf(_dbg->str, format, aptr);
 800b604:	4b1a      	ldr	r3, [pc, #104]	@ (800b670 <DEBUG_SPRINT_NL+0x88>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	3304      	adds	r3, #4
 800b60a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b60c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800b60e:	4618      	mov	r0, r3
 800b610:	f005 fdd6 	bl	80111c0 <vsiprintf>
 800b614:	63f8      	str	r0, [r7, #60]	@ 0x3c
	va_end(aptr);
	if(ret>0){
 800b616:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b618:	2b00      	cmp	r3, #0
 800b61a:	dd20      	ble.n	800b65e <DEBUG_SPRINT_NL+0x76>
		_dbg->len = ret;
 800b61c:	4b14      	ldr	r3, [pc, #80]	@ (800b670 <DEBUG_SPRINT_NL+0x88>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b622:	b292      	uxth	r2, r2
 800b624:	805a      	strh	r2, [r3, #2]
		TS_GetTime(&timStamp);
 800b626:	4813      	ldr	r0, [pc, #76]	@ (800b674 <DEBUG_SPRINT_NL+0x8c>)
 800b628:	f7fe ff44 	bl	800a4b4 <TS_GetTime>
		char temp[50];
		sprintf(temp, "%lu.%03lu.%03lu : ", timStamp.sec, timStamp.ms, timStamp.us );
 800b62c:	4b11      	ldr	r3, [pc, #68]	@ (800b674 <DEBUG_SPRINT_NL+0x8c>)
 800b62e:	695a      	ldr	r2, [r3, #20]
 800b630:	4b10      	ldr	r3, [pc, #64]	@ (800b674 <DEBUG_SPRINT_NL+0x8c>)
 800b632:	6999      	ldr	r1, [r3, #24]
 800b634:	4b0f      	ldr	r3, [pc, #60]	@ (800b674 <DEBUG_SPRINT_NL+0x8c>)
 800b636:	69db      	ldr	r3, [r3, #28]
 800b638:	1d38      	adds	r0, r7, #4
 800b63a:	9300      	str	r3, [sp, #0]
 800b63c:	460b      	mov	r3, r1
 800b63e:	490e      	ldr	r1, [pc, #56]	@ (800b678 <DEBUG_SPRINT_NL+0x90>)
 800b640:	f005 fd44 	bl	80110cc <siprintf>

//		HAL_UART_Transmit(huart, (uint8_t *)temp, size, DBUG_TransTimeout(size));

		DEBUG_PRINT(temp);
 800b644:	1d3b      	adds	r3, r7, #4
 800b646:	4618      	mov	r0, r3
 800b648:	f7ff ff70 	bl	800b52c <DEBUG_PRINT>
		DEBUG_PRINT(_dbg->str);
 800b64c:	4b08      	ldr	r3, [pc, #32]	@ (800b670 <DEBUG_SPRINT_NL+0x88>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	3304      	adds	r3, #4
 800b652:	4618      	mov	r0, r3
 800b654:	f7ff ff6a 	bl	800b52c <DEBUG_PRINT>
		DEBUG_PRINT("\r\n");
 800b658:	4808      	ldr	r0, [pc, #32]	@ (800b67c <DEBUG_SPRINT_NL+0x94>)
 800b65a:	f7ff ff67 	bl	800b52c <DEBUG_PRINT>
	}

	return ret;
 800b65e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b660:	4618      	mov	r0, r3
 800b662:	3740      	adds	r7, #64	@ 0x40
 800b664:	46bd      	mov	sp, r7
 800b666:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b66a:	b004      	add	sp, #16
 800b66c:	4770      	bx	lr
 800b66e:	bf00      	nop
 800b670:	20000c34 	.word	0x20000c34
 800b674:	20000c08 	.word	0x20000c08
 800b678:	0801383c 	.word	0x0801383c
 800b67c:	08013850 	.word	0x08013850

0800b680 <DEBUG_SPRINT_APPEND>:
/**
  * @brief  Prints string
  * @param  pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @retval HAL status
  */
int DEBUG_SPRINT_APPEND(char *pData, char *format, ...){
 800b680:	b40e      	push	{r1, r2, r3}
 800b682:	b580      	push	{r7, lr}
 800b684:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 800b688:	af00      	add	r7, sp, #0
 800b68a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b68e:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800b692:	6018      	str	r0, [r3, #0]
	if(_dbg->enable != DBUG_ENABLED) return 0;
 800b694:	4b26      	ldr	r3, [pc, #152]	@ (800b730 <DEBUG_SPRINT_APPEND+0xb0>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	781b      	ldrb	r3, [r3, #0]
 800b69a:	2b01      	cmp	r3, #1
 800b69c:	d001      	beq.n	800b6a2 <DEBUG_SPRINT_APPEND+0x22>
 800b69e:	2300      	movs	r3, #0
 800b6a0:	e03d      	b.n	800b71e <DEBUG_SPRINT_APPEND+0x9e>
	va_list aptr;
	int32_t ret;
	char buff[DBUG_STR_SIZE];

	va_start(aptr, format);
 800b6a2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800b6a6:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
	ret = vsprintf(buff, format, aptr);
 800b6aa:	f107 0308 	add.w	r3, r7, #8
 800b6ae:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 800b6b2:	f8d7 121c 	ldr.w	r1, [r7, #540]	@ 0x21c
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	f005 fd82 	bl	80111c0 <vsiprintf>
 800b6bc:	f8c7 020c 	str.w	r0, [r7, #524]	@ 0x20c
	va_end(aptr);

	_dbg->len = ret+strlen(pData);
 800b6c0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b6c4:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800b6c8:	6818      	ldr	r0, [r3, #0]
 800b6ca:	f7fc fd09 	bl	80080e0 <strlen>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	b299      	uxth	r1, r3
 800b6d2:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800b6d6:	b29a      	uxth	r2, r3
 800b6d8:	4b15      	ldr	r3, [pc, #84]	@ (800b730 <DEBUG_SPRINT_APPEND+0xb0>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	440a      	add	r2, r1
 800b6de:	b292      	uxth	r2, r2
 800b6e0:	805a      	strh	r2, [r3, #2]
	if(ret>0 &&  (_dbg->len<= DBUG_STR_SIZE)){
 800b6e2:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	dd0f      	ble.n	800b70a <DEBUG_SPRINT_APPEND+0x8a>
 800b6ea:	4b11      	ldr	r3, [pc, #68]	@ (800b730 <DEBUG_SPRINT_APPEND+0xb0>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	885b      	ldrh	r3, [r3, #2]
 800b6f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b6f4:	d809      	bhi.n	800b70a <DEBUG_SPRINT_APPEND+0x8a>
		strcat((char *)pData,buff );
 800b6f6:	f107 0208 	add.w	r2, r7, #8
 800b6fa:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b6fe:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800b702:	4611      	mov	r1, r2
 800b704:	6818      	ldr	r0, [r3, #0]
 800b706:	f005 fd6d 	bl	80111e4 <strcat>
	}
	return (ret>0 ? _dbg->len : ret);
 800b70a:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800b70e:	2b00      	cmp	r3, #0
 800b710:	dd03      	ble.n	800b71a <DEBUG_SPRINT_APPEND+0x9a>
 800b712:	4b07      	ldr	r3, [pc, #28]	@ (800b730 <DEBUG_SPRINT_APPEND+0xb0>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	885b      	ldrh	r3, [r3, #2]
 800b718:	e001      	b.n	800b71e <DEBUG_SPRINT_APPEND+0x9e>
 800b71a:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
	//	DEBUG_PRINT();
}
 800b71e:	4618      	mov	r0, r3
 800b720:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 800b724:	46bd      	mov	sp, r7
 800b726:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b72a:	b003      	add	sp, #12
 800b72c:	4770      	bx	lr
 800b72e:	bf00      	nop
 800b730:	20000c34 	.word	0x20000c34

0800b734 <DBUG_TransTimeout>:
/**
  * @brief to get the transmission rate according to the number of byte to be sent
  * @param none
  * @retval return timeout in ms
  */
uint16_t DBUG_TransTimeout(int16_t len){
 800b734:	b580      	push	{r7, lr}
 800b736:	b082      	sub	sp, #8
 800b738:	af00      	add	r7, sp, #0
 800b73a:	4603      	mov	r3, r0
 800b73c:	80fb      	strh	r3, [r7, #6]
	return ceil(len*0.086806f);		// for 115200 baud rate byte transmission rate is 1.05 ms (aprox.)
 800b73e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b742:	ee07 3a90 	vmov	s15, r3
 800b746:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b74a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800b780 <DBUG_TransTimeout+0x4c>
 800b74e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b752:	ee17 0a90 	vmov	r0, s15
 800b756:	f7fc fe2f 	bl	80083b8 <__aeabi_f2d>
 800b75a:	4602      	mov	r2, r0
 800b75c:	460b      	mov	r3, r1
 800b75e:	ec43 2b10 	vmov	d0, r2, r3
 800b762:	f007 fe11 	bl	8013388 <ceil>
 800b766:	ec53 2b10 	vmov	r2, r3, d0
 800b76a:	4610      	mov	r0, r2
 800b76c:	4619      	mov	r1, r3
 800b76e:	f7fd f953 	bl	8008a18 <__aeabi_d2uiz>
 800b772:	4603      	mov	r3, r0
 800b774:	b29b      	uxth	r3, r3
}
 800b776:	4618      	mov	r0, r3
 800b778:	3708      	adds	r7, #8
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}
 800b77e:	bf00      	nop
 800b780:	3db1c758 	.word	0x3db1c758

0800b784 <MB_CalcCRC16>:
	0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
	0x40
} ;

unsigned short MB_CalcCRC16 (volatile unsigned char *puchMsg, unsigned short usDataLen ) /* The function returns the CRC as a unsigned short type   */
{
 800b784:	b480      	push	{r7}
 800b786:	b085      	sub	sp, #20
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
 800b78c:	460b      	mov	r3, r1
 800b78e:	807b      	strh	r3, [r7, #2]
//*puchMsg =  /* message to calculate CRC upon */
//usDataLen =  /* quantity of bytes in message  */

    unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized  */
 800b790:	23ff      	movs	r3, #255	@ 0xff
 800b792:	73fb      	strb	r3, [r7, #15]
    unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized  */
 800b794:	23ff      	movs	r3, #255	@ 0xff
 800b796:	73bb      	strb	r3, [r7, #14]
    unsigned uIndex ; /* will index into CRC lookup table  */
    while (usDataLen--) /* pass through message buffer  */
 800b798:	e014      	b.n	800b7c4 <MB_CalcCRC16+0x40>
    {
        uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC  */
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	1c5a      	adds	r2, r3, #1
 800b79e:	607a      	str	r2, [r7, #4]
 800b7a0:	781b      	ldrb	r3, [r3, #0]
 800b7a2:	b2da      	uxtb	r2, r3
 800b7a4:	7bbb      	ldrb	r3, [r7, #14]
 800b7a6:	4053      	eors	r3, r2
 800b7a8:	b2db      	uxtb	r3, r3
 800b7aa:	60bb      	str	r3, [r7, #8]
        uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800b7ac:	4a0f      	ldr	r2, [pc, #60]	@ (800b7ec <MB_CalcCRC16+0x68>)
 800b7ae:	68bb      	ldr	r3, [r7, #8]
 800b7b0:	4413      	add	r3, r2
 800b7b2:	781a      	ldrb	r2, [r3, #0]
 800b7b4:	7bfb      	ldrb	r3, [r7, #15]
 800b7b6:	4053      	eors	r3, r2
 800b7b8:	73bb      	strb	r3, [r7, #14]
        uchCRCHi = auchCRCLo[uIndex] ;
 800b7ba:	4a0d      	ldr	r2, [pc, #52]	@ (800b7f0 <MB_CalcCRC16+0x6c>)
 800b7bc:	68bb      	ldr	r3, [r7, #8]
 800b7be:	4413      	add	r3, r2
 800b7c0:	781b      	ldrb	r3, [r3, #0]
 800b7c2:	73fb      	strb	r3, [r7, #15]
    while (usDataLen--) /* pass through message buffer  */
 800b7c4:	887b      	ldrh	r3, [r7, #2]
 800b7c6:	1e5a      	subs	r2, r3, #1
 800b7c8:	807a      	strh	r2, [r7, #2]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d1e5      	bne.n	800b79a <MB_CalcCRC16+0x16>
    }
    return (uchCRCHi << 8 | uchCRCLo) ;
 800b7ce:	7bfb      	ldrb	r3, [r7, #15]
 800b7d0:	021b      	lsls	r3, r3, #8
 800b7d2:	b21a      	sxth	r2, r3
 800b7d4:	7bbb      	ldrb	r3, [r7, #14]
 800b7d6:	b21b      	sxth	r3, r3
 800b7d8:	4313      	orrs	r3, r2
 800b7da:	b21b      	sxth	r3, r3
 800b7dc:	b29b      	uxth	r3, r3
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	3714      	adds	r7, #20
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e8:	4770      	bx	lr
 800b7ea:	bf00      	nop
 800b7ec:	2000002c 	.word	0x2000002c
 800b7f0:	2000012c 	.word	0x2000012c

0800b7f4 <MB_setReqBuff>:
  * @brief sets requested modbus pdu buffer
  * @param buff: pdu buffer pointer
  * @param size: pdu buffer size
  * @retval none
  */
void MB_setReqBuff(uint8_t *buff, uint8_t size){
 800b7f4:	b480      	push	{r7}
 800b7f6:	b083      	sub	sp, #12
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
 800b7fc:	460b      	mov	r3, r1
 800b7fe:	70fb      	strb	r3, [r7, #3]
	mbHandle.rxBuffer = buff;
 800b800:	4a05      	ldr	r2, [pc, #20]	@ (800b818 <MB_setReqBuff+0x24>)
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6013      	str	r3, [r2, #0]
	mbHandle.rxBufferSize = size;
 800b806:	4a04      	ldr	r2, [pc, #16]	@ (800b818 <MB_setReqBuff+0x24>)
 800b808:	78fb      	ldrb	r3, [r7, #3]
 800b80a:	7213      	strb	r3, [r2, #8]

}
 800b80c:	bf00      	nop
 800b80e:	370c      	adds	r7, #12
 800b810:	46bd      	mov	sp, r7
 800b812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b816:	4770      	bx	lr
 800b818:	20000c38 	.word	0x20000c38

0800b81c <MB_setRespBuff>:
  * @param buff: pdu buffer pointer
  * @param size: pdu buffer size
  * @retval none
  */

void MB_setRespBuff(uint8_t *buff){
 800b81c:	b480      	push	{r7}
 800b81e:	b083      	sub	sp, #12
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
	mbHandle.txBuffer = buff;
 800b824:	4a04      	ldr	r2, [pc, #16]	@ (800b838 <MB_setRespBuff+0x1c>)
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6053      	str	r3, [r2, #4]
}
 800b82a:	bf00      	nop
 800b82c:	370c      	adds	r7, #12
 800b82e:	46bd      	mov	sp, r7
 800b830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b834:	4770      	bx	lr
 800b836:	bf00      	nop
 800b838:	20000c38 	.word	0x20000c38

0800b83c <MB_getRespBuffSize>:
/*
 * get response buffer size
 * */
uint8_t MB_getRespBuffSize(void){
 800b83c:	b480      	push	{r7}
 800b83e:	af00      	add	r7, sp, #0
	return mbHandle.txBufferSize;
 800b840:	4b03      	ldr	r3, [pc, #12]	@ (800b850 <MB_getRespBuffSize+0x14>)
 800b842:	7a5b      	ldrb	r3, [r3, #9]
}
 800b844:	4618      	mov	r0, r3
 800b846:	46bd      	mov	sp, r7
 800b848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84c:	4770      	bx	lr
 800b84e:	bf00      	nop
 800b850:	20000c38 	.word	0x20000c38

0800b854 <MB_executeRequest>:
/**
  * @brief To execute the request which is received from the master
  * @param functionCode = the request function code
  * @retval 2-6,8,10-11, and 255; where 2-6,8 & 10-11 = exception code, and 255 = no exception occurred
  */
uint8_t MB_executeRequest(uint8_t functionCode){
 800b854:	b580      	push	{r7, lr}
 800b856:	b084      	sub	sp, #16
 800b858:	af00      	add	r7, sp, #0
 800b85a:	4603      	mov	r3, r0
 800b85c:	71fb      	strb	r3, [r7, #7]
	uint8_t exeStatus = MB_EC_ILF_1;
 800b85e:	2301      	movs	r3, #1
 800b860:	73fb      	strb	r3, [r7, #15]
	mbHandle.txBufferSize = 0u;
 800b862:	4b35      	ldr	r3, [pc, #212]	@ (800b938 <MB_executeRequest+0xe4>)
 800b864:	2200      	movs	r2, #0
 800b866:	725a      	strb	r2, [r3, #9]
	switch (functionCode) {
 800b868:	79fb      	ldrb	r3, [r7, #7]
 800b86a:	3b01      	subs	r3, #1
 800b86c:	2b16      	cmp	r3, #22
 800b86e:	d859      	bhi.n	800b924 <MB_executeRequest+0xd0>
 800b870:	a201      	add	r2, pc, #4	@ (adr r2, 800b878 <MB_executeRequest+0x24>)
 800b872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b876:	bf00      	nop
 800b878:	0800b8d5 	.word	0x0800b8d5
 800b87c:	0800b8df 	.word	0x0800b8df
 800b880:	0800b8e9 	.word	0x0800b8e9
 800b884:	0800b8f3 	.word	0x0800b8f3
 800b888:	0800b8fd 	.word	0x0800b8fd
 800b88c:	0800b907 	.word	0x0800b907
 800b890:	0800b92b 	.word	0x0800b92b
 800b894:	0800b925 	.word	0x0800b925
 800b898:	0800b925 	.word	0x0800b925
 800b89c:	0800b925 	.word	0x0800b925
 800b8a0:	0800b925 	.word	0x0800b925
 800b8a4:	0800b925 	.word	0x0800b925
 800b8a8:	0800b925 	.word	0x0800b925
 800b8ac:	0800b925 	.word	0x0800b925
 800b8b0:	0800b911 	.word	0x0800b911
 800b8b4:	0800b91b 	.word	0x0800b91b
 800b8b8:	0800b925 	.word	0x0800b925
 800b8bc:	0800b925 	.word	0x0800b925
 800b8c0:	0800b925 	.word	0x0800b925
 800b8c4:	0800b925 	.word	0x0800b925
 800b8c8:	0800b925 	.word	0x0800b925
 800b8cc:	0800b92b 	.word	0x0800b92b
 800b8d0:	0800b92b 	.word	0x0800b92b
		case MB_FC_RC_01:
			exeStatus = MB_readCoils();
 800b8d4:	f000 fb50 	bl	800bf78 <MB_readCoils>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	73fb      	strb	r3, [r7, #15]
			break;
 800b8dc:	e026      	b.n	800b92c <MB_executeRequest+0xd8>
		case MB_FC_RDI_02:
			exeStatus = MB_readDI();
 800b8de:	f000 fbd9 	bl	800c094 <MB_readDI>
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	73fb      	strb	r3, [r7, #15]
			break;
 800b8e6:	e021      	b.n	800b92c <MB_executeRequest+0xd8>
		case MB_FC_RHR_03:
			exeStatus = MB_readHR();
 800b8e8:	f000 fdd0 	bl	800c48c <MB_readHR>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	73fb      	strb	r3, [r7, #15]
			break;
 800b8f0:	e01c      	b.n	800b92c <MB_executeRequest+0xd8>
		case MB_FC_RIR_04:
			exeStatus = MB_readIR();
 800b8f2:	f000 fd3a 	bl	800c36a <MB_readIR>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	73fb      	strb	r3, [r7, #15]
			break;
 800b8fa:	e017      	b.n	800b92c <MB_executeRequest+0xd8>
		case MB_FC_WSC_05:
			exeStatus = MB_writeSC();
 800b8fc:	f000 fc5a 	bl	800c1b4 <MB_writeSC>
 800b900:	4603      	mov	r3, r0
 800b902:	73fb      	strb	r3, [r7, #15]
			break;
 800b904:	e012      	b.n	800b92c <MB_executeRequest+0xd8>
		case MB_FC_WSR_06:
			exeStatus = MB_writeSHR();
 800b906:	f000 fe59 	bl	800c5bc <MB_writeSHR>
 800b90a:	4603      	mov	r3, r0
 800b90c:	73fb      	strb	r3, [r7, #15]
			break;
 800b90e:	e00d      	b.n	800b92c <MB_executeRequest+0xd8>
		case MB_FC_RES_07:

			break;

		case MB_FC_WMC_15:
			exeStatus = MB_writeMC();
 800b910:	f000 fc82 	bl	800c218 <MB_writeMC>
 800b914:	4603      	mov	r3, r0
 800b916:	73fb      	strb	r3, [r7, #15]
			break;
 800b918:	e008      	b.n	800b92c <MB_executeRequest+0xd8>
		case MB_FC_WMR_16:
			exeStatus = MB_writeMHR();
 800b91a:	f000 fe85 	bl	800c628 <MB_writeMHR>
 800b91e:	4603      	mov	r3, r0
 800b920:	73fb      	strb	r3, [r7, #15]
			break;
 800b922:	e003      	b.n	800b92c <MB_executeRequest+0xd8>
			break;
		case MB_FC_RWMR_23:

			break;
		default:
			exeStatus = MB_EC_ILF_1;
 800b924:	2301      	movs	r3, #1
 800b926:	73fb      	strb	r3, [r7, #15]
			break;
 800b928:	e000      	b.n	800b92c <MB_executeRequest+0xd8>
			break;
 800b92a:	bf00      	nop
	}
	return exeStatus;
 800b92c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b92e:	4618      	mov	r0, r3
 800b930:	3710      	adds	r7, #16
 800b932:	46bd      	mov	sp, r7
 800b934:	bd80      	pop	{r7, pc}
 800b936:	bf00      	nop
 800b938:	20000c38 	.word	0x20000c38

0800b93c <MB_ClearBuffer>:
/**
  * @brief To clear the modbus PDU buffer,
  * @param none
  * @retval none
  */
void MB_ClearBuffer(void){
 800b93c:	b580      	push	{r7, lr}
 800b93e:	af00      	add	r7, sp, #0
	memset(mbHandle.rxBuffer,0U,mbHandle.rxBufferSize);
 800b940:	4b0b      	ldr	r3, [pc, #44]	@ (800b970 <MB_ClearBuffer+0x34>)
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	4a0a      	ldr	r2, [pc, #40]	@ (800b970 <MB_ClearBuffer+0x34>)
 800b946:	7a12      	ldrb	r2, [r2, #8]
 800b948:	2100      	movs	r1, #0
 800b94a:	4618      	mov	r0, r3
 800b94c:	f005 fc42 	bl	80111d4 <memset>
	memset(mbHandle.txBuffer,0U,mbHandle.txBufferSize);
 800b950:	4b07      	ldr	r3, [pc, #28]	@ (800b970 <MB_ClearBuffer+0x34>)
 800b952:	685b      	ldr	r3, [r3, #4]
 800b954:	4a06      	ldr	r2, [pc, #24]	@ (800b970 <MB_ClearBuffer+0x34>)
 800b956:	7a52      	ldrb	r2, [r2, #9]
 800b958:	2100      	movs	r1, #0
 800b95a:	4618      	mov	r0, r3
 800b95c:	f005 fc3a 	bl	80111d4 <memset>
	mbHandle.rxBufferSize = 0U;
 800b960:	4b03      	ldr	r3, [pc, #12]	@ (800b970 <MB_ClearBuffer+0x34>)
 800b962:	2200      	movs	r2, #0
 800b964:	721a      	strb	r2, [r3, #8]
	mbHandle.txBufferSize = 0U;
 800b966:	4b02      	ldr	r3, [pc, #8]	@ (800b970 <MB_ClearBuffer+0x34>)
 800b968:	2200      	movs	r2, #0
 800b96a:	725a      	strb	r2, [r3, #9]
}
 800b96c:	bf00      	nop
 800b96e:	bd80      	pop	{r7, pc}
 800b970:	20000c38 	.word	0x20000c38

0800b974 <MB_appendToRespPDU>:
/**
  * @brief It append data to response PDU
  * @param data, data byte to append to response PDU
  * @retval none
  */
void MB_appendToRespPDU(uint8_t data){
 800b974:	b480      	push	{r7}
 800b976:	b083      	sub	sp, #12
 800b978:	af00      	add	r7, sp, #0
 800b97a:	4603      	mov	r3, r0
 800b97c:	71fb      	strb	r3, [r7, #7]
	mbHandle.txBuffer[mbHandle.txBufferSize++] = data;
 800b97e:	4b0a      	ldr	r3, [pc, #40]	@ (800b9a8 <MB_appendToRespPDU+0x34>)
 800b980:	685a      	ldr	r2, [r3, #4]
 800b982:	4b09      	ldr	r3, [pc, #36]	@ (800b9a8 <MB_appendToRespPDU+0x34>)
 800b984:	7a5b      	ldrb	r3, [r3, #9]
 800b986:	1c59      	adds	r1, r3, #1
 800b988:	b2c8      	uxtb	r0, r1
 800b98a:	4907      	ldr	r1, [pc, #28]	@ (800b9a8 <MB_appendToRespPDU+0x34>)
 800b98c:	7248      	strb	r0, [r1, #9]
 800b98e:	4413      	add	r3, r2
 800b990:	79fa      	ldrb	r2, [r7, #7]
 800b992:	701a      	strb	r2, [r3, #0]
	mbHandle.is_req_cpy_to_resp = 0U;
 800b994:	4b04      	ldr	r3, [pc, #16]	@ (800b9a8 <MB_appendToRespPDU+0x34>)
 800b996:	2200      	movs	r2, #0
 800b998:	729a      	strb	r2, [r3, #10]
}
 800b99a:	bf00      	nop
 800b99c:	370c      	adds	r7, #12
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a4:	4770      	bx	lr
 800b9a6:	bf00      	nop
 800b9a8:	20000c38 	.word	0x20000c38

0800b9ac <MB_appendToRespPDU_SAFC>:
/**
  * @brief It append slave address and function code to response PDU
  * @param none
  * @retval none
  */
void MB_appendToRespPDU_SAFC(void){
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	af00      	add	r7, sp, #0
	MB_appendToRespPDU(MB_getSlaveAddress());
 800b9b0:	f000 f9f2 	bl	800bd98 <MB_getSlaveAddress>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f7ff ffdc 	bl	800b974 <MB_appendToRespPDU>
	MB_appendToRespPDU(MB_getFunctionCode());
 800b9bc:	f000 f9f8 	bl	800bdb0 <MB_getFunctionCode>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f7ff ffd6 	bl	800b974 <MB_appendToRespPDU>
}
 800b9c8:	bf00      	nop
 800b9ca:	bd80      	pop	{r7, pc}

0800b9cc <MB_appendToRespPDU_CRC>:
/**
  * @brief It appends CRC16 to response PDU
  * @param none
  * @retval none
  */
void MB_appendToRespPDU_CRC(void){
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b082      	sub	sp, #8
 800b9d0:	af00      	add	r7, sp, #0
	if(!mbHandle.is_req_cpy_to_resp){
 800b9d2:	4b10      	ldr	r3, [pc, #64]	@ (800ba14 <MB_appendToRespPDU_CRC+0x48>)
 800b9d4:	7a9b      	ldrb	r3, [r3, #10]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d115      	bne.n	800ba06 <MB_appendToRespPDU_CRC+0x3a>
		uint16_t crc16 = MB_CalcCRC16(mbHandle.txBuffer, mbHandle.txBufferSize);			// calculates CRC
 800b9da:	4b0e      	ldr	r3, [pc, #56]	@ (800ba14 <MB_appendToRespPDU_CRC+0x48>)
 800b9dc:	685b      	ldr	r3, [r3, #4]
 800b9de:	4a0d      	ldr	r2, [pc, #52]	@ (800ba14 <MB_appendToRespPDU_CRC+0x48>)
 800b9e0:	7a52      	ldrb	r2, [r2, #9]
 800b9e2:	4611      	mov	r1, r2
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f7ff fecd 	bl	800b784 <MB_CalcCRC16>
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	80fb      	strh	r3, [r7, #6]
		MB_appendToRespPDU((uint8_t)(crc16 & 0x00FF));
 800b9ee:	88fb      	ldrh	r3, [r7, #6]
 800b9f0:	b2db      	uxtb	r3, r3
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	f7ff ffbe 	bl	800b974 <MB_appendToRespPDU>
		MB_appendToRespPDU((uint8_t)(crc16>>8));
 800b9f8:	88fb      	ldrh	r3, [r7, #6]
 800b9fa:	0a1b      	lsrs	r3, r3, #8
 800b9fc:	b29b      	uxth	r3, r3
 800b9fe:	b2db      	uxtb	r3, r3
 800ba00:	4618      	mov	r0, r3
 800ba02:	f7ff ffb7 	bl	800b974 <MB_appendToRespPDU>
	}
	mbHandle.is_req_cpy_to_resp = 0U;
 800ba06:	4b03      	ldr	r3, [pc, #12]	@ (800ba14 <MB_appendToRespPDU_CRC+0x48>)
 800ba08:	2200      	movs	r2, #0
 800ba0a:	729a      	strb	r2, [r3, #10]
}
 800ba0c:	bf00      	nop
 800ba0e:	3708      	adds	r7, #8
 800ba10:	46bd      	mov	sp, r7
 800ba12:	bd80      	pop	{r7, pc}
 800ba14:	20000c38 	.word	0x20000c38

0800ba18 <MB_excepRespBuilder>:
/**
  * @brief To build exception response
  * @param None
  * @retval 1 or 0, if calculated CRC is matched with received CRC it will return 1, otherwise it will return 0
  */
void MB_excepRespBuilder(uint8_t excepCode){
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b082      	sub	sp, #8
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	4603      	mov	r3, r0
 800ba20:	71fb      	strb	r3, [r7, #7]
	MB_appendToRespPDU(MB_getSlaveAddress());							// appends the slave address to the response PDU
 800ba22:	f000 f9b9 	bl	800bd98 <MB_getSlaveAddress>
 800ba26:	4603      	mov	r3, r0
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f7ff ffa3 	bl	800b974 <MB_appendToRespPDU>
	MB_appendToRespPDU(MB_EFC_OFFSET + MB_getFunctionCode());			// appends the exception function code
 800ba2e:	f000 f9bf 	bl	800bdb0 <MB_getFunctionCode>
 800ba32:	4603      	mov	r3, r0
 800ba34:	3b80      	subs	r3, #128	@ 0x80
 800ba36:	b2db      	uxtb	r3, r3
 800ba38:	4618      	mov	r0, r3
 800ba3a:	f7ff ff9b 	bl	800b974 <MB_appendToRespPDU>
	MB_appendToRespPDU(excepCode);										// appends exception code
 800ba3e:	79fb      	ldrb	r3, [r7, #7]
 800ba40:	4618      	mov	r0, r3
 800ba42:	f7ff ff97 	bl	800b974 <MB_appendToRespPDU>


}
 800ba46:	bf00      	nop
 800ba48:	3708      	adds	r7, #8
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}

0800ba4e <MB_isFunctionCodeValid>:
/**
  * @brief To check the function code
  * @param functionCode - received function code
  * @retval 1U or 0U, returns 1U for valid function code, or return 0U for invalid function code
  */
uint8_t MB_isFunctionCodeValid(uint8_t functionCode){
 800ba4e:	b480      	push	{r7}
 800ba50:	b083      	sub	sp, #12
 800ba52:	af00      	add	r7, sp, #0
 800ba54:	4603      	mov	r3, r0
 800ba56:	71fb      	strb	r3, [r7, #7]
	// 1-227 is the range of supported function code public + user define function code
	return ((functionCode >= MB_FC_RC_01 && functionCode <= MB_FC_DIAG_08)
	|| (functionCode == MB_FC_GCEC_11 )
	|| (functionCode >= MB_FC_WMC_15 && functionCode <= MB_FC_WMR_16)
	|| (functionCode >= MB_FC_MWR_22 && functionCode <= MB_FC_RWMR_23)
	|| (functionCode == 66u)
 800ba58:	79fb      	ldrb	r3, [r7, #7]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d002      	beq.n	800ba64 <MB_isFunctionCodeValid+0x16>
	return ((functionCode >= MB_FC_RC_01 && functionCode <= MB_FC_DIAG_08)
 800ba5e:	79fb      	ldrb	r3, [r7, #7]
 800ba60:	2b08      	cmp	r3, #8
 800ba62:	d911      	bls.n	800ba88 <MB_isFunctionCodeValid+0x3a>
	|| (functionCode == MB_FC_GCEC_11 )
 800ba64:	79fb      	ldrb	r3, [r7, #7]
 800ba66:	2b0b      	cmp	r3, #11
 800ba68:	d00e      	beq.n	800ba88 <MB_isFunctionCodeValid+0x3a>
	|| (functionCode >= MB_FC_WMC_15 && functionCode <= MB_FC_WMR_16)
 800ba6a:	79fb      	ldrb	r3, [r7, #7]
 800ba6c:	2b0e      	cmp	r3, #14
 800ba6e:	d902      	bls.n	800ba76 <MB_isFunctionCodeValid+0x28>
 800ba70:	79fb      	ldrb	r3, [r7, #7]
 800ba72:	2b10      	cmp	r3, #16
 800ba74:	d908      	bls.n	800ba88 <MB_isFunctionCodeValid+0x3a>
	|| (functionCode >= MB_FC_MWR_22 && functionCode <= MB_FC_RWMR_23)
 800ba76:	79fb      	ldrb	r3, [r7, #7]
 800ba78:	2b15      	cmp	r3, #21
 800ba7a:	d902      	bls.n	800ba82 <MB_isFunctionCodeValid+0x34>
 800ba7c:	79fb      	ldrb	r3, [r7, #7]
 800ba7e:	2b17      	cmp	r3, #23
 800ba80:	d902      	bls.n	800ba88 <MB_isFunctionCodeValid+0x3a>
	|| (functionCode == 66u)
 800ba82:	79fb      	ldrb	r3, [r7, #7]
 800ba84:	2b42      	cmp	r3, #66	@ 0x42
 800ba86:	d101      	bne.n	800ba8c <MB_isFunctionCodeValid+0x3e>
 800ba88:	2301      	movs	r3, #1
 800ba8a:	e000      	b.n	800ba8e <MB_isFunctionCodeValid+0x40>
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	b2db      	uxtb	r3, r3
	);
}
 800ba90:	4618      	mov	r0, r3
 800ba92:	370c      	adds	r7, #12
 800ba94:	46bd      	mov	sp, r7
 800ba96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9a:	4770      	bx	lr

0800ba9c <MB_checkMCQtyAddrByteCount>:
  * @param none
  * @retval 0, 2 & 3, where 0 = no exception, 2 = illegal data address, 3 = illegal data value
  *
  */

uint8_t MB_checkMCQtyAddrByteCount(void){
 800ba9c:	b590      	push	{r4, r7, lr}
 800ba9e:	b083      	sub	sp, #12
 800baa0:	af00      	add	r7, sp, #0
	uint8_t clc_byte_count = (MB_getQuantity(MB_FC_INDEX+3)/8)+(MB_getQuantity(MB_FC_INDEX+3)%8>0);		// to calculate byte count from the output quantity
 800baa2:	2004      	movs	r0, #4
 800baa4:	f000 f9a6 	bl	800bdf4 <MB_getQuantity>
 800baa8:	4603      	mov	r3, r0
 800baaa:	08db      	lsrs	r3, r3, #3
 800baac:	b29b      	uxth	r3, r3
 800baae:	b2dc      	uxtb	r4, r3
 800bab0:	2004      	movs	r0, #4
 800bab2:	f000 f99f 	bl	800bdf4 <MB_getQuantity>
 800bab6:	4603      	mov	r3, r0
 800bab8:	f003 0307 	and.w	r3, r3, #7
 800babc:	b29b      	uxth	r3, r3
 800babe:	2b00      	cmp	r3, #0
 800bac0:	bf14      	ite	ne
 800bac2:	2301      	movne	r3, #1
 800bac4:	2300      	moveq	r3, #0
 800bac6:	b2db      	uxtb	r3, r3
 800bac8:	4423      	add	r3, r4
 800baca:	71fb      	strb	r3, [r7, #7]
	if(MB_checkDataQuantity(MB_getQuantity(MB_FC_INDEX+3), (MB_COA_MAX-MB_CO_ADDR_OFFSET))
 800bacc:	2004      	movs	r0, #4
 800bace:	f000 f991 	bl	800bdf4 <MB_getQuantity>
 800bad2:	4603      	mov	r3, r0
 800bad4:	211f      	movs	r1, #31
 800bad6:	4618      	mov	r0, r3
 800bad8:	f000 f896 	bl	800bc08 <MB_checkDataQuantity>
 800badc:	4603      	mov	r3, r0
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d01b      	beq.n	800bb1a <MB_checkMCQtyAddrByteCount+0x7e>
			&& (clc_byte_count == mbHandle.rxBuffer[MB_FC_INDEX+5])){				//multiple coils write checks valid quantity of coils
 800bae2:	4b10      	ldr	r3, [pc, #64]	@ (800bb24 <MB_checkMCQtyAddrByteCount+0x88>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	3306      	adds	r3, #6
 800bae8:	781b      	ldrb	r3, [r3, #0]
 800baea:	79fa      	ldrb	r2, [r7, #7]
 800baec:	429a      	cmp	r2, r3
 800baee:	d114      	bne.n	800bb1a <MB_checkMCQtyAddrByteCount+0x7e>
		if(MB_checkDataAddress(MB_getStartAddress(MB_FC_INDEX+1), (MB_COA_MAX-MB_CO_ADDR_OFFSET), MB_getQuantity(MB_FC_INDEX+3))){		// MAX coils/registers address 10000, checks valid data address and address+quantity of coils, Max value will not exceed 9999
 800baf0:	2002      	movs	r0, #2
 800baf2:	f000 f969 	bl	800bdc8 <MB_getStartAddress>
 800baf6:	4603      	mov	r3, r0
 800baf8:	461c      	mov	r4, r3
 800bafa:	2004      	movs	r0, #4
 800bafc:	f000 f97a 	bl	800bdf4 <MB_getQuantity>
 800bb00:	4603      	mov	r3, r0
 800bb02:	461a      	mov	r2, r3
 800bb04:	211f      	movs	r1, #31
 800bb06:	4620      	mov	r0, r4
 800bb08:	f000 f897 	bl	800bc3a <MB_checkDataAddress>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d001      	beq.n	800bb16 <MB_checkMCQtyAddrByteCount+0x7a>
			return 0;
 800bb12:	2300      	movs	r3, #0
 800bb14:	e002      	b.n	800bb1c <MB_checkMCQtyAddrByteCount+0x80>
		}else{
			return MB_EC_ILDA_2;										// returns exception code - 2 for illegal data address and address+quantity
 800bb16:	2302      	movs	r3, #2
 800bb18:	e000      	b.n	800bb1c <MB_checkMCQtyAddrByteCount+0x80>
		}
	}else{
		return MB_EC_ILDV_3;											// returns exception code - 3 for illegal data value/quantity
 800bb1a:	2303      	movs	r3, #3
	}

}
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	370c      	adds	r7, #12
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bd90      	pop	{r4, r7, pc}
 800bb24:	20000c38 	.word	0x20000c38

0800bb28 <MB_checkMRQtyAddrByteCount>:
 * @note The maximum number of registers that can be written is defined by
 *       the `maxAddress` parameter, with a defined limit for the quantity
 *       of registers. The byte count is calculated as twice the quantity
 *       of registers, as each register is 2 bytes.
 */
uint8_t MB_checkMRQtyAddrByteCount(uint16_t maxAddress){
 800bb28:	b5b0      	push	{r4, r5, r7, lr}
 800bb2a:	b084      	sub	sp, #16
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	4603      	mov	r3, r0
 800bb30:	80fb      	strh	r3, [r7, #6]
	uint8_t clc_byte_count = MB_getQuantity(MB_FC_INDEX+3)*2;		// to calculate byte count from the output quantity
 800bb32:	2004      	movs	r0, #4
 800bb34:	f000 f95e 	bl	800bdf4 <MB_getQuantity>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	b2db      	uxtb	r3, r3
 800bb3c:	005b      	lsls	r3, r3, #1
 800bb3e:	73fb      	strb	r3, [r7, #15]
	if(MB_checkDataQuantity(MB_getQuantity(MB_FC_INDEX+3), (maxAddress-MB_HR_ADDR_OFFSET))
 800bb40:	2004      	movs	r0, #4
 800bb42:	f000 f957 	bl	800bdf4 <MB_getQuantity>
 800bb46:	4603      	mov	r3, r0
 800bb48:	461a      	mov	r2, r3
 800bb4a:	88fb      	ldrh	r3, [r7, #6]
 800bb4c:	f503 43c7 	add.w	r3, r3, #25472	@ 0x6380
 800bb50:	333f      	adds	r3, #63	@ 0x3f
 800bb52:	b29b      	uxth	r3, r3
 800bb54:	4619      	mov	r1, r3
 800bb56:	4610      	mov	r0, r2
 800bb58:	f000 f856 	bl	800bc08 <MB_checkDataQuantity>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d020      	beq.n	800bba4 <MB_checkMRQtyAddrByteCount+0x7c>
			&& (clc_byte_count == mbHandle.rxBuffer[MB_FC_INDEX+5])){				// Max quantity- 1968 for multiple register write checks valid quantity of coils
 800bb62:	4b13      	ldr	r3, [pc, #76]	@ (800bbb0 <MB_checkMRQtyAddrByteCount+0x88>)
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	3306      	adds	r3, #6
 800bb68:	781b      	ldrb	r3, [r3, #0]
 800bb6a:	7bfa      	ldrb	r2, [r7, #15]
 800bb6c:	429a      	cmp	r2, r3
 800bb6e:	d119      	bne.n	800bba4 <MB_checkMRQtyAddrByteCount+0x7c>
		if(MB_checkDataAddress(MB_getStartAddress(MB_FC_INDEX+1), (maxAddress-MB_HR_ADDR_OFFSET), MB_getQuantity(MB_FC_INDEX+3))){		// MAX coils/registers address 10000, checks valid data address and address+quantity of register, Max value will not exceed 9999
 800bb70:	2002      	movs	r0, #2
 800bb72:	f000 f929 	bl	800bdc8 <MB_getStartAddress>
 800bb76:	4603      	mov	r3, r0
 800bb78:	461d      	mov	r5, r3
 800bb7a:	88fb      	ldrh	r3, [r7, #6]
 800bb7c:	f503 43c7 	add.w	r3, r3, #25472	@ 0x6380
 800bb80:	333f      	adds	r3, #63	@ 0x3f
 800bb82:	b29c      	uxth	r4, r3
 800bb84:	2004      	movs	r0, #4
 800bb86:	f000 f935 	bl	800bdf4 <MB_getQuantity>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	461a      	mov	r2, r3
 800bb8e:	4621      	mov	r1, r4
 800bb90:	4628      	mov	r0, r5
 800bb92:	f000 f852 	bl	800bc3a <MB_checkDataAddress>
 800bb96:	4603      	mov	r3, r0
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d001      	beq.n	800bba0 <MB_checkMRQtyAddrByteCount+0x78>
			return 0;
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	e002      	b.n	800bba6 <MB_checkMRQtyAddrByteCount+0x7e>
		}else{
			return MB_EC_ILDA_2;										// returns exception code - 2 for illegal data address and address+quantity
 800bba0:	2302      	movs	r3, #2
 800bba2:	e000      	b.n	800bba6 <MB_checkMRQtyAddrByteCount+0x7e>
		}
	}else{
		return MB_EC_ILDV_3;											// returns exception code - 3 for illegal data value/quantity
 800bba4:	2303      	movs	r3, #3
	}

}
 800bba6:	4618      	mov	r0, r3
 800bba8:	3710      	adds	r7, #16
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bdb0      	pop	{r4, r5, r7, pc}
 800bbae:	bf00      	nop
 800bbb0:	20000c38 	.word	0x20000c38

0800bbb4 <MB_checkDataQtyAddr>:
  * of the requested coils or registers, quantity is the number of requested coils or register
  * and maxQuantity is the max number of coils or registers
  *
  * @retval 0, 2 & 3, where 0 = no exception, 2 = illegal data address, 3 = illegal data value
  */
uint8_t MB_checkDataQtyAddr(uint16_t startAddress, uint16_t maxAddress, uint16_t quantity, uint16_t maxQuantity){
 800bbb4:	b590      	push	{r4, r7, lr}
 800bbb6:	b083      	sub	sp, #12
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	4604      	mov	r4, r0
 800bbbc:	4608      	mov	r0, r1
 800bbbe:	4611      	mov	r1, r2
 800bbc0:	461a      	mov	r2, r3
 800bbc2:	4623      	mov	r3, r4
 800bbc4:	80fb      	strh	r3, [r7, #6]
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	80bb      	strh	r3, [r7, #4]
 800bbca:	460b      	mov	r3, r1
 800bbcc:	807b      	strh	r3, [r7, #2]
 800bbce:	4613      	mov	r3, r2
 800bbd0:	803b      	strh	r3, [r7, #0]
	if(MB_checkDataQuantity(quantity, maxQuantity)){						// Max quantity- 2000 for coils and 125 for registers, checks valid quantity of coils
 800bbd2:	883a      	ldrh	r2, [r7, #0]
 800bbd4:	887b      	ldrh	r3, [r7, #2]
 800bbd6:	4611      	mov	r1, r2
 800bbd8:	4618      	mov	r0, r3
 800bbda:	f000 f815 	bl	800bc08 <MB_checkDataQuantity>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d00c      	beq.n	800bbfe <MB_checkDataQtyAddr+0x4a>
		if(MB_checkDataAddress(startAddress, maxAddress, quantity)){		// MAX coils/registers address 10000, checks valid data address and address+quantity of coils, Max value will not exceed 9999
 800bbe4:	887a      	ldrh	r2, [r7, #2]
 800bbe6:	88b9      	ldrh	r1, [r7, #4]
 800bbe8:	88fb      	ldrh	r3, [r7, #6]
 800bbea:	4618      	mov	r0, r3
 800bbec:	f000 f825 	bl	800bc3a <MB_checkDataAddress>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d001      	beq.n	800bbfa <MB_checkDataQtyAddr+0x46>
			return 0;
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	e002      	b.n	800bc00 <MB_checkDataQtyAddr+0x4c>
		}else{
			return MB_EC_ILDA_2;										// returns exception code - 2 for illegal data address and address+quantity
 800bbfa:	2302      	movs	r3, #2
 800bbfc:	e000      	b.n	800bc00 <MB_checkDataQtyAddr+0x4c>
		}
	}else{
		return MB_EC_ILDV_3;											// returns exception code - 3 for illegal data value/quantity
 800bbfe:	2303      	movs	r3, #3
	}
}
 800bc00:	4618      	mov	r0, r3
 800bc02:	370c      	adds	r7, #12
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bd90      	pop	{r4, r7, pc}

0800bc08 <MB_checkDataQuantity>:
  * @param quantity, maxQuantity, where, quantity is the number of requested coils or register
  * and maxQuantity is the max number of coils or registers
  *
  * @retval 0, 1 0 = invalid, 1 = valid
  */
uint8_t MB_checkDataQuantity(uint16_t quantity, uint16_t maxQuantity){
 800bc08:	b480      	push	{r7}
 800bc0a:	b083      	sub	sp, #12
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	4603      	mov	r3, r0
 800bc10:	460a      	mov	r2, r1
 800bc12:	80fb      	strh	r3, [r7, #6]
 800bc14:	4613      	mov	r3, r2
 800bc16:	80bb      	strh	r3, [r7, #4]
	return (quantity >= 1 && quantity <= maxQuantity);
 800bc18:	88fb      	ldrh	r3, [r7, #6]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d005      	beq.n	800bc2a <MB_checkDataQuantity+0x22>
 800bc1e:	88fa      	ldrh	r2, [r7, #6]
 800bc20:	88bb      	ldrh	r3, [r7, #4]
 800bc22:	429a      	cmp	r2, r3
 800bc24:	d801      	bhi.n	800bc2a <MB_checkDataQuantity+0x22>
 800bc26:	2301      	movs	r3, #1
 800bc28:	e000      	b.n	800bc2c <MB_checkDataQuantity+0x24>
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	b2db      	uxtb	r3, r3
}
 800bc2e:	4618      	mov	r0, r3
 800bc30:	370c      	adds	r7, #12
 800bc32:	46bd      	mov	sp, r7
 800bc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc38:	4770      	bx	lr

0800bc3a <MB_checkDataAddress>:
  * @param startAddress and quantity, where, startAddress is the starting address
  * of the requested coils or registers, quantity is the number of requested coils or register
  *
  * @retval 0, 1 0 = invalid, 1 = valid
  */
uint8_t MB_checkDataAddress(uint16_t startAddress, uint16_t maxAddress, uint16_t quantity){
 800bc3a:	b480      	push	{r7}
 800bc3c:	b085      	sub	sp, #20
 800bc3e:	af00      	add	r7, sp, #0
 800bc40:	4603      	mov	r3, r0
 800bc42:	80fb      	strh	r3, [r7, #6]
 800bc44:	460b      	mov	r3, r1
 800bc46:	80bb      	strh	r3, [r7, #4]
 800bc48:	4613      	mov	r3, r2
 800bc4a:	807b      	strh	r3, [r7, #2]
	uint16_t lastAddress = startAddress + quantity;
 800bc4c:	88fa      	ldrh	r2, [r7, #6]
 800bc4e:	887b      	ldrh	r3, [r7, #2]
 800bc50:	4413      	add	r3, r2
 800bc52:	81fb      	strh	r3, [r7, #14]
	return((startAddress >= 0 && startAddress <= maxAddress)
				&& (lastAddress >= 1 && lastAddress <= maxAddress));
 800bc54:	88fa      	ldrh	r2, [r7, #6]
 800bc56:	88bb      	ldrh	r3, [r7, #4]
 800bc58:	429a      	cmp	r2, r3
 800bc5a:	d808      	bhi.n	800bc6e <MB_checkDataAddress+0x34>
 800bc5c:	89fb      	ldrh	r3, [r7, #14]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d005      	beq.n	800bc6e <MB_checkDataAddress+0x34>
 800bc62:	89fa      	ldrh	r2, [r7, #14]
 800bc64:	88bb      	ldrh	r3, [r7, #4]
 800bc66:	429a      	cmp	r2, r3
 800bc68:	d801      	bhi.n	800bc6e <MB_checkDataAddress+0x34>
 800bc6a:	2301      	movs	r3, #1
 800bc6c:	e000      	b.n	800bc70 <MB_checkDataAddress+0x36>
 800bc6e:	2300      	movs	r3, #0
 800bc70:	b2db      	uxtb	r3, r3
}
 800bc72:	4618      	mov	r0, r3
 800bc74:	3714      	adds	r7, #20
 800bc76:	46bd      	mov	sp, r7
 800bc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7c:	4770      	bx	lr

0800bc7e <MB_checkSCValue>:
  *
  * @param value, it is the output coil value, output coil can be 0x0000 or 0xFFFF
  *
  * @retval 0 or 1, where 1 = no exception,  0 = exception
  */
uint8_t MB_checkSCValue(uint16_t value){
 800bc7e:	b480      	push	{r7}
 800bc80:	b083      	sub	sp, #12
 800bc82:	af00      	add	r7, sp, #0
 800bc84:	4603      	mov	r3, r0
 800bc86:	80fb      	strh	r3, [r7, #6]
	return (value==LOW || value==HIGH);
 800bc88:	88fb      	ldrh	r3, [r7, #6]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d003      	beq.n	800bc96 <MB_checkSCValue+0x18>
 800bc8e:	88fb      	ldrh	r3, [r7, #6]
 800bc90:	f5b3 4f7f 	cmp.w	r3, #65280	@ 0xff00
 800bc94:	d101      	bne.n	800bc9a <MB_checkSCValue+0x1c>
 800bc96:	2301      	movs	r3, #1
 800bc98:	e000      	b.n	800bc9c <MB_checkSCValue+0x1e>
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	b2db      	uxtb	r3, r3
}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	370c      	adds	r7, #12
 800bca2:	46bd      	mov	sp, r7
 800bca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca8:	4770      	bx	lr

0800bcaa <MB_checkSCRAddr>:
  *
  * @param address, for the target output coil or register
  *
  * @retval 0 or 1, where 1 = no exception,  0 = exception
  */
uint8_t MB_checkSCRAddr(uint16_t address, uint16_t maxAddress){
 800bcaa:	b480      	push	{r7}
 800bcac:	b083      	sub	sp, #12
 800bcae:	af00      	add	r7, sp, #0
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	460a      	mov	r2, r1
 800bcb4:	80fb      	strh	r3, [r7, #6]
 800bcb6:	4613      	mov	r3, r2
 800bcb8:	80bb      	strh	r3, [r7, #4]
	return (address>=0U && address<maxAddress);
 800bcba:	88fa      	ldrh	r2, [r7, #6]
 800bcbc:	88bb      	ldrh	r3, [r7, #4]
 800bcbe:	429a      	cmp	r2, r3
 800bcc0:	bf34      	ite	cc
 800bcc2:	2301      	movcc	r3, #1
 800bcc4:	2300      	movcs	r3, #0
 800bcc6:	b2db      	uxtb	r3, r3
}
 800bcc8:	4618      	mov	r0, r3
 800bcca:	370c      	adds	r7, #12
 800bccc:	46bd      	mov	sp, r7
 800bcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd2:	4770      	bx	lr

0800bcd4 <MB_checkSCValueAddr>:
  *
  * @param address, for the target output coil or register
  *
  * @retval 0,2& 3, where 0 = no exception, 2 = illegal data address,  3 = illegal data value
  */
uint8_t MB_checkSCValueAddr(void){
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	af00      	add	r7, sp, #0
	if(MB_checkSCValue(MB_getSCRValue())){
 800bcd8:	f000 f89a 	bl	800be10 <MB_getSCRValue>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	4618      	mov	r0, r3
 800bce0:	f7ff ffcd 	bl	800bc7e <MB_checkSCValue>
 800bce4:	4603      	mov	r3, r0
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d00d      	beq.n	800bd06 <MB_checkSCValueAddr+0x32>
		if(MB_checkSCRAddr(MB_getSCRAddress(), (MB_COA_MAX-MB_CO_ADDR_OFFSET))){
 800bcea:	f000 f87b 	bl	800bde4 <MB_getSCRAddress>
 800bcee:	4603      	mov	r3, r0
 800bcf0:	211f      	movs	r1, #31
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	f7ff ffd9 	bl	800bcaa <MB_checkSCRAddr>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d001      	beq.n	800bd02 <MB_checkSCValueAddr+0x2e>
			return 0;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	e002      	b.n	800bd08 <MB_checkSCValueAddr+0x34>
		}else{
			return MB_EC_ILDA_2;
 800bd02:	2302      	movs	r3, #2
 800bd04:	e000      	b.n	800bd08 <MB_checkSCValueAddr+0x34>
		}
	}else{
		return MB_EC_ILDV_3;
 800bd06:	2303      	movs	r3, #3
	}

}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	bd80      	pop	{r7, pc}

0800bd0c <MB_checkSRValue>:
  *
  * @param value, it is the output coil value, output coil can be 0x0000 or 0xFFFF
  *
  * @retval 0 or 1, where 1 = no exception,  0 = exception
  */
uint8_t MB_checkSRValue(uint16_t value){
 800bd0c:	b480      	push	{r7}
 800bd0e:	b083      	sub	sp, #12
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	4603      	mov	r3, r0
 800bd14:	80fb      	strh	r3, [r7, #6]
	return (value>=0x0000 && value<=MB_MAX_REGISTER_VALUE);
 800bd16:	2301      	movs	r3, #1
}
 800bd18:	4618      	mov	r0, r3
 800bd1a:	370c      	adds	r7, #12
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd22:	4770      	bx	lr

0800bd24 <MB_checkSRValueAddr>:
 * - MB_EC_ILDV_3 if the SR value is invalid (illegal data value).
 *
 * @note The function makes use of `MB_checkSRValue()` and
 *       `MB_checkSCRAddr()` to perform the necessary checks.
 */
uint8_t MB_checkSRValueAddr(void){
 800bd24:	b580      	push	{r7, lr}
 800bd26:	af00      	add	r7, sp, #0
	if(MB_checkSRValue(MB_getSCRValue())){
 800bd28:	f000 f872 	bl	800be10 <MB_getSCRValue>
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	4618      	mov	r0, r3
 800bd30:	f7ff ffec 	bl	800bd0c <MB_checkSRValue>
 800bd34:	4603      	mov	r3, r0
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d00d      	beq.n	800bd56 <MB_checkSRValueAddr+0x32>
		if(MB_checkSCRAddr(MB_getSCRAddress(), (MB_HRA_MAX-MB_HR_ADDR_OFFSET))>0u){
 800bd3a:	f000 f853 	bl	800bde4 <MB_getSCRAddress>
 800bd3e:	4603      	mov	r3, r0
 800bd40:	2118      	movs	r1, #24
 800bd42:	4618      	mov	r0, r3
 800bd44:	f7ff ffb1 	bl	800bcaa <MB_checkSCRAddr>
 800bd48:	4603      	mov	r3, r0
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d001      	beq.n	800bd52 <MB_checkSRValueAddr+0x2e>
			return 0U;
 800bd4e:	2300      	movs	r3, #0
 800bd50:	e002      	b.n	800bd58 <MB_checkSRValueAddr+0x34>
		}else{
			return MB_EC_ILDA_2;
 800bd52:	2302      	movs	r3, #2
 800bd54:	e000      	b.n	800bd58 <MB_checkSRValueAddr+0x34>
		}
	}else{
		return MB_EC_ILDV_3;
 800bd56:	2303      	movs	r3, #3
	}

}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	bd80      	pop	{r7, pc}

0800bd5c <MB_get2byteData>:



uint16_t MB_get2byteData(uint8_t firstByteIndex){
 800bd5c:	b480      	push	{r7}
 800bd5e:	b083      	sub	sp, #12
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	4603      	mov	r3, r0
 800bd64:	71fb      	strb	r3, [r7, #7]
	return ((uint16_t)mbHandle.rxBuffer[firstByteIndex]<<8u | (uint16_t)mbHandle.rxBuffer[firstByteIndex+1u]);
 800bd66:	4b0b      	ldr	r3, [pc, #44]	@ (800bd94 <MB_get2byteData+0x38>)
 800bd68:	681a      	ldr	r2, [r3, #0]
 800bd6a:	79fb      	ldrb	r3, [r7, #7]
 800bd6c:	4413      	add	r3, r2
 800bd6e:	781b      	ldrb	r3, [r3, #0]
 800bd70:	021b      	lsls	r3, r3, #8
 800bd72:	b21a      	sxth	r2, r3
 800bd74:	4b07      	ldr	r3, [pc, #28]	@ (800bd94 <MB_get2byteData+0x38>)
 800bd76:	6819      	ldr	r1, [r3, #0]
 800bd78:	79fb      	ldrb	r3, [r7, #7]
 800bd7a:	3301      	adds	r3, #1
 800bd7c:	440b      	add	r3, r1
 800bd7e:	781b      	ldrb	r3, [r3, #0]
 800bd80:	b21b      	sxth	r3, r3
 800bd82:	4313      	orrs	r3, r2
 800bd84:	b21b      	sxth	r3, r3
 800bd86:	b29b      	uxth	r3, r3
}
 800bd88:	4618      	mov	r0, r3
 800bd8a:	370c      	adds	r7, #12
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd92:	4770      	bx	lr
 800bd94:	20000c38 	.word	0x20000c38

0800bd98 <MB_getSlaveAddress>:
/**
  * @brief To get slave address
  * @param none
  * @retval 0-127
  */
uint8_t MB_getSlaveAddress(void){
 800bd98:	b480      	push	{r7}
 800bd9a:	af00      	add	r7, sp, #0
	return mbHandle.rxBuffer[MB_SA_INDEX];
 800bd9c:	4b03      	ldr	r3, [pc, #12]	@ (800bdac <MB_getSlaveAddress+0x14>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	781b      	ldrb	r3, [r3, #0]
}
 800bda2:	4618      	mov	r0, r3
 800bda4:	46bd      	mov	sp, r7
 800bda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdaa:	4770      	bx	lr
 800bdac:	20000c38 	.word	0x20000c38

0800bdb0 <MB_getFunctionCode>:
/**
  * @brief To get the function code from request PDU buffer
  * @param none
  * @retval 0-127
  */
uint8_t MB_getFunctionCode(void){
 800bdb0:	b480      	push	{r7}
 800bdb2:	af00      	add	r7, sp, #0
	return mbHandle.rxBuffer[MB_FC_INDEX];
 800bdb4:	4b03      	ldr	r3, [pc, #12]	@ (800bdc4 <MB_getFunctionCode+0x14>)
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	785b      	ldrb	r3, [r3, #1]
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc2:	4770      	bx	lr
 800bdc4:	20000c38 	.word	0x20000c38

0800bdc8 <MB_getStartAddress>:
/**
  * @brief To get the data start address (without offset) from request PDU buffer
  * @param none
  * @retval 0-9999
  */
uint16_t MB_getStartAddress(uint8_t firstByteIndex){
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b082      	sub	sp, #8
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	4603      	mov	r3, r0
 800bdd0:	71fb      	strb	r3, [r7, #7]
	return MB_get2byteData(firstByteIndex);
 800bdd2:	79fb      	ldrb	r3, [r7, #7]
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	f7ff ffc1 	bl	800bd5c <MB_get2byteData>
 800bdda:	4603      	mov	r3, r0
}
 800bddc:	4618      	mov	r0, r3
 800bdde:	3708      	adds	r7, #8
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd80      	pop	{r7, pc}

0800bde4 <MB_getSCRAddress>:

uint16_t MB_getSCRAddress(void){
 800bde4:	b580      	push	{r7, lr}
 800bde6:	af00      	add	r7, sp, #0
	return MB_get2byteData(MB_FC_INDEX+1);
 800bde8:	2002      	movs	r0, #2
 800bdea:	f7ff ffb7 	bl	800bd5c <MB_get2byteData>
 800bdee:	4603      	mov	r3, r0
}
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	bd80      	pop	{r7, pc}

0800bdf4 <MB_getQuantity>:
/**
  * @brief To get the requested data quantity from request PDU buffer
  * @param none
  * @retval 1-2000 or 1-125, 1-2000 for coils and discrete input and 1-125 for registers
  */
uint16_t MB_getQuantity(uint8_t firstByteIndex){
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b082      	sub	sp, #8
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	71fb      	strb	r3, [r7, #7]
	return MB_get2byteData(firstByteIndex);
 800bdfe:	79fb      	ldrb	r3, [r7, #7]
 800be00:	4618      	mov	r0, r3
 800be02:	f7ff ffab 	bl	800bd5c <MB_get2byteData>
 800be06:	4603      	mov	r3, r0
}
 800be08:	4618      	mov	r0, r3
 800be0a:	3708      	adds	r7, #8
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bd80      	pop	{r7, pc}

0800be10 <MB_getSCRValue>:
/**
  * @brief To get the requested data output value from the request PDU buffer
  * @param none
  * @retval the output value for single coil or register
  */
uint16_t MB_getSCRValue(void){
 800be10:	b580      	push	{r7, lr}
 800be12:	af00      	add	r7, sp, #0
	return MB_get2byteData(MB_FC_INDEX+3);//(mbHandle.rxBuffer[MB_FC_INDEX+3]<<8 | mbHandle.rxBuffer[MB_FC_INDEX+4]);
 800be14:	2004      	movs	r0, #4
 800be16:	f7ff ffa1 	bl	800bd5c <MB_get2byteData>
 800be1a:	4603      	mov	r3, r0
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	bd80      	pop	{r7, pc}

0800be20 <MB_getMCValueInByte>:
/**
  * @brief To get the requested data output value from the request PDU buffer
  * @param none
  * @retval the output value for single coil or register
  */
uint8_t MB_getMCValueInByte(uint8_t index){
 800be20:	b480      	push	{r7}
 800be22:	b083      	sub	sp, #12
 800be24:	af00      	add	r7, sp, #0
 800be26:	4603      	mov	r3, r0
 800be28:	71fb      	strb	r3, [r7, #7]
	return mbHandle.rxBuffer[index];//(mbHandle.rxBuffer[MB_FC_INDEX+3]<<8 | mbHandle.rxBuffer[MB_FC_INDEX+4]);
 800be2a:	4b05      	ldr	r3, [pc, #20]	@ (800be40 <MB_getMCValueInByte+0x20>)
 800be2c:	681a      	ldr	r2, [r3, #0]
 800be2e:	79fb      	ldrb	r3, [r7, #7]
 800be30:	4413      	add	r3, r2
 800be32:	781b      	ldrb	r3, [r3, #0]
}
 800be34:	4618      	mov	r0, r3
 800be36:	370c      	adds	r7, #12
 800be38:	46bd      	mov	sp, r7
 800be3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3e:	4770      	bx	lr
 800be40:	20000c38 	.word	0x20000c38

0800be44 <MB_getMRValueIn2Byte>:
 *
 * @note The function calls `MB_get2byteData()` to obtain the value,
 *       which is expected to handle the necessary logic for retrieving
 *       and combining the bytes correctly.
 */
uint16_t MB_getMRValueIn2Byte(uint8_t index){
 800be44:	b580      	push	{r7, lr}
 800be46:	b082      	sub	sp, #8
 800be48:	af00      	add	r7, sp, #0
 800be4a:	4603      	mov	r3, r0
 800be4c:	71fb      	strb	r3, [r7, #7]
	return MB_get2byteData(index);//(mbHandle.rxBuffer[MB_FC_INDEX+3]<<8 | mbHandle.rxBuffer[MB_FC_INDEX+4])
 800be4e:	79fb      	ldrb	r3, [r7, #7]
 800be50:	4618      	mov	r0, r3
 800be52:	f7ff ff83 	bl	800bd5c <MB_get2byteData>
 800be56:	4603      	mov	r3, r0
}
 800be58:	4618      	mov	r0, r3
 800be5a:	3708      	adds	r7, #8
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bd80      	pop	{r7, pc}

0800be60 <MB_getIRValue>:
 *         - `MB_ERROR` if the read operation fails.
 *
 * @note Ensure that the address provided is valid and within the range of
 *       defined input registers to avoid unexpected behavior.
 */
uint8_t MB_getIRValue(uint16_t address, uint16_t *value){
 800be60:	b580      	push	{r7, lr}
 800be62:	b082      	sub	sp, #8
 800be64:	af00      	add	r7, sp, #0
 800be66:	4603      	mov	r3, r0
 800be68:	6039      	str	r1, [r7, #0]
 800be6a:	80fb      	strh	r3, [r7, #6]
	return MB_readIRCallback(address, value);
 800be6c:	4b05      	ldr	r3, [pc, #20]	@ (800be84 <MB_getIRValue+0x24>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	88fa      	ldrh	r2, [r7, #6]
 800be72:	6839      	ldr	r1, [r7, #0]
 800be74:	4610      	mov	r0, r2
 800be76:	4798      	blx	r3
 800be78:	4603      	mov	r3, r0
}
 800be7a:	4618      	mov	r0, r3
 800be7c:	3708      	adds	r7, #8
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}
 800be82:	bf00      	nop
 800be84:	20000c50 	.word	0x20000c50

0800be88 <MB_getIRsValue>:
 *           the retrieved data is out of the valid range (0x0000 to 0xFFFF).
 *
 * @note The size parameter should match the number of registers being read
 *       to avoid out-of-bounds access in the value array.
 */
uint8_t MB_getIRsValue(uint16_t *value, uint8_t size, uint16_t startAddress, uint16_t lastAddresss){
 800be88:	b580      	push	{r7, lr}
 800be8a:	b086      	sub	sp, #24
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	60f8      	str	r0, [r7, #12]
 800be90:	4608      	mov	r0, r1
 800be92:	4611      	mov	r1, r2
 800be94:	461a      	mov	r2, r3
 800be96:	4603      	mov	r3, r0
 800be98:	72fb      	strb	r3, [r7, #11]
 800be9a:	460b      	mov	r3, r1
 800be9c:	813b      	strh	r3, [r7, #8]
 800be9e:	4613      	mov	r3, r2
 800bea0:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i = startAddress; i <= lastAddresss; i++){
 800bea2:	893b      	ldrh	r3, [r7, #8]
 800bea4:	82fb      	strh	r3, [r7, #22]
 800bea6:	e017      	b.n	800bed8 <MB_getIRsValue+0x50>
		uint16_t data;
		if(MB_getIRValue(i, &data)){
 800bea8:	f107 0214 	add.w	r2, r7, #20
 800beac:	8afb      	ldrh	r3, [r7, #22]
 800beae:	4611      	mov	r1, r2
 800beb0:	4618      	mov	r0, r3
 800beb2:	f7ff ffd5 	bl	800be60 <MB_getIRValue>
 800beb6:	4603      	mov	r3, r0
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d00b      	beq.n	800bed4 <MB_getIRsValue+0x4c>
			if(data >= 0x0000 && data <= 0xFFFF){
				value[i-startAddress] = data;
 800bebc:	8afa      	ldrh	r2, [r7, #22]
 800bebe:	893b      	ldrh	r3, [r7, #8]
 800bec0:	1ad3      	subs	r3, r2, r3
 800bec2:	005b      	lsls	r3, r3, #1
 800bec4:	68fa      	ldr	r2, [r7, #12]
 800bec6:	4413      	add	r3, r2
 800bec8:	8aba      	ldrh	r2, [r7, #20]
 800beca:	801a      	strh	r2, [r3, #0]
	for(uint16_t i = startAddress; i <= lastAddresss; i++){
 800becc:	8afb      	ldrh	r3, [r7, #22]
 800bece:	3301      	adds	r3, #1
 800bed0:	82fb      	strh	r3, [r7, #22]
 800bed2:	e001      	b.n	800bed8 <MB_getIRsValue+0x50>
			}else{
				return MB_ERROR;
			}
		}else{
			return MB_ERROR;
 800bed4:	2300      	movs	r3, #0
 800bed6:	e004      	b.n	800bee2 <MB_getIRsValue+0x5a>
	for(uint16_t i = startAddress; i <= lastAddresss; i++){
 800bed8:	8afa      	ldrh	r2, [r7, #22]
 800beda:	88fb      	ldrh	r3, [r7, #6]
 800bedc:	429a      	cmp	r2, r3
 800bede:	d9e3      	bls.n	800bea8 <MB_getIRsValue+0x20>
		}
	}

	return MB_OK;
 800bee0:	2301      	movs	r3, #1
}
 800bee2:	4618      	mov	r0, r3
 800bee4:	3718      	adds	r7, #24
 800bee6:	46bd      	mov	sp, r7
 800bee8:	bd80      	pop	{r7, pc}
	...

0800beec <MB_getHRsValue>:
 *           the retrieved data is out of the valid range (0x0000 to 0xFFFF).
 *
 * @note The function assumes that the size of the pData array is sufficient to
 *       store the values of the registers being read.
 */
uint8_t MB_getHRsValue(uint16_t *pData, uint16_t startAddress, uint16_t lastAddresss){
 800beec:	b580      	push	{r7, lr}
 800beee:	b084      	sub	sp, #16
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
 800bef4:	460b      	mov	r3, r1
 800bef6:	807b      	strh	r3, [r7, #2]
 800bef8:	4613      	mov	r3, r2
 800befa:	803b      	strh	r3, [r7, #0]
	//DEBUG_PRINT("getHR_ok\r\n");

	for(uint16_t address = startAddress; address <= lastAddresss; address++){
 800befc:	887b      	ldrh	r3, [r7, #2]
 800befe:	81fb      	strh	r3, [r7, #14]
 800bf00:	e019      	b.n	800bf36 <MB_getHRsValue+0x4a>
		uint16_t data = 0U;
 800bf02:	2300      	movs	r3, #0
 800bf04:	81bb      	strh	r3, [r7, #12]
		//DEBUG_PRINT_INT("address: ", address, ",\r\n ");
		if(MB_readHRCallback(address, &data)){
 800bf06:	4b10      	ldr	r3, [pc, #64]	@ (800bf48 <MB_getHRsValue+0x5c>)
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	f107 010c 	add.w	r1, r7, #12
 800bf0e:	89fa      	ldrh	r2, [r7, #14]
 800bf10:	4610      	mov	r0, r2
 800bf12:	4798      	blx	r3
 800bf14:	4603      	mov	r3, r0
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d00b      	beq.n	800bf32 <MB_getHRsValue+0x46>
			//DEBUG_PRINT_INT(" OK address: ", address, ",\r\n ");
			if(data >= 0x0000 && data <= 0xFFFF){
				pData[address-startAddress] = data;
 800bf1a:	89fa      	ldrh	r2, [r7, #14]
 800bf1c:	887b      	ldrh	r3, [r7, #2]
 800bf1e:	1ad3      	subs	r3, r2, r3
 800bf20:	005b      	lsls	r3, r3, #1
 800bf22:	687a      	ldr	r2, [r7, #4]
 800bf24:	4413      	add	r3, r2
 800bf26:	89ba      	ldrh	r2, [r7, #12]
 800bf28:	801a      	strh	r2, [r3, #0]
	for(uint16_t address = startAddress; address <= lastAddresss; address++){
 800bf2a:	89fb      	ldrh	r3, [r7, #14]
 800bf2c:	3301      	adds	r3, #1
 800bf2e:	81fb      	strh	r3, [r7, #14]
 800bf30:	e001      	b.n	800bf36 <MB_getHRsValue+0x4a>
			}else{
				return MB_ERROR;
			}
		}else{
			//DEBUG_PRINT_INT(" ERROR address: ", address, ",\r\n ");
			return MB_ERROR;
 800bf32:	2300      	movs	r3, #0
 800bf34:	e004      	b.n	800bf40 <MB_getHRsValue+0x54>
	for(uint16_t address = startAddress; address <= lastAddresss; address++){
 800bf36:	89fa      	ldrh	r2, [r7, #14]
 800bf38:	883b      	ldrh	r3, [r7, #0]
 800bf3a:	429a      	cmp	r2, r3
 800bf3c:	d9e1      	bls.n	800bf02 <MB_getHRsValue+0x16>
		}
	}

	return MB_OK;
 800bf3e:	2301      	movs	r3, #1
}
 800bf40:	4618      	mov	r0, r3
 800bf42:	3710      	adds	r7, #16
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bd80      	pop	{r7, pc}
 800bf48:	20000c58 	.word	0x20000c58

0800bf4c <MB_setHRValue>:
 *
 * @note This function assumes that the provided address is valid and within
 *       the range of holding registers. The behavior is undefined if the
 *       address is out of bounds.
 */
uint8_t MB_setHRValue(uint16_t address, uint16_t data){
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b082      	sub	sp, #8
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	4603      	mov	r3, r0
 800bf54:	460a      	mov	r2, r1
 800bf56:	80fb      	strh	r3, [r7, #6]
 800bf58:	4613      	mov	r3, r2
 800bf5a:	80bb      	strh	r3, [r7, #4]
	//DEBUG_PRINT("SHR_OK\r\n");
	return MB_writeHRCallback(address, data);
 800bf5c:	4b05      	ldr	r3, [pc, #20]	@ (800bf74 <MB_setHRValue+0x28>)
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	88b9      	ldrh	r1, [r7, #4]
 800bf62:	88fa      	ldrh	r2, [r7, #6]
 800bf64:	4610      	mov	r0, r2
 800bf66:	4798      	blx	r3
 800bf68:	4603      	mov	r3, r0
	 //return (mbRegister.HR[address - MB_HR_ADDR_OFFSET] == data);
}
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	3708      	adds	r7, #8
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bd80      	pop	{r7, pc}
 800bf72:	bf00      	nop
 800bf74:	20000c54 	.word	0x20000c54

0800bf78 <MB_readCoils>:
 *         - Other exception codes as returned by `MB_checkDataQtyAddr()`.
 *
 * @note The function reads the coil data in bytes and appends the response PDU,
 *       handling cases where the number of coils is not a multiple of 8.
 */
uint8_t MB_readCoils(void){
 800bf78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf7c:	b084      	sub	sp, #16
 800bf7e:	af00      	add	r7, sp, #0
	uint8_t excepCode = MB_checkDataQtyAddr( MB_getStartAddress(MB_FC_INDEX+1), (MB_COA_MAX-MB_CO_ADDR_OFFSET),
 800bf80:	2002      	movs	r0, #2
 800bf82:	f7ff ff21 	bl	800bdc8 <MB_getStartAddress>
 800bf86:	4603      	mov	r3, r0
 800bf88:	461e      	mov	r6, r3
 800bf8a:	2004      	movs	r0, #4
 800bf8c:	f7ff ff32 	bl	800bdf4 <MB_getQuantity>
 800bf90:	4603      	mov	r3, r0
 800bf92:	461a      	mov	r2, r3
 800bf94:	231f      	movs	r3, #31
 800bf96:	211f      	movs	r1, #31
 800bf98:	4630      	mov	r0, r6
 800bf9a:	f7ff fe0b 	bl	800bbb4 <MB_checkDataQtyAddr>
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	73bb      	strb	r3, [r7, #14]
			MB_getQuantity(MB_FC_INDEX+3), (MB_COA_MAX-MB_CO_ADDR_OFFSET) );//MB_checkCoilDataQtyAddr(MB_CA_MAX);
	if(excepCode == 0){										// if there is no exception
 800bfa2:	7bbb      	ldrb	r3, [r7, #14]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d16f      	bne.n	800c088 <MB_readCoils+0x110>
 800bfa8:	466b      	mov	r3, sp
 800bfaa:	469a      	mov	sl, r3

		uint8_t byteCount = (MB_getQuantity(MB_FC_INDEX+3)/8)+((MB_getQuantity(MB_FC_INDEX+3)%8)>0);
 800bfac:	2004      	movs	r0, #4
 800bfae:	f7ff ff21 	bl	800bdf4 <MB_getQuantity>
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	08db      	lsrs	r3, r3, #3
 800bfb6:	b29b      	uxth	r3, r3
 800bfb8:	b2de      	uxtb	r6, r3
 800bfba:	2004      	movs	r0, #4
 800bfbc:	f7ff ff1a 	bl	800bdf4 <MB_getQuantity>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	f003 0307 	and.w	r3, r3, #7
 800bfc6:	b29b      	uxth	r3, r3
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	bf14      	ite	ne
 800bfcc:	2301      	movne	r3, #1
 800bfce:	2300      	moveq	r3, #0
 800bfd0:	b2db      	uxtb	r3, r3
 800bfd2:	4433      	add	r3, r6
 800bfd4:	737b      	strb	r3, [r7, #13]
		uint16_t startAddress = MB_getStartAddress(MB_FC_INDEX+1)+MB_CO_ADDR_OFFSET;
 800bfd6:	2002      	movs	r0, #2
 800bfd8:	f7ff fef6 	bl	800bdc8 <MB_getStartAddress>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	3301      	adds	r3, #1
 800bfe0:	817b      	strh	r3, [r7, #10]
		uint16_t endAddress = startAddress + MB_getQuantity(MB_FC_INDEX+3);
 800bfe2:	2004      	movs	r0, #4
 800bfe4:	f7ff ff06 	bl	800bdf4 <MB_getQuantity>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	461a      	mov	r2, r3
 800bfec:	897b      	ldrh	r3, [r7, #10]
 800bfee:	4413      	add	r3, r2
 800bff0:	813b      	strh	r3, [r7, #8]
		uint8_t data[byteCount];
 800bff2:	7b79      	ldrb	r1, [r7, #13]
 800bff4:	460b      	mov	r3, r1
 800bff6:	3b01      	subs	r3, #1
 800bff8:	607b      	str	r3, [r7, #4]
 800bffa:	b2cb      	uxtb	r3, r1
 800bffc:	2200      	movs	r2, #0
 800bffe:	4698      	mov	r8, r3
 800c000:	4691      	mov	r9, r2
 800c002:	f04f 0200 	mov.w	r2, #0
 800c006:	f04f 0300 	mov.w	r3, #0
 800c00a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c00e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c012:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c016:	b2cb      	uxtb	r3, r1
 800c018:	2200      	movs	r2, #0
 800c01a:	461c      	mov	r4, r3
 800c01c:	4615      	mov	r5, r2
 800c01e:	f04f 0200 	mov.w	r2, #0
 800c022:	f04f 0300 	mov.w	r3, #0
 800c026:	00eb      	lsls	r3, r5, #3
 800c028:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c02c:	00e2      	lsls	r2, r4, #3
 800c02e:	460b      	mov	r3, r1
 800c030:	3307      	adds	r3, #7
 800c032:	08db      	lsrs	r3, r3, #3
 800c034:	00db      	lsls	r3, r3, #3
 800c036:	ebad 0d03 	sub.w	sp, sp, r3
 800c03a:	466b      	mov	r3, sp
 800c03c:	3300      	adds	r3, #0
 800c03e:	603b      	str	r3, [r7, #0]

		if(MB_getCoilsInByte(data, byteCount, startAddress, endAddress)){
 800c040:	893b      	ldrh	r3, [r7, #8]
 800c042:	897a      	ldrh	r2, [r7, #10]
 800c044:	7b79      	ldrb	r1, [r7, #13]
 800c046:	6838      	ldr	r0, [r7, #0]
 800c048:	f000 fc26 	bl	800c898 <MB_getCoilsInByte>
 800c04c:	4603      	mov	r3, r0
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d017      	beq.n	800c082 <MB_readCoils+0x10a>
			MB_appendToRespPDU_SAFC();							// to append slave address and function code to response PDU
 800c052:	f7ff fcab 	bl	800b9ac <MB_appendToRespPDU_SAFC>
			MB_appendToRespPDU(byteCount);  // total response byte
 800c056:	7b7b      	ldrb	r3, [r7, #13]
 800c058:	4618      	mov	r0, r3
 800c05a:	f7ff fc8b 	bl	800b974 <MB_appendToRespPDU>
			for(uint8_t i = 0; i < byteCount; i++){
 800c05e:	2300      	movs	r3, #0
 800c060:	73fb      	strb	r3, [r7, #15]
 800c062:	e008      	b.n	800c076 <MB_readCoils+0xfe>
				MB_appendToRespPDU(data[i]);
 800c064:	7bfb      	ldrb	r3, [r7, #15]
 800c066:	683a      	ldr	r2, [r7, #0]
 800c068:	5cd3      	ldrb	r3, [r2, r3]
 800c06a:	4618      	mov	r0, r3
 800c06c:	f7ff fc82 	bl	800b974 <MB_appendToRespPDU>
			for(uint8_t i = 0; i < byteCount; i++){
 800c070:	7bfb      	ldrb	r3, [r7, #15]
 800c072:	3301      	adds	r3, #1
 800c074:	73fb      	strb	r3, [r7, #15]
 800c076:	7bfa      	ldrb	r2, [r7, #15]
 800c078:	7b7b      	ldrb	r3, [r7, #13]
 800c07a:	429a      	cmp	r2, r3
 800c07c:	d3f2      	bcc.n	800c064 <MB_readCoils+0xec>
			}
			return MB_RS_255;
 800c07e:	23ff      	movs	r3, #255	@ 0xff
 800c080:	e000      	b.n	800c084 <MB_readCoils+0x10c>
		}else{
			return MB_EC_SDV_4;								// returns exception code 04
 800c082:	2304      	movs	r3, #4
 800c084:	46d5      	mov	sp, sl
 800c086:	e000      	b.n	800c08a <MB_readCoils+0x112>
		}
	}else{													// if exception occurred
		return excepCode;
 800c088:	7bbb      	ldrb	r3, [r7, #14]
	}
}
 800c08a:	4618      	mov	r0, r3
 800c08c:	3710      	adds	r7, #16
 800c08e:	46bd      	mov	sp, r7
 800c090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800c094 <MB_readDI>:
 *         - `MB_EC_SDV_4` if there is a service device failure during input retrieval.
 *         - Other exception codes as returned by `MB_checkDataQtyAddr()`.
 *
 * @note The function handles the discrete inputs byte-by-byte and appends the response PDU.
 */
uint8_t MB_readDI(void){
 800c094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c098:	b084      	sub	sp, #16
 800c09a:	af00      	add	r7, sp, #0
	uint8_t excepCode = MB_checkDataQtyAddr( MB_getStartAddress(MB_FC_INDEX+1), (MB_DIA_MAX-MB_DI_ADDR_OFFSET),
 800c09c:	2002      	movs	r0, #2
 800c09e:	f7ff fe93 	bl	800bdc8 <MB_getStartAddress>
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	461e      	mov	r6, r3
 800c0a6:	2004      	movs	r0, #4
 800c0a8:	f7ff fea4 	bl	800bdf4 <MB_getQuantity>
 800c0ac:	4603      	mov	r3, r0
 800c0ae:	461a      	mov	r2, r3
 800c0b0:	2308      	movs	r3, #8
 800c0b2:	2108      	movs	r1, #8
 800c0b4:	4630      	mov	r0, r6
 800c0b6:	f7ff fd7d 	bl	800bbb4 <MB_checkDataQtyAddr>
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	73bb      	strb	r3, [r7, #14]
						MB_getQuantity(MB_FC_INDEX+3), (MB_DIA_MAX-MB_DI_ADDR_OFFSET) );//MB_checkCoilDataQtyAddr(MB_DIA_MAX);
	if(excepCode == 0){										// if there is no exception
 800c0be:	7bbb      	ldrb	r3, [r7, #14]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d171      	bne.n	800c1a8 <MB_readDI+0x114>
 800c0c4:	466b      	mov	r3, sp
 800c0c6:	469a      	mov	sl, r3

		/*------- Test start---------*/
		uint8_t byteCount = (MB_getQuantity(MB_FC_INDEX+3)/8)+((MB_getQuantity(MB_FC_INDEX+3)%8)>0);
 800c0c8:	2004      	movs	r0, #4
 800c0ca:	f7ff fe93 	bl	800bdf4 <MB_getQuantity>
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	08db      	lsrs	r3, r3, #3
 800c0d2:	b29b      	uxth	r3, r3
 800c0d4:	b2de      	uxtb	r6, r3
 800c0d6:	2004      	movs	r0, #4
 800c0d8:	f7ff fe8c 	bl	800bdf4 <MB_getQuantity>
 800c0dc:	4603      	mov	r3, r0
 800c0de:	f003 0307 	and.w	r3, r3, #7
 800c0e2:	b29b      	uxth	r3, r3
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	bf14      	ite	ne
 800c0e8:	2301      	movne	r3, #1
 800c0ea:	2300      	moveq	r3, #0
 800c0ec:	b2db      	uxtb	r3, r3
 800c0ee:	4433      	add	r3, r6
 800c0f0:	737b      	strb	r3, [r7, #13]
		uint16_t startAddress = MB_getStartAddress(MB_FC_INDEX+1)+MB_DI_ADDR_OFFSET;
 800c0f2:	2002      	movs	r0, #2
 800c0f4:	f7ff fe68 	bl	800bdc8 <MB_getStartAddress>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 800c0fe:	3311      	adds	r3, #17
 800c100:	817b      	strh	r3, [r7, #10]
		uint16_t endAddress = startAddress + MB_getQuantity(MB_FC_INDEX+3);
 800c102:	2004      	movs	r0, #4
 800c104:	f7ff fe76 	bl	800bdf4 <MB_getQuantity>
 800c108:	4603      	mov	r3, r0
 800c10a:	461a      	mov	r2, r3
 800c10c:	897b      	ldrh	r3, [r7, #10]
 800c10e:	4413      	add	r3, r2
 800c110:	813b      	strh	r3, [r7, #8]
		uint8_t data[byteCount];
 800c112:	7b79      	ldrb	r1, [r7, #13]
 800c114:	460b      	mov	r3, r1
 800c116:	3b01      	subs	r3, #1
 800c118:	607b      	str	r3, [r7, #4]
 800c11a:	b2cb      	uxtb	r3, r1
 800c11c:	2200      	movs	r2, #0
 800c11e:	4698      	mov	r8, r3
 800c120:	4691      	mov	r9, r2
 800c122:	f04f 0200 	mov.w	r2, #0
 800c126:	f04f 0300 	mov.w	r3, #0
 800c12a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c12e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c132:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c136:	b2cb      	uxtb	r3, r1
 800c138:	2200      	movs	r2, #0
 800c13a:	461c      	mov	r4, r3
 800c13c:	4615      	mov	r5, r2
 800c13e:	f04f 0200 	mov.w	r2, #0
 800c142:	f04f 0300 	mov.w	r3, #0
 800c146:	00eb      	lsls	r3, r5, #3
 800c148:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c14c:	00e2      	lsls	r2, r4, #3
 800c14e:	460b      	mov	r3, r1
 800c150:	3307      	adds	r3, #7
 800c152:	08db      	lsrs	r3, r3, #3
 800c154:	00db      	lsls	r3, r3, #3
 800c156:	ebad 0d03 	sub.w	sp, sp, r3
 800c15a:	466b      	mov	r3, sp
 800c15c:	3300      	adds	r3, #0
 800c15e:	603b      	str	r3, [r7, #0]
		if(MB_getDIInByte(data, byteCount, startAddress, endAddress)){
 800c160:	893b      	ldrh	r3, [r7, #8]
 800c162:	897a      	ldrh	r2, [r7, #10]
 800c164:	7b79      	ldrb	r1, [r7, #13]
 800c166:	6838      	ldr	r0, [r7, #0]
 800c168:	f000 faea 	bl	800c740 <MB_getDIInByte>
 800c16c:	4603      	mov	r3, r0
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d017      	beq.n	800c1a2 <MB_readDI+0x10e>
			MB_appendToRespPDU_SAFC();							// to append slave address and function code to response PDU
 800c172:	f7ff fc1b 	bl	800b9ac <MB_appendToRespPDU_SAFC>
			MB_appendToRespPDU(byteCount);  // total response byte
 800c176:	7b7b      	ldrb	r3, [r7, #13]
 800c178:	4618      	mov	r0, r3
 800c17a:	f7ff fbfb 	bl	800b974 <MB_appendToRespPDU>

			for(uint8_t i = 0; i < byteCount; i++){
 800c17e:	2300      	movs	r3, #0
 800c180:	73fb      	strb	r3, [r7, #15]
 800c182:	e008      	b.n	800c196 <MB_readDI+0x102>
				MB_appendToRespPDU(data[i]);
 800c184:	7bfb      	ldrb	r3, [r7, #15]
 800c186:	683a      	ldr	r2, [r7, #0]
 800c188:	5cd3      	ldrb	r3, [r2, r3]
 800c18a:	4618      	mov	r0, r3
 800c18c:	f7ff fbf2 	bl	800b974 <MB_appendToRespPDU>
			for(uint8_t i = 0; i < byteCount; i++){
 800c190:	7bfb      	ldrb	r3, [r7, #15]
 800c192:	3301      	adds	r3, #1
 800c194:	73fb      	strb	r3, [r7, #15]
 800c196:	7bfa      	ldrb	r2, [r7, #15]
 800c198:	7b7b      	ldrb	r3, [r7, #13]
 800c19a:	429a      	cmp	r2, r3
 800c19c:	d3f2      	bcc.n	800c184 <MB_readDI+0xf0>
			}
			return MB_RS_255;
 800c19e:	23ff      	movs	r3, #255	@ 0xff
 800c1a0:	e000      	b.n	800c1a4 <MB_readDI+0x110>
		}else{
			return MB_EC_SDV_4;								// returns exception code 04
 800c1a2:	2304      	movs	r3, #4
 800c1a4:	46d5      	mov	sp, sl
 800c1a6:	e000      	b.n	800c1aa <MB_readDI+0x116>
		}

	}else{													// if exception occurred
		return excepCode;
 800c1a8:	7bbb      	ldrb	r3, [r7, #14]
	}

}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	3710      	adds	r7, #16
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800c1b4 <MB_writeSC>:
 *         - Other exception codes as returned by `MB_checkSCValueAddr()`.
 *
 * @note The function constructs the response by copying the request PDU, and it handles
 *       any errors during the coil writing process.
 */
uint8_t MB_writeSC(void){
 800c1b4:	b590      	push	{r4, r7, lr}
 800c1b6:	b083      	sub	sp, #12
 800c1b8:	af00      	add	r7, sp, #0
	uint8_t excepCode = MB_checkSCValueAddr();
 800c1ba:	f7ff fd8b 	bl	800bcd4 <MB_checkSCValueAddr>
 800c1be:	4603      	mov	r3, r0
 800c1c0:	71fb      	strb	r3, [r7, #7]
	if(excepCode == 0){										// if there is no exception
 800c1c2:	79fb      	ldrb	r3, [r7, #7]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d11f      	bne.n	800c208 <MB_writeSC+0x54>
		if(MB_setCoil(MB_getSCRAddress()+MB_CO_ADDR_OFFSET, MB_getSCRValue())){
 800c1c8:	f7ff fe0c 	bl	800bde4 <MB_getSCRAddress>
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	3301      	adds	r3, #1
 800c1d0:	b29c      	uxth	r4, r3
 800c1d2:	f7ff fe1d 	bl	800be10 <MB_getSCRValue>
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	4619      	mov	r1, r3
 800c1da:	4620      	mov	r0, r4
 800c1dc:	f000 fb2c 	bl	800c838 <MB_setCoil>
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d00e      	beq.n	800c204 <MB_writeSC+0x50>
			memcpy(mbHandle.txBuffer, mbHandle.rxBuffer, mbHandle.rxBufferSize); // 2 is subtracted, case of 2 byte crc will add at the end of the processing
 800c1e6:	4b0b      	ldr	r3, [pc, #44]	@ (800c214 <MB_writeSC+0x60>)
 800c1e8:	685b      	ldr	r3, [r3, #4]
 800c1ea:	4a0a      	ldr	r2, [pc, #40]	@ (800c214 <MB_writeSC+0x60>)
 800c1ec:	6811      	ldr	r1, [r2, #0]
 800c1ee:	4a09      	ldr	r2, [pc, #36]	@ (800c214 <MB_writeSC+0x60>)
 800c1f0:	7a12      	ldrb	r2, [r2, #8]
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	f005 f87d 	bl	80112f2 <memcpy>
			mbHandle.txBufferSize = mbHandle.rxBufferSize; // 2 is subtracted, case of 2 byte crc will add at the end of the processing
 800c1f8:	4b06      	ldr	r3, [pc, #24]	@ (800c214 <MB_writeSC+0x60>)
 800c1fa:	7a1a      	ldrb	r2, [r3, #8]
 800c1fc:	4b05      	ldr	r3, [pc, #20]	@ (800c214 <MB_writeSC+0x60>)
 800c1fe:	725a      	strb	r2, [r3, #9]

			return MB_RS_255;
 800c200:	23ff      	movs	r3, #255	@ 0xff
 800c202:	e002      	b.n	800c20a <MB_writeSC+0x56>
		}else{
			return MB_EC_SDV_4;
 800c204:	2304      	movs	r3, #4
 800c206:	e000      	b.n	800c20a <MB_writeSC+0x56>
		}
	}else{													// if exception occurred
		return excepCode;
 800c208:	79fb      	ldrb	r3, [r7, #7]
	}
}
 800c20a:	4618      	mov	r0, r3
 800c20c:	370c      	adds	r7, #12
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd90      	pop	{r4, r7, pc}
 800c212:	bf00      	nop
 800c214:	20000c38 	.word	0x20000c38

0800c218 <MB_writeMC>:
 *         - Other exception codes as returned by `MB_checkMCQtyAddrByteCount()`.
 *
 * @note The function processes coils byte-by-byte and bit-by-bit, handling
 *       any errors that occur during the writing process.
 */
uint8_t MB_writeMC(void){
 800c218:	b590      	push	{r4, r7, lr}
 800c21a:	b087      	sub	sp, #28
 800c21c:	af00      	add	r7, sp, #0

	uint8_t excepCode = MB_checkMCQtyAddrByteCount();		//TODO: an error is found there, have to solve it
 800c21e:	f7ff fc3d 	bl	800ba9c <MB_checkMCQtyAddrByteCount>
 800c222:	4603      	mov	r3, r0
 800c224:	757b      	strb	r3, [r7, #21]
	if(excepCode == 0){										// if there is no exception
 800c226:	7d7b      	ldrb	r3, [r7, #21]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	f040 8099 	bne.w	800c360 <MB_writeMC+0x148>

		/*------- Test start---------*/


		uint16_t startAddress = MB_getStartAddress(MB_FC_INDEX+1)+MB_CO_ADDR_OFFSET;
 800c22e:	2002      	movs	r0, #2
 800c230:	f7ff fdca 	bl	800bdc8 <MB_getStartAddress>
 800c234:	4603      	mov	r3, r0
 800c236:	3301      	adds	r3, #1
 800c238:	827b      	strh	r3, [r7, #18]
		uint16_t endAddress = startAddress + MB_getQuantity(MB_FC_INDEX+3);
 800c23a:	2004      	movs	r0, #4
 800c23c:	f7ff fdda 	bl	800bdf4 <MB_getQuantity>
 800c240:	4603      	mov	r3, r0
 800c242:	461a      	mov	r2, r3
 800c244:	8a7b      	ldrh	r3, [r7, #18]
 800c246:	4413      	add	r3, r2
 800c248:	823b      	strh	r3, [r7, #16]
		uint8_t byteCount = (MB_getQuantity(MB_FC_INDEX+3)/8)+((MB_getQuantity(MB_FC_INDEX+3)%8)>0);
 800c24a:	2004      	movs	r0, #4
 800c24c:	f7ff fdd2 	bl	800bdf4 <MB_getQuantity>
 800c250:	4603      	mov	r3, r0
 800c252:	08db      	lsrs	r3, r3, #3
 800c254:	b29b      	uxth	r3, r3
 800c256:	b2dc      	uxtb	r4, r3
 800c258:	2004      	movs	r0, #4
 800c25a:	f7ff fdcb 	bl	800bdf4 <MB_getQuantity>
 800c25e:	4603      	mov	r3, r0
 800c260:	f003 0307 	and.w	r3, r3, #7
 800c264:	b29b      	uxth	r3, r3
 800c266:	2b00      	cmp	r3, #0
 800c268:	bf14      	ite	ne
 800c26a:	2301      	movne	r3, #1
 800c26c:	2300      	moveq	r3, #0
 800c26e:	b2db      	uxtb	r3, r3
 800c270:	4423      	add	r3, r4
 800c272:	73fb      	strb	r3, [r7, #15]
		uint16_t startByteIndex = (MB_FC_INDEX+6);
 800c274:	2307      	movs	r3, #7
 800c276:	81bb      	strh	r3, [r7, #12]
		//uint16_t lastByteIndex = (startByteIndex + byteCount-1);

		for(uint8_t byteIndex = 0; byteIndex < byteCount; byteIndex++){
 800c278:	2300      	movs	r3, #0
 800c27a:	75fb      	strb	r3, [r7, #23]
 800c27c:	e03a      	b.n	800c2f4 <MB_writeMC+0xdc>
			uint8_t data = MB_getMCValueInByte((startByteIndex+byteIndex));
 800c27e:	89bb      	ldrh	r3, [r7, #12]
 800c280:	b2da      	uxtb	r2, r3
 800c282:	7dfb      	ldrb	r3, [r7, #23]
 800c284:	4413      	add	r3, r2
 800c286:	b2db      	uxtb	r3, r3
 800c288:	4618      	mov	r0, r3
 800c28a:	f7ff fdc9 	bl	800be20 <MB_getMCValueInByte>
 800c28e:	4603      	mov	r3, r0
 800c290:	727b      	strb	r3, [r7, #9]
			for(uint8_t bitIndex = 0; bitIndex < 8U; bitIndex++){
 800c292:	2300      	movs	r3, #0
 800c294:	75bb      	strb	r3, [r7, #22]
 800c296:	e027      	b.n	800c2e8 <MB_writeMC+0xd0>
				//uint8_t bitValue = ((data>>bitIndex)&0x01);
				uint16_t coilAddress = startAddress+(byteIndex*8U)+bitIndex;
 800c298:	7dfb      	ldrb	r3, [r7, #23]
 800c29a:	b29b      	uxth	r3, r3
 800c29c:	00db      	lsls	r3, r3, #3
 800c29e:	b29a      	uxth	r2, r3
 800c2a0:	8a7b      	ldrh	r3, [r7, #18]
 800c2a2:	4413      	add	r3, r2
 800c2a4:	b29a      	uxth	r2, r3
 800c2a6:	7dbb      	ldrb	r3, [r7, #22]
 800c2a8:	b29b      	uxth	r3, r3
 800c2aa:	4413      	add	r3, r2
 800c2ac:	80fb      	strh	r3, [r7, #6]
				if(coilAddress>=startAddress && coilAddress < endAddress){
 800c2ae:	88fa      	ldrh	r2, [r7, #6]
 800c2b0:	8a7b      	ldrh	r3, [r7, #18]
 800c2b2:	429a      	cmp	r2, r3
 800c2b4:	d31b      	bcc.n	800c2ee <MB_writeMC+0xd6>
 800c2b6:	88fa      	ldrh	r2, [r7, #6]
 800c2b8:	8a3b      	ldrh	r3, [r7, #16]
 800c2ba:	429a      	cmp	r2, r3
 800c2bc:	d217      	bcs.n	800c2ee <MB_writeMC+0xd6>
					if(MB_setCoil(coilAddress, ((data>>bitIndex)&0x01)) == MB_ERROR){
 800c2be:	7a7a      	ldrb	r2, [r7, #9]
 800c2c0:	7dbb      	ldrb	r3, [r7, #22]
 800c2c2:	fa42 f303 	asr.w	r3, r2, r3
 800c2c6:	b29b      	uxth	r3, r3
 800c2c8:	f003 0301 	and.w	r3, r3, #1
 800c2cc:	b29a      	uxth	r2, r3
 800c2ce:	88fb      	ldrh	r3, [r7, #6]
 800c2d0:	4611      	mov	r1, r2
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f000 fab0 	bl	800c838 <MB_setCoil>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d101      	bne.n	800c2e2 <MB_writeMC+0xca>
						return MB_EC_SDV_4;
 800c2de:	2304      	movs	r3, #4
 800c2e0:	e03f      	b.n	800c362 <MB_writeMC+0x14a>
			for(uint8_t bitIndex = 0; bitIndex < 8U; bitIndex++){
 800c2e2:	7dbb      	ldrb	r3, [r7, #22]
 800c2e4:	3301      	adds	r3, #1
 800c2e6:	75bb      	strb	r3, [r7, #22]
 800c2e8:	7dbb      	ldrb	r3, [r7, #22]
 800c2ea:	2b07      	cmp	r3, #7
 800c2ec:	d9d4      	bls.n	800c298 <MB_writeMC+0x80>
		for(uint8_t byteIndex = 0; byteIndex < byteCount; byteIndex++){
 800c2ee:	7dfb      	ldrb	r3, [r7, #23]
 800c2f0:	3301      	adds	r3, #1
 800c2f2:	75fb      	strb	r3, [r7, #23]
 800c2f4:	7dfa      	ldrb	r2, [r7, #23]
 800c2f6:	7bfb      	ldrb	r3, [r7, #15]
 800c2f8:	429a      	cmp	r2, r3
 800c2fa:	d3c0      	bcc.n	800c27e <MB_writeMC+0x66>
				}
			}
		}


			uint16_t andMask = 0x00FF;
 800c2fc:	23ff      	movs	r3, #255	@ 0xff
 800c2fe:	817b      	strh	r3, [r7, #10]
			MB_appendToRespPDU_SAFC();
 800c300:	f7ff fb54 	bl	800b9ac <MB_appendToRespPDU_SAFC>
			MB_appendToRespPDU((uint8_t)(MB_getStartAddress(MB_FC_INDEX+1)>>8));
 800c304:	2002      	movs	r0, #2
 800c306:	f7ff fd5f 	bl	800bdc8 <MB_getStartAddress>
 800c30a:	4603      	mov	r3, r0
 800c30c:	0a1b      	lsrs	r3, r3, #8
 800c30e:	b29b      	uxth	r3, r3
 800c310:	b2db      	uxtb	r3, r3
 800c312:	4618      	mov	r0, r3
 800c314:	f7ff fb2e 	bl	800b974 <MB_appendToRespPDU>
			MB_appendToRespPDU((uint8_t)(MB_getStartAddress(MB_FC_INDEX+1) & andMask));
 800c318:	2002      	movs	r0, #2
 800c31a:	f7ff fd55 	bl	800bdc8 <MB_getStartAddress>
 800c31e:	4603      	mov	r3, r0
 800c320:	b2da      	uxtb	r2, r3
 800c322:	897b      	ldrh	r3, [r7, #10]
 800c324:	b2db      	uxtb	r3, r3
 800c326:	4013      	ands	r3, r2
 800c328:	b2db      	uxtb	r3, r3
 800c32a:	4618      	mov	r0, r3
 800c32c:	f7ff fb22 	bl	800b974 <MB_appendToRespPDU>
			MB_appendToRespPDU((uint8_t)(MB_getQuantity(MB_FC_INDEX+3)>>8));
 800c330:	2004      	movs	r0, #4
 800c332:	f7ff fd5f 	bl	800bdf4 <MB_getQuantity>
 800c336:	4603      	mov	r3, r0
 800c338:	0a1b      	lsrs	r3, r3, #8
 800c33a:	b29b      	uxth	r3, r3
 800c33c:	b2db      	uxtb	r3, r3
 800c33e:	4618      	mov	r0, r3
 800c340:	f7ff fb18 	bl	800b974 <MB_appendToRespPDU>
			MB_appendToRespPDU((uint8_t)(MB_getQuantity(MB_FC_INDEX+3) & andMask));
 800c344:	2004      	movs	r0, #4
 800c346:	f7ff fd55 	bl	800bdf4 <MB_getQuantity>
 800c34a:	4603      	mov	r3, r0
 800c34c:	b2da      	uxtb	r2, r3
 800c34e:	897b      	ldrh	r3, [r7, #10]
 800c350:	b2db      	uxtb	r3, r3
 800c352:	4013      	ands	r3, r2
 800c354:	b2db      	uxtb	r3, r3
 800c356:	4618      	mov	r0, r3
 800c358:	f7ff fb0c 	bl	800b974 <MB_appendToRespPDU>
//			MB_appendToRespPDU_CRC();
		return MB_RS_255;
 800c35c:	23ff      	movs	r3, #255	@ 0xff
 800c35e:	e000      	b.n	800c362 <MB_writeMC+0x14a>
	}else{													// if exception occurred
		return excepCode;
 800c360:	7d7b      	ldrb	r3, [r7, #21]
	}
}
 800c362:	4618      	mov	r0, r3
 800c364:	371c      	adds	r7, #28
 800c366:	46bd      	mov	sp, r7
 800c368:	bd90      	pop	{r4, r7, pc}

0800c36a <MB_readIR>:
 *         - Other exception codes as returned by `MB_checkDataQtyAddr()`.
 *
 * @note The function retrieves the register values as 16-bit data, appends the response PDU,
 *       and sends the result byte by byte.
 */
uint8_t MB_readIR(void){
 800c36a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c36e:	b087      	sub	sp, #28
 800c370:	af00      	add	r7, sp, #0
	uint8_t excepCode = MB_checkDataQtyAddr(MB_getStartAddress(MB_FC_INDEX+1), (MB_IRA_MAX-MB_IR_ADDR_OFFSET),
 800c372:	2002      	movs	r0, #2
 800c374:	f7ff fd28 	bl	800bdc8 <MB_getStartAddress>
 800c378:	4603      	mov	r3, r0
 800c37a:	461e      	mov	r6, r3
 800c37c:	2004      	movs	r0, #4
 800c37e:	f7ff fd39 	bl	800bdf4 <MB_getQuantity>
 800c382:	4603      	mov	r3, r0
 800c384:	461a      	mov	r2, r3
 800c386:	2301      	movs	r3, #1
 800c388:	2101      	movs	r1, #1
 800c38a:	4630      	mov	r0, r6
 800c38c:	f7ff fc12 	bl	800bbb4 <MB_checkDataQtyAddr>
 800c390:	4603      	mov	r3, r0
 800c392:	75bb      	strb	r3, [r7, #22]
						MB_getQuantity(MB_FC_INDEX+3), (MB_IRA_MAX-MB_IR_ADDR_OFFSET));//MB_checkRegisterDataQtyAddr(MB_IRA_MAX);
	if(excepCode == 0){										// if there is no exception
 800c394:	7dbb      	ldrb	r3, [r7, #22]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d172      	bne.n	800c480 <MB_readIR+0x116>
 800c39a:	466b      	mov	r3, sp
 800c39c:	461e      	mov	r6, r3

		uint8_t size = MB_getQuantity(MB_FC_INDEX+3);
 800c39e:	2004      	movs	r0, #4
 800c3a0:	f7ff fd28 	bl	800bdf4 <MB_getQuantity>
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	757b      	strb	r3, [r7, #21]
		uint16_t data[size];
 800c3a8:	7d79      	ldrb	r1, [r7, #21]
 800c3aa:	460b      	mov	r3, r1
 800c3ac:	3b01      	subs	r3, #1
 800c3ae:	613b      	str	r3, [r7, #16]
 800c3b0:	b2cb      	uxtb	r3, r1
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	4698      	mov	r8, r3
 800c3b6:	4691      	mov	r9, r2
 800c3b8:	f04f 0200 	mov.w	r2, #0
 800c3bc:	f04f 0300 	mov.w	r3, #0
 800c3c0:	ea4f 1309 	mov.w	r3, r9, lsl #4
 800c3c4:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 800c3c8:	ea4f 1208 	mov.w	r2, r8, lsl #4
 800c3cc:	b2cb      	uxtb	r3, r1
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	461c      	mov	r4, r3
 800c3d2:	4615      	mov	r5, r2
 800c3d4:	f04f 0200 	mov.w	r2, #0
 800c3d8:	f04f 0300 	mov.w	r3, #0
 800c3dc:	012b      	lsls	r3, r5, #4
 800c3de:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800c3e2:	0122      	lsls	r2, r4, #4
 800c3e4:	460b      	mov	r3, r1
 800c3e6:	005b      	lsls	r3, r3, #1
 800c3e8:	3307      	adds	r3, #7
 800c3ea:	08db      	lsrs	r3, r3, #3
 800c3ec:	00db      	lsls	r3, r3, #3
 800c3ee:	ebad 0d03 	sub.w	sp, sp, r3
 800c3f2:	466b      	mov	r3, sp
 800c3f4:	3301      	adds	r3, #1
 800c3f6:	085b      	lsrs	r3, r3, #1
 800c3f8:	005b      	lsls	r3, r3, #1
 800c3fa:	60fb      	str	r3, [r7, #12]
		uint16_t startAddress =  MB_getStartAddress(MB_FC_INDEX+1)+MB_IR_ADDR_OFFSET;
 800c3fc:	2002      	movs	r0, #2
 800c3fe:	f7ff fce3 	bl	800bdc8 <MB_getStartAddress>
 800c402:	4603      	mov	r3, r0
 800c404:	f503 43ea 	add.w	r3, r3, #29952	@ 0x7500
 800c408:	3331      	adds	r3, #49	@ 0x31
 800c40a:	817b      	strh	r3, [r7, #10]
		uint16_t lastAddress = startAddress+size-1;
 800c40c:	7d7b      	ldrb	r3, [r7, #21]
 800c40e:	b29a      	uxth	r2, r3
 800c410:	897b      	ldrh	r3, [r7, #10]
 800c412:	4413      	add	r3, r2
 800c414:	b29b      	uxth	r3, r3
 800c416:	3b01      	subs	r3, #1
 800c418:	813b      	strh	r3, [r7, #8]

		if(MB_getIRsValue(data, size,  startAddress, lastAddress)){
 800c41a:	893b      	ldrh	r3, [r7, #8]
 800c41c:	897a      	ldrh	r2, [r7, #10]
 800c41e:	7d79      	ldrb	r1, [r7, #21]
 800c420:	68f8      	ldr	r0, [r7, #12]
 800c422:	f7ff fd31 	bl	800be88 <MB_getIRsValue>
 800c426:	4603      	mov	r3, r0
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d026      	beq.n	800c47a <MB_readIR+0x110>


			uint8_t byteCount = size*2;
 800c42c:	7d7b      	ldrb	r3, [r7, #21]
 800c42e:	005b      	lsls	r3, r3, #1
 800c430:	71fb      	strb	r3, [r7, #7]
			MB_appendToRespPDU_SAFC();
 800c432:	f7ff fabb 	bl	800b9ac <MB_appendToRespPDU_SAFC>
			MB_appendToRespPDU(byteCount);
 800c436:	79fb      	ldrb	r3, [r7, #7]
 800c438:	4618      	mov	r0, r3
 800c43a:	f7ff fa9b 	bl	800b974 <MB_appendToRespPDU>
			for(uint8_t i = 0; i < size; i++){
 800c43e:	2300      	movs	r3, #0
 800c440:	75fb      	strb	r3, [r7, #23]
 800c442:	e014      	b.n	800c46e <MB_readIR+0x104>
				MB_appendToRespPDU((uint8_t)(data[i]>>8));
 800c444:	7dfa      	ldrb	r2, [r7, #23]
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800c44c:	0a1b      	lsrs	r3, r3, #8
 800c44e:	b29b      	uxth	r3, r3
 800c450:	b2db      	uxtb	r3, r3
 800c452:	4618      	mov	r0, r3
 800c454:	f7ff fa8e 	bl	800b974 <MB_appendToRespPDU>
				MB_appendToRespPDU((uint8_t)(data[i] & MB_AND_MASK_16T8));
 800c458:	7dfa      	ldrb	r2, [r7, #23]
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800c460:	b2db      	uxtb	r3, r3
 800c462:	4618      	mov	r0, r3
 800c464:	f7ff fa86 	bl	800b974 <MB_appendToRespPDU>
			for(uint8_t i = 0; i < size; i++){
 800c468:	7dfb      	ldrb	r3, [r7, #23]
 800c46a:	3301      	adds	r3, #1
 800c46c:	75fb      	strb	r3, [r7, #23]
 800c46e:	7dfa      	ldrb	r2, [r7, #23]
 800c470:	7d7b      	ldrb	r3, [r7, #21]
 800c472:	429a      	cmp	r2, r3
 800c474:	d3e6      	bcc.n	800c444 <MB_readIR+0xda>
			}
			return MB_RS_255;
 800c476:	23ff      	movs	r3, #255	@ 0xff
 800c478:	e000      	b.n	800c47c <MB_readIR+0x112>
		}else{

			return MB_EC_SDV_4;									// exception - 4 ,  service device failure
 800c47a:	2304      	movs	r3, #4
 800c47c:	46b5      	mov	sp, r6
 800c47e:	e000      	b.n	800c482 <MB_readIR+0x118>
		}

	}else{													// if exception occurred
		return excepCode;
 800c480:	7dbb      	ldrb	r3, [r7, #22]
	}
}
 800c482:	4618      	mov	r0, r3
 800c484:	371c      	adds	r7, #28
 800c486:	46bd      	mov	sp, r7
 800c488:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c48c <MB_readHR>:
 *         - `MB_EC_SDV_4` if there is a service device failure.
 *         - Other exception codes as returned by `MB_checkDataQtyAddr()`.
 *
 * @note This function uses Modbus PDU to append the response.
 */
uint8_t MB_readHR(void){
 800c48c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c490:	b087      	sub	sp, #28
 800c492:	af00      	add	r7, sp, #0
	uint8_t excepCode =  MB_checkDataQtyAddr(MB_getStartAddress(MB_FC_INDEX+1), (MB_HRA_MAX-MB_HR_ADDR_OFFSET),
 800c494:	2002      	movs	r0, #2
 800c496:	f7ff fc97 	bl	800bdc8 <MB_getStartAddress>
 800c49a:	4603      	mov	r3, r0
 800c49c:	461e      	mov	r6, r3
 800c49e:	2004      	movs	r0, #4
 800c4a0:	f7ff fca8 	bl	800bdf4 <MB_getQuantity>
 800c4a4:	4603      	mov	r3, r0
 800c4a6:	461a      	mov	r2, r3
 800c4a8:	2318      	movs	r3, #24
 800c4aa:	2118      	movs	r1, #24
 800c4ac:	4630      	mov	r0, r6
 800c4ae:	f7ff fb81 	bl	800bbb4 <MB_checkDataQtyAddr>
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	75bb      	strb	r3, [r7, #22]
						 MB_getQuantity(MB_FC_INDEX+3), (MB_HRA_MAX-MB_HR_ADDR_OFFSET));//MB_checkRegisterDataQtyAddr(MB_HRA_MAX);
	if(excepCode == 0){										// if there is no exception
 800c4b6:	7dbb      	ldrb	r3, [r7, #22]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d178      	bne.n	800c5ae <MB_readHR+0x122>
 800c4bc:	466b      	mov	r3, sp
 800c4be:	461e      	mov	r6, r3

		/*------- Test start---------*/

		uint8_t size = MB_getQuantity(MB_FC_INDEX+3);		// get the requested quantity
 800c4c0:	2004      	movs	r0, #4
 800c4c2:	f7ff fc97 	bl	800bdf4 <MB_getQuantity>
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	757b      	strb	r3, [r7, #21]
		uint16_t data[size];
 800c4ca:	7d79      	ldrb	r1, [r7, #21]
 800c4cc:	460b      	mov	r3, r1
 800c4ce:	3b01      	subs	r3, #1
 800c4d0:	613b      	str	r3, [r7, #16]
 800c4d2:	b2cb      	uxtb	r3, r1
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	4698      	mov	r8, r3
 800c4d8:	4691      	mov	r9, r2
 800c4da:	f04f 0200 	mov.w	r2, #0
 800c4de:	f04f 0300 	mov.w	r3, #0
 800c4e2:	ea4f 1309 	mov.w	r3, r9, lsl #4
 800c4e6:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 800c4ea:	ea4f 1208 	mov.w	r2, r8, lsl #4
 800c4ee:	b2cb      	uxtb	r3, r1
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	461c      	mov	r4, r3
 800c4f4:	4615      	mov	r5, r2
 800c4f6:	f04f 0200 	mov.w	r2, #0
 800c4fa:	f04f 0300 	mov.w	r3, #0
 800c4fe:	012b      	lsls	r3, r5, #4
 800c500:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800c504:	0122      	lsls	r2, r4, #4
 800c506:	460b      	mov	r3, r1
 800c508:	005b      	lsls	r3, r3, #1
 800c50a:	3307      	adds	r3, #7
 800c50c:	08db      	lsrs	r3, r3, #3
 800c50e:	00db      	lsls	r3, r3, #3
 800c510:	ebad 0d03 	sub.w	sp, sp, r3
 800c514:	466b      	mov	r3, sp
 800c516:	3301      	adds	r3, #1
 800c518:	085b      	lsrs	r3, r3, #1
 800c51a:	005b      	lsls	r3, r3, #1
 800c51c:	60fb      	str	r3, [r7, #12]
		uint16_t startAddress =  MB_getStartAddress(MB_FC_INDEX+1)+MB_HR_ADDR_OFFSET;
 800c51e:	2002      	movs	r0, #2
 800c520:	f7ff fc52 	bl	800bdc8 <MB_getStartAddress>
 800c524:	4603      	mov	r3, r0
 800c526:	f5a3 43c7 	sub.w	r3, r3, #25472	@ 0x6380
 800c52a:	3b3f      	subs	r3, #63	@ 0x3f
 800c52c:	817b      	strh	r3, [r7, #10]
		uint16_t lastAddress = startAddress+size-1;
 800c52e:	7d7b      	ldrb	r3, [r7, #21]
 800c530:	b29a      	uxth	r2, r3
 800c532:	897b      	ldrh	r3, [r7, #10]
 800c534:	4413      	add	r3, r2
 800c536:	b29b      	uxth	r3, r3
 800c538:	3b01      	subs	r3, #1
 800c53a:	813b      	strh	r3, [r7, #8]
		// retrieve registers value and make the response

		if(MB_getHRsValue(data, startAddress, lastAddress)){
 800c53c:	893a      	ldrh	r2, [r7, #8]
 800c53e:	897b      	ldrh	r3, [r7, #10]
 800c540:	4619      	mov	r1, r3
 800c542:	68f8      	ldr	r0, [r7, #12]
 800c544:	f7ff fcd2 	bl	800beec <MB_getHRsValue>
 800c548:	4603      	mov	r3, r0
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d02c      	beq.n	800c5a8 <MB_readHR+0x11c>

			uint16_t andMask = 0x00FF;
 800c54e:	23ff      	movs	r3, #255	@ 0xff
 800c550:	80fb      	strh	r3, [r7, #6]
			uint8_t byteCount = size*2;
 800c552:	7d7b      	ldrb	r3, [r7, #21]
 800c554:	005b      	lsls	r3, r3, #1
 800c556:	717b      	strb	r3, [r7, #5]
			MB_appendToRespPDU_SAFC();
 800c558:	f7ff fa28 	bl	800b9ac <MB_appendToRespPDU_SAFC>
			MB_appendToRespPDU(byteCount);
 800c55c:	797b      	ldrb	r3, [r7, #5]
 800c55e:	4618      	mov	r0, r3
 800c560:	f7ff fa08 	bl	800b974 <MB_appendToRespPDU>
			for(uint8_t i = 0; i < size; i++){
 800c564:	2300      	movs	r3, #0
 800c566:	75fb      	strb	r3, [r7, #23]
 800c568:	e018      	b.n	800c59c <MB_readHR+0x110>
				MB_appendToRespPDU((uint8_t)(data[i]>>8));
 800c56a:	7dfa      	ldrb	r2, [r7, #23]
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800c572:	0a1b      	lsrs	r3, r3, #8
 800c574:	b29b      	uxth	r3, r3
 800c576:	b2db      	uxtb	r3, r3
 800c578:	4618      	mov	r0, r3
 800c57a:	f7ff f9fb 	bl	800b974 <MB_appendToRespPDU>
				MB_appendToRespPDU((uint8_t)(data[i] & andMask));
 800c57e:	7dfa      	ldrb	r2, [r7, #23]
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800c586:	b2da      	uxtb	r2, r3
 800c588:	88fb      	ldrh	r3, [r7, #6]
 800c58a:	b2db      	uxtb	r3, r3
 800c58c:	4013      	ands	r3, r2
 800c58e:	b2db      	uxtb	r3, r3
 800c590:	4618      	mov	r0, r3
 800c592:	f7ff f9ef 	bl	800b974 <MB_appendToRespPDU>
			for(uint8_t i = 0; i < size; i++){
 800c596:	7dfb      	ldrb	r3, [r7, #23]
 800c598:	3301      	adds	r3, #1
 800c59a:	75fb      	strb	r3, [r7, #23]
 800c59c:	7dfa      	ldrb	r2, [r7, #23]
 800c59e:	7d7b      	ldrb	r3, [r7, #21]
 800c5a0:	429a      	cmp	r2, r3
 800c5a2:	d3e2      	bcc.n	800c56a <MB_readHR+0xde>

			}

//			MB_appendToRespPDU_CRC();

			return MB_RS_255;
 800c5a4:	23ff      	movs	r3, #255	@ 0xff
 800c5a6:	e000      	b.n	800c5aa <MB_readHR+0x11e>
		}else{
			return MB_EC_SDV_4;									// exception - 4 ,  service device failure
 800c5a8:	2304      	movs	r3, #4
 800c5aa:	46b5      	mov	sp, r6
 800c5ac:	e000      	b.n	800c5b0 <MB_readHR+0x124>
		}

	}else{													// if exception occurred
		return excepCode;
 800c5ae:	7dbb      	ldrb	r3, [r7, #22]
	}
}
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	371c      	adds	r7, #28
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800c5bc <MB_writeSHR>:
 *
 * @note The function handles the case where the register being set is the slave address,
 *       and updates the response buffer accordingly. It also ensures the response size
 *       accounts for the addition of a CRC at the end of the processing.
 */
uint8_t MB_writeSHR(void){
 800c5bc:	b590      	push	{r4, r7, lr}
 800c5be:	b083      	sub	sp, #12
 800c5c0:	af00      	add	r7, sp, #0
	uint8_t excepCode = MB_checkSRValueAddr();
 800c5c2:	f7ff fbaf 	bl	800bd24 <MB_checkSRValueAddr>
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	71fb      	strb	r3, [r7, #7]
	if(excepCode == 0U){										// if there is no exception
 800c5ca:	79fb      	ldrb	r3, [r7, #7]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d123      	bne.n	800c618 <MB_writeSHR+0x5c>
		if(MB_setHRValue(MB_getSCRAddress()+MB_HR_ADDR_OFFSET, MB_getSCRValue()) == MB_OK){//setSingleRegisterValue(MB_getSCRAddress()+MB_HR_ADDR_OFFSET, MB_getSCRValue())){
 800c5d0:	f7ff fc08 	bl	800bde4 <MB_getSCRAddress>
 800c5d4:	4603      	mov	r3, r0
 800c5d6:	f5a3 43c7 	sub.w	r3, r3, #25472	@ 0x6380
 800c5da:	3b3f      	subs	r3, #63	@ 0x3f
 800c5dc:	b29c      	uxth	r4, r3
 800c5de:	f7ff fc17 	bl	800be10 <MB_getSCRValue>
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	4619      	mov	r1, r3
 800c5e6:	4620      	mov	r0, r4
 800c5e8:	f7ff fcb0 	bl	800bf4c <MB_setHRValue>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	2b01      	cmp	r3, #1
 800c5f0:	d110      	bne.n	800c614 <MB_writeSHR+0x58>
			memcpy(mbHandle.txBuffer, mbHandle.rxBuffer, mbHandle.rxBufferSize);  // 2 is subtracted, case of 2 byte crc will add at the end of the processing
 800c5f2:	4b0c      	ldr	r3, [pc, #48]	@ (800c624 <MB_writeSHR+0x68>)
 800c5f4:	685b      	ldr	r3, [r3, #4]
 800c5f6:	4a0b      	ldr	r2, [pc, #44]	@ (800c624 <MB_writeSHR+0x68>)
 800c5f8:	6811      	ldr	r1, [r2, #0]
 800c5fa:	4a0a      	ldr	r2, [pc, #40]	@ (800c624 <MB_writeSHR+0x68>)
 800c5fc:	7a12      	ldrb	r2, [r2, #8]
 800c5fe:	4618      	mov	r0, r3
 800c600:	f004 fe77 	bl	80112f2 <memcpy>
			if((MB_getSCRAddress()+MB_HR_ADDR_OFFSET) == MB_IRA_SLAVE_ADDRESS){
 800c604:	f7ff fbee 	bl	800bde4 <MB_getSCRAddress>
				mbHandle.txBuffer[MB_SA_INDEX] = MB_getSlaveAddress();
			}
			mbHandle.txBufferSize = mbHandle.rxBufferSize; // 2 is subtracted, case of 2 byte crc will add at the end of the processing
 800c608:	4b06      	ldr	r3, [pc, #24]	@ (800c624 <MB_writeSHR+0x68>)
 800c60a:	7a1a      	ldrb	r2, [r3, #8]
 800c60c:	4b05      	ldr	r3, [pc, #20]	@ (800c624 <MB_writeSHR+0x68>)
 800c60e:	725a      	strb	r2, [r3, #9]
			return MB_RS_255;
 800c610:	23ff      	movs	r3, #255	@ 0xff
 800c612:	e002      	b.n	800c61a <MB_writeSHR+0x5e>
		}else{
			return MB_EC_SDV_4;
 800c614:	2304      	movs	r3, #4
 800c616:	e000      	b.n	800c61a <MB_writeSHR+0x5e>
		}
	}else{													// if exception occurred
		return excepCode;
 800c618:	79fb      	ldrb	r3, [r7, #7]
	}
}
 800c61a:	4618      	mov	r0, r3
 800c61c:	370c      	adds	r7, #12
 800c61e:	46bd      	mov	sp, r7
 800c620:	bd90      	pop	{r4, r7, pc}
 800c622:	bf00      	nop
 800c624:	20000c38 	.word	0x20000c38

0800c628 <MB_writeMHR>:
 * @note The function processes the input data in 2-byte values and updates the
 *       response message to include the start address and quantity of registers written.
 *       Additionally, it updates the slave address in the response if the address being
 *       set corresponds to the slave address.
 */
uint8_t MB_writeMHR(void){
 800c628:	b580      	push	{r7, lr}
 800c62a:	b084      	sub	sp, #16
 800c62c:	af00      	add	r7, sp, #0
	uint8_t excepCode = MB_checkMRQtyAddrByteCount(MB_HRA_MAX);
 800c62e:	f649 4059 	movw	r0, #40025	@ 0x9c59
 800c632:	f7ff fa79 	bl	800bb28 <MB_checkMRQtyAddrByteCount>
 800c636:	4603      	mov	r3, r0
 800c638:	72fb      	strb	r3, [r7, #11]
	if(excepCode == 0){										// if there is no exception
 800c63a:	7afb      	ldrb	r3, [r7, #11]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d165      	bne.n	800c70c <MB_writeMHR+0xe4>

		uint16_t startAddress = MB_getStartAddress(MB_FC_INDEX+1)+MB_HR_ADDR_OFFSET;
 800c640:	2002      	movs	r0, #2
 800c642:	f7ff fbc1 	bl	800bdc8 <MB_getStartAddress>
 800c646:	4603      	mov	r3, r0
 800c648:	f5a3 43c7 	sub.w	r3, r3, #25472	@ 0x6380
 800c64c:	3b3f      	subs	r3, #63	@ 0x3f
 800c64e:	813b      	strh	r3, [r7, #8]
		uint16_t endAddress = startAddress + MB_getQuantity(MB_FC_INDEX+3)-1;
 800c650:	2004      	movs	r0, #4
 800c652:	f7ff fbcf 	bl	800bdf4 <MB_getQuantity>
 800c656:	4603      	mov	r3, r0
 800c658:	461a      	mov	r2, r3
 800c65a:	893b      	ldrh	r3, [r7, #8]
 800c65c:	4413      	add	r3, r2
 800c65e:	b29b      	uxth	r3, r3
 800c660:	3b01      	subs	r3, #1
 800c662:	80fb      	strh	r3, [r7, #6]
//		uint8_t byteCount = MB_getQuantity(MB_FC_INDEX+3);
		//uint16_t startByteIndex = (MB_FC_INDEX+6);
		//uint16_t lastByteIndex = (startByteIndex + byteCount-1);
		uint8_t byteIndex = (MB_FC_INDEX+6);
 800c664:	2307      	movs	r3, #7
 800c666:	73fb      	strb	r3, [r7, #15]
		for(uint16_t regAddress = startAddress; regAddress <= endAddress; regAddress++){
 800c668:	893b      	ldrh	r3, [r7, #8]
 800c66a:	81bb      	strh	r3, [r7, #12]
 800c66c:	e016      	b.n	800c69c <MB_writeMHR+0x74>
			uint16_t data = MB_getMRValueIn2Byte((byteIndex));
 800c66e:	7bfb      	ldrb	r3, [r7, #15]
 800c670:	4618      	mov	r0, r3
 800c672:	f7ff fbe7 	bl	800be44 <MB_getMRValueIn2Byte>
 800c676:	4603      	mov	r3, r0
 800c678:	807b      	strh	r3, [r7, #2]
			byteIndex += 2;
 800c67a:	7bfb      	ldrb	r3, [r7, #15]
 800c67c:	3302      	adds	r3, #2
 800c67e:	73fb      	strb	r3, [r7, #15]
			if(MB_setHRValue(regAddress, data) == MB_ERROR){
 800c680:	887a      	ldrh	r2, [r7, #2]
 800c682:	89bb      	ldrh	r3, [r7, #12]
 800c684:	4611      	mov	r1, r2
 800c686:	4618      	mov	r0, r3
 800c688:	f7ff fc60 	bl	800bf4c <MB_setHRValue>
 800c68c:	4603      	mov	r3, r0
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d101      	bne.n	800c696 <MB_writeMHR+0x6e>
				return MB_EC_SDV_4;
 800c692:	2304      	movs	r3, #4
 800c694:	e03b      	b.n	800c70e <MB_writeMHR+0xe6>
		for(uint16_t regAddress = startAddress; regAddress <= endAddress; regAddress++){
 800c696:	89bb      	ldrh	r3, [r7, #12]
 800c698:	3301      	adds	r3, #1
 800c69a:	81bb      	strh	r3, [r7, #12]
 800c69c:	89ba      	ldrh	r2, [r7, #12]
 800c69e:	88fb      	ldrh	r3, [r7, #6]
 800c6a0:	429a      	cmp	r2, r3
 800c6a2:	d9e4      	bls.n	800c66e <MB_writeMHR+0x46>
			}
		}

		uint16_t andMask = 0x00FF;
 800c6a4:	23ff      	movs	r3, #255	@ 0xff
 800c6a6:	80bb      	strh	r3, [r7, #4]
		MB_appendToRespPDU_SAFC();
 800c6a8:	f7ff f980 	bl	800b9ac <MB_appendToRespPDU_SAFC>
		MB_appendToRespPDU((uint8_t)(MB_getStartAddress(MB_FC_INDEX+1)>>8));
 800c6ac:	2002      	movs	r0, #2
 800c6ae:	f7ff fb8b 	bl	800bdc8 <MB_getStartAddress>
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	0a1b      	lsrs	r3, r3, #8
 800c6b6:	b29b      	uxth	r3, r3
 800c6b8:	b2db      	uxtb	r3, r3
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	f7ff f95a 	bl	800b974 <MB_appendToRespPDU>
		MB_appendToRespPDU((uint8_t)(MB_getStartAddress(MB_FC_INDEX+1) & andMask));
 800c6c0:	2002      	movs	r0, #2
 800c6c2:	f7ff fb81 	bl	800bdc8 <MB_getStartAddress>
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	b2da      	uxtb	r2, r3
 800c6ca:	88bb      	ldrh	r3, [r7, #4]
 800c6cc:	b2db      	uxtb	r3, r3
 800c6ce:	4013      	ands	r3, r2
 800c6d0:	b2db      	uxtb	r3, r3
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f7ff f94e 	bl	800b974 <MB_appendToRespPDU>
		MB_appendToRespPDU((uint8_t)(MB_getQuantity(MB_FC_INDEX+3)>>8));
 800c6d8:	2004      	movs	r0, #4
 800c6da:	f7ff fb8b 	bl	800bdf4 <MB_getQuantity>
 800c6de:	4603      	mov	r3, r0
 800c6e0:	0a1b      	lsrs	r3, r3, #8
 800c6e2:	b29b      	uxth	r3, r3
 800c6e4:	b2db      	uxtb	r3, r3
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	f7ff f944 	bl	800b974 <MB_appendToRespPDU>
		MB_appendToRespPDU((uint8_t)(MB_getQuantity(MB_FC_INDEX+3) & andMask));
 800c6ec:	2004      	movs	r0, #4
 800c6ee:	f7ff fb81 	bl	800bdf4 <MB_getQuantity>
 800c6f2:	4603      	mov	r3, r0
 800c6f4:	b2da      	uxtb	r2, r3
 800c6f6:	88bb      	ldrh	r3, [r7, #4]
 800c6f8:	b2db      	uxtb	r3, r3
 800c6fa:	4013      	ands	r3, r2
 800c6fc:	b2db      	uxtb	r3, r3
 800c6fe:	4618      	mov	r0, r3
 800c700:	f7ff f938 	bl	800b974 <MB_appendToRespPDU>
//		MB_appendToRespPDU_CRC();

		if((MB_getSCRAddress()+MB_HR_ADDR_OFFSET) == MB_IRA_SLAVE_ADDRESS){
 800c704:	f7ff fb6e 	bl	800bde4 <MB_getSCRAddress>
			mbHandle.txBuffer[MB_SA_INDEX] = MB_getSlaveAddress();
		}

		return MB_RS_255;
 800c708:	23ff      	movs	r3, #255	@ 0xff
 800c70a:	e000      	b.n	800c70e <MB_writeMHR+0xe6>
	}else{													// if exception occurred
		return excepCode;
 800c70c:	7afb      	ldrb	r3, [r7, #11]
	}
}
 800c70e:	4618      	mov	r0, r3
 800c710:	3710      	adds	r7, #16
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}
	...

0800c718 <MB_getDI>:



/*--------- callback function ------------*/

uint8_t MB_getDI(uint16_t address, uint8_t *value){
 800c718:	b580      	push	{r7, lr}
 800c71a:	b082      	sub	sp, #8
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	4603      	mov	r3, r0
 800c720:	6039      	str	r1, [r7, #0]
 800c722:	80fb      	strh	r3, [r7, #6]
	return MB_readDICallback(address, value);
 800c724:	4b05      	ldr	r3, [pc, #20]	@ (800c73c <MB_getDI+0x24>)
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	88fa      	ldrh	r2, [r7, #6]
 800c72a:	6839      	ldr	r1, [r7, #0]
 800c72c:	4610      	mov	r0, r2
 800c72e:	4798      	blx	r3
 800c730:	4603      	mov	r3, r0
}
 800c732:	4618      	mov	r0, r3
 800c734:	3708      	adds	r7, #8
 800c736:	46bd      	mov	sp, r7
 800c738:	bd80      	pop	{r7, pc}
 800c73a:	bf00      	nop
 800c73c:	20000c44 	.word	0x20000c44

0800c740 <MB_getDIInByte>:

uint8_t MB_getDIInByte(uint8_t *byteArray, uint8_t size, uint16_t startAddress, uint16_t endAddress){
 800c740:	b580      	push	{r7, lr}
 800c742:	b086      	sub	sp, #24
 800c744:	af00      	add	r7, sp, #0
 800c746:	60f8      	str	r0, [r7, #12]
 800c748:	4608      	mov	r0, r1
 800c74a:	4611      	mov	r1, r2
 800c74c:	461a      	mov	r2, r3
 800c74e:	4603      	mov	r3, r0
 800c750:	72fb      	strb	r3, [r7, #11]
 800c752:	460b      	mov	r3, r1
 800c754:	813b      	strh	r3, [r7, #8]
 800c756:	4613      	mov	r3, r2
 800c758:	80fb      	strh	r3, [r7, #6]
	volatile uint8_t byteCount = 0;
 800c75a:	2300      	movs	r3, #0
 800c75c:	757b      	strb	r3, [r7, #21]
	volatile uint8_t dataByte = 0;
 800c75e:	2300      	movs	r3, #0
 800c760:	753b      	strb	r3, [r7, #20]
	volatile uint8_t bitCount = 0;
 800c762:	2300      	movs	r3, #0
 800c764:	74fb      	strb	r3, [r7, #19]

	for(uint16_t i = startAddress; i < endAddress; i++){
 800c766:	893b      	ldrh	r3, [r7, #8]
 800c768:	82fb      	strh	r3, [r7, #22]
 800c76a:	e041      	b.n	800c7f0 <MB_getDIInByte+0xb0>
		uint8_t data = 0;
 800c76c:	2300      	movs	r3, #0
 800c76e:	74bb      	strb	r3, [r7, #18]
		if(MB_getDI(i, &data)){
 800c770:	f107 0212 	add.w	r2, r7, #18
 800c774:	8afb      	ldrh	r3, [r7, #22]
 800c776:	4611      	mov	r1, r2
 800c778:	4618      	mov	r0, r3
 800c77a:	f7ff ffcd 	bl	800c718 <MB_getDI>
 800c77e:	4603      	mov	r3, r0
 800c780:	2b00      	cmp	r3, #0
 800c782:	d030      	beq.n	800c7e6 <MB_getDIInByte+0xa6>
			if(data >=0 && data <=1){
 800c784:	7cbb      	ldrb	r3, [r7, #18]
 800c786:	2b01      	cmp	r3, #1
 800c788:	d82b      	bhi.n	800c7e2 <MB_getDIInByte+0xa2>
				dataByte |= data<<(bitCount++);
 800c78a:	7cbb      	ldrb	r3, [r7, #18]
 800c78c:	461a      	mov	r2, r3
 800c78e:	7cfb      	ldrb	r3, [r7, #19]
 800c790:	b2db      	uxtb	r3, r3
 800c792:	1c59      	adds	r1, r3, #1
 800c794:	b2c9      	uxtb	r1, r1
 800c796:	74f9      	strb	r1, [r7, #19]
 800c798:	fa02 f303 	lsl.w	r3, r2, r3
 800c79c:	b25a      	sxtb	r2, r3
 800c79e:	7d3b      	ldrb	r3, [r7, #20]
 800c7a0:	b2db      	uxtb	r3, r3
 800c7a2:	b25b      	sxtb	r3, r3
 800c7a4:	4313      	orrs	r3, r2
 800c7a6:	b25b      	sxtb	r3, r3
 800c7a8:	b2db      	uxtb	r3, r3
 800c7aa:	753b      	strb	r3, [r7, #20]
				if(bitCount>=8){
 800c7ac:	7cfb      	ldrb	r3, [r7, #19]
 800c7ae:	b2db      	uxtb	r3, r3
 800c7b0:	2b07      	cmp	r3, #7
 800c7b2:	d91a      	bls.n	800c7ea <MB_getDIInByte+0xaa>
					if(byteCount < size){
 800c7b4:	7d7b      	ldrb	r3, [r7, #21]
 800c7b6:	b2db      	uxtb	r3, r3
 800c7b8:	7afa      	ldrb	r2, [r7, #11]
 800c7ba:	429a      	cmp	r2, r3
 800c7bc:	d90f      	bls.n	800c7de <MB_getDIInByte+0x9e>
						byteArray[byteCount++] = dataByte;
 800c7be:	7d7b      	ldrb	r3, [r7, #21]
 800c7c0:	b2db      	uxtb	r3, r3
 800c7c2:	1c5a      	adds	r2, r3, #1
 800c7c4:	b2d2      	uxtb	r2, r2
 800c7c6:	757a      	strb	r2, [r7, #21]
 800c7c8:	461a      	mov	r2, r3
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	4413      	add	r3, r2
 800c7ce:	7d3a      	ldrb	r2, [r7, #20]
 800c7d0:	b2d2      	uxtb	r2, r2
 800c7d2:	701a      	strb	r2, [r3, #0]
						dataByte = 0;
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	753b      	strb	r3, [r7, #20]
						bitCount=0;
 800c7d8:	2300      	movs	r3, #0
 800c7da:	74fb      	strb	r3, [r7, #19]
 800c7dc:	e005      	b.n	800c7ea <MB_getDIInByte+0xaa>
					}else{
						return MB_ERROR;
 800c7de:	2300      	movs	r3, #0
 800c7e0:	e026      	b.n	800c830 <MB_getDIInByte+0xf0>
					}
				}
			}else{
				return MB_ERROR;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	e024      	b.n	800c830 <MB_getDIInByte+0xf0>
			}
		}else{
			return MB_ERROR;
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	e022      	b.n	800c830 <MB_getDIInByte+0xf0>
	for(uint16_t i = startAddress; i < endAddress; i++){
 800c7ea:	8afb      	ldrh	r3, [r7, #22]
 800c7ec:	3301      	adds	r3, #1
 800c7ee:	82fb      	strh	r3, [r7, #22]
 800c7f0:	8afa      	ldrh	r2, [r7, #22]
 800c7f2:	88fb      	ldrh	r3, [r7, #6]
 800c7f4:	429a      	cmp	r2, r3
 800c7f6:	d3b9      	bcc.n	800c76c <MB_getDIInByte+0x2c>
		}
	}
	if( bitCount > 0 && bitCount < 8){
 800c7f8:	7cfb      	ldrb	r3, [r7, #19]
 800c7fa:	b2db      	uxtb	r3, r3
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d016      	beq.n	800c82e <MB_getDIInByte+0xee>
 800c800:	7cfb      	ldrb	r3, [r7, #19]
 800c802:	b2db      	uxtb	r3, r3
 800c804:	2b07      	cmp	r3, #7
 800c806:	d812      	bhi.n	800c82e <MB_getDIInByte+0xee>
		if(byteCount < size){
 800c808:	7d7b      	ldrb	r3, [r7, #21]
 800c80a:	b2db      	uxtb	r3, r3
 800c80c:	7afa      	ldrb	r2, [r7, #11]
 800c80e:	429a      	cmp	r2, r3
 800c810:	d90b      	bls.n	800c82a <MB_getDIInByte+0xea>
			byteArray[byteCount++] = dataByte;
 800c812:	7d7b      	ldrb	r3, [r7, #21]
 800c814:	b2db      	uxtb	r3, r3
 800c816:	1c5a      	adds	r2, r3, #1
 800c818:	b2d2      	uxtb	r2, r2
 800c81a:	757a      	strb	r2, [r7, #21]
 800c81c:	461a      	mov	r2, r3
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	4413      	add	r3, r2
 800c822:	7d3a      	ldrb	r2, [r7, #20]
 800c824:	b2d2      	uxtb	r2, r2
 800c826:	701a      	strb	r2, [r3, #0]
 800c828:	e001      	b.n	800c82e <MB_getDIInByte+0xee>
		}else{
			return MB_ERROR;
 800c82a:	2300      	movs	r3, #0
 800c82c:	e000      	b.n	800c830 <MB_getDIInByte+0xf0>
		}
		//byteCount++;
	}

	return MB_OK;
 800c82e:	2301      	movs	r3, #1
}
 800c830:	4618      	mov	r0, r3
 800c832:	3718      	adds	r7, #24
 800c834:	46bd      	mov	sp, r7
 800c836:	bd80      	pop	{r7, pc}

0800c838 <MB_setCoil>:
/**
  * @brief sets coil output
  * @param address: address of the holding register
  * @retval holding register value
  */
uint8_t MB_setCoil(uint16_t address, uint16_t value){
 800c838:	b580      	push	{r7, lr}
 800c83a:	b082      	sub	sp, #8
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	4603      	mov	r3, r0
 800c840:	460a      	mov	r2, r1
 800c842:	80fb      	strh	r3, [r7, #6]
 800c844:	4613      	mov	r3, r2
 800c846:	80bb      	strh	r3, [r7, #4]

	return MB_writeCOCallback(address, (value > 0));
 800c848:	4b08      	ldr	r3, [pc, #32]	@ (800c86c <MB_setCoil+0x34>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	88fa      	ldrh	r2, [r7, #6]
 800c84e:	b2d0      	uxtb	r0, r2
 800c850:	88ba      	ldrh	r2, [r7, #4]
 800c852:	2a00      	cmp	r2, #0
 800c854:	bf14      	ite	ne
 800c856:	2201      	movne	r2, #1
 800c858:	2200      	moveq	r2, #0
 800c85a:	b2d2      	uxtb	r2, r2
 800c85c:	4611      	mov	r1, r2
 800c85e:	4798      	blx	r3
 800c860:	4603      	mov	r3, r0
	//return (address-MB_C_ADDR_OFFSET >= 0 && address-MB_C_ADDR_OFFSET <= MB_MAX_CR_ADDR);
}
 800c862:	4618      	mov	r0, r3
 800c864:	3708      	adds	r7, #8
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}
 800c86a:	bf00      	nop
 800c86c:	20000c48 	.word	0x20000c48

0800c870 <MB_getCoil>:


uint8_t MB_getCoil( uint16_t address, uint8_t *value){
 800c870:	b580      	push	{r7, lr}
 800c872:	b082      	sub	sp, #8
 800c874:	af00      	add	r7, sp, #0
 800c876:	4603      	mov	r3, r0
 800c878:	6039      	str	r1, [r7, #0]
 800c87a:	80fb      	strh	r3, [r7, #6]
	return MB_readCOCallback(address, value);
 800c87c:	4b05      	ldr	r3, [pc, #20]	@ (800c894 <MB_getCoil+0x24>)
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	88fa      	ldrh	r2, [r7, #6]
 800c882:	b2d2      	uxtb	r2, r2
 800c884:	6839      	ldr	r1, [r7, #0]
 800c886:	4610      	mov	r0, r2
 800c888:	4798      	blx	r3
 800c88a:	4603      	mov	r3, r0
}
 800c88c:	4618      	mov	r0, r3
 800c88e:	3708      	adds	r7, #8
 800c890:	46bd      	mov	sp, r7
 800c892:	bd80      	pop	{r7, pc}
 800c894:	20000c4c 	.word	0x20000c4c

0800c898 <MB_getCoilsInByte>:
uint8_t MB_getCoilsInByte(uint8_t *byteArray, uint8_t size, uint16_t startAddress, uint16_t endAddress){
 800c898:	b580      	push	{r7, lr}
 800c89a:	b086      	sub	sp, #24
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	60f8      	str	r0, [r7, #12]
 800c8a0:	4608      	mov	r0, r1
 800c8a2:	4611      	mov	r1, r2
 800c8a4:	461a      	mov	r2, r3
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	72fb      	strb	r3, [r7, #11]
 800c8aa:	460b      	mov	r3, r1
 800c8ac:	813b      	strh	r3, [r7, #8]
 800c8ae:	4613      	mov	r3, r2
 800c8b0:	80fb      	strh	r3, [r7, #6]
	uint8_t byteCount = 0;
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	75fb      	strb	r3, [r7, #23]
	uint8_t dataByte = 0;
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	75bb      	strb	r3, [r7, #22]
	uint8_t bitCount = 0;
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	757b      	strb	r3, [r7, #21]

	for(uint16_t i = startAddress; i < endAddress; i++){
 800c8be:	893b      	ldrh	r3, [r7, #8]
 800c8c0:	827b      	strh	r3, [r7, #18]
 800c8c2:	e038      	b.n	800c936 <MB_getCoilsInByte+0x9e>
		uint8_t data=0;
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	747b      	strb	r3, [r7, #17]
		if(MB_getCoil(i, &data)){
 800c8c8:	f107 0211 	add.w	r2, r7, #17
 800c8cc:	8a7b      	ldrh	r3, [r7, #18]
 800c8ce:	4611      	mov	r1, r2
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	f7ff ffcd 	bl	800c870 <MB_getCoil>
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d027      	beq.n	800c92c <MB_getCoilsInByte+0x94>
			if(data >=0 && data <=1){
 800c8dc:	7c7b      	ldrb	r3, [r7, #17]
 800c8de:	2b01      	cmp	r3, #1
 800c8e0:	d822      	bhi.n	800c928 <MB_getCoilsInByte+0x90>
				dataByte |= data<<(bitCount++);
 800c8e2:	7c7b      	ldrb	r3, [r7, #17]
 800c8e4:	461a      	mov	r2, r3
 800c8e6:	7d7b      	ldrb	r3, [r7, #21]
 800c8e8:	1c59      	adds	r1, r3, #1
 800c8ea:	7579      	strb	r1, [r7, #21]
 800c8ec:	fa02 f303 	lsl.w	r3, r2, r3
 800c8f0:	b25a      	sxtb	r2, r3
 800c8f2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800c8f6:	4313      	orrs	r3, r2
 800c8f8:	b25b      	sxtb	r3, r3
 800c8fa:	75bb      	strb	r3, [r7, #22]
				if(bitCount>=8){
 800c8fc:	7d7b      	ldrb	r3, [r7, #21]
 800c8fe:	2b07      	cmp	r3, #7
 800c900:	d916      	bls.n	800c930 <MB_getCoilsInByte+0x98>
					if(byteCount < size){
 800c902:	7dfa      	ldrb	r2, [r7, #23]
 800c904:	7afb      	ldrb	r3, [r7, #11]
 800c906:	429a      	cmp	r2, r3
 800c908:	d20c      	bcs.n	800c924 <MB_getCoilsInByte+0x8c>
						byteArray[byteCount++] = dataByte;
 800c90a:	7dfb      	ldrb	r3, [r7, #23]
 800c90c:	1c5a      	adds	r2, r3, #1
 800c90e:	75fa      	strb	r2, [r7, #23]
 800c910:	461a      	mov	r2, r3
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	4413      	add	r3, r2
 800c916:	7dba      	ldrb	r2, [r7, #22]
 800c918:	701a      	strb	r2, [r3, #0]
						dataByte = 0;
 800c91a:	2300      	movs	r3, #0
 800c91c:	75bb      	strb	r3, [r7, #22]
						bitCount=0;
 800c91e:	2300      	movs	r3, #0
 800c920:	757b      	strb	r3, [r7, #21]
 800c922:	e005      	b.n	800c930 <MB_getCoilsInByte+0x98>
					}else{
						return MB_ERROR;
 800c924:	2300      	movs	r3, #0
 800c926:	e020      	b.n	800c96a <MB_getCoilsInByte+0xd2>
					}
				}
			}else{
				return MB_ERROR;
 800c928:	2300      	movs	r3, #0
 800c92a:	e01e      	b.n	800c96a <MB_getCoilsInByte+0xd2>
			}
		}else{
			return MB_ERROR;
 800c92c:	2300      	movs	r3, #0
 800c92e:	e01c      	b.n	800c96a <MB_getCoilsInByte+0xd2>
	for(uint16_t i = startAddress; i < endAddress; i++){
 800c930:	8a7b      	ldrh	r3, [r7, #18]
 800c932:	3301      	adds	r3, #1
 800c934:	827b      	strh	r3, [r7, #18]
 800c936:	8a7a      	ldrh	r2, [r7, #18]
 800c938:	88fb      	ldrh	r3, [r7, #6]
 800c93a:	429a      	cmp	r2, r3
 800c93c:	d3c2      	bcc.n	800c8c4 <MB_getCoilsInByte+0x2c>
		}
	}
	if( bitCount > 0 && bitCount < 8){
 800c93e:	7d7b      	ldrb	r3, [r7, #21]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d011      	beq.n	800c968 <MB_getCoilsInByte+0xd0>
 800c944:	7d7b      	ldrb	r3, [r7, #21]
 800c946:	2b07      	cmp	r3, #7
 800c948:	d80e      	bhi.n	800c968 <MB_getCoilsInByte+0xd0>
		if(byteCount < size){
 800c94a:	7dfa      	ldrb	r2, [r7, #23]
 800c94c:	7afb      	ldrb	r3, [r7, #11]
 800c94e:	429a      	cmp	r2, r3
 800c950:	d208      	bcs.n	800c964 <MB_getCoilsInByte+0xcc>
			byteArray[byteCount++] = dataByte;
 800c952:	7dfb      	ldrb	r3, [r7, #23]
 800c954:	1c5a      	adds	r2, r3, #1
 800c956:	75fa      	strb	r2, [r7, #23]
 800c958:	461a      	mov	r2, r3
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	4413      	add	r3, r2
 800c95e:	7dba      	ldrb	r2, [r7, #22]
 800c960:	701a      	strb	r2, [r3, #0]
 800c962:	e001      	b.n	800c968 <MB_getCoilsInByte+0xd0>
		}else{
			return MB_ERROR;
 800c964:	2300      	movs	r3, #0
 800c966:	e000      	b.n	800c96a <MB_getCoilsInByte+0xd2>
		}
		//byteCount++;
	}

	return MB_OK;
 800c968:	2301      	movs	r3, #1
}
 800c96a:	4618      	mov	r0, r3
 800c96c:	3718      	adds	r7, #24
 800c96e:	46bd      	mov	sp, r7
 800c970:	bd80      	pop	{r7, pc}
	...

0800c974 <MB_attachDICallback>:
 * @param callbackReadFunc Pointer to the function that reads discrete
 *                         inputs. The function should match the
 *                         signature:
 *                         `uint8_t callback(MB_DIAddrEnum address, uint8_t *value)`.
 */
void MB_attachDICallback(uint8_t (*callbackReadFunc)( MB_DIAddrEnum address, uint8_t *value)){
 800c974:	b480      	push	{r7}
 800c976:	b083      	sub	sp, #12
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
	MB_readDICallback = callbackReadFunc;
 800c97c:	4a04      	ldr	r2, [pc, #16]	@ (800c990 <MB_attachDICallback+0x1c>)
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	6013      	str	r3, [r2, #0]
}
 800c982:	bf00      	nop
 800c984:	370c      	adds	r7, #12
 800c986:	46bd      	mov	sp, r7
 800c988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98c:	4770      	bx	lr
 800c98e:	bf00      	nop
 800c990:	20000c44 	.word	0x20000c44

0800c994 <MB_attachCOCallback>:
 * @param callbackReadFunc Pointer to the function that reads coil
 *                         outputs. The function should match the
 *                         signature:
 *                         `uint8_t callback(MB_CoilAddrEnum address, uint8_t *value)`.
 */
void MB_attachCOCallback(uint8_t (*callbackWriteFunc)(MB_CoilAddrEnum address, uint8_t value), uint8_t (*callbackReadFunc)(MB_CoilAddrEnum address, uint8_t *value)){
 800c994:	b480      	push	{r7}
 800c996:	b083      	sub	sp, #12
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
 800c99c:	6039      	str	r1, [r7, #0]
	MB_writeCOCallback = callbackWriteFunc;
 800c99e:	4a06      	ldr	r2, [pc, #24]	@ (800c9b8 <MB_attachCOCallback+0x24>)
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	6013      	str	r3, [r2, #0]
	MB_readCOCallback = callbackReadFunc;
 800c9a4:	4a05      	ldr	r2, [pc, #20]	@ (800c9bc <MB_attachCOCallback+0x28>)
 800c9a6:	683b      	ldr	r3, [r7, #0]
 800c9a8:	6013      	str	r3, [r2, #0]
}
 800c9aa:	bf00      	nop
 800c9ac:	370c      	adds	r7, #12
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b4:	4770      	bx	lr
 800c9b6:	bf00      	nop
 800c9b8:	20000c48 	.word	0x20000c48
 800c9bc:	20000c4c 	.word	0x20000c4c

0800c9c0 <MB_attachIRCallback>:
 * @param callbackReadFunc Pointer to the function that reads input
 *                         registers. The function should match the
 *                         signature:
 *                         `uint8_t callback(MB_IRAddrEnum address, uint16_t *value)`.
 */
void MB_attachIRCallback(uint8_t (*callbackReadFunc)(MB_IRAddrEnum address, uint16_t *value)){
 800c9c0:	b480      	push	{r7}
 800c9c2:	b083      	sub	sp, #12
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
	MB_readIRCallback = callbackReadFunc;
 800c9c8:	4a04      	ldr	r2, [pc, #16]	@ (800c9dc <MB_attachIRCallback+0x1c>)
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	6013      	str	r3, [r2, #0]
}
 800c9ce:	bf00      	nop
 800c9d0:	370c      	adds	r7, #12
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d8:	4770      	bx	lr
 800c9da:	bf00      	nop
 800c9dc:	20000c50 	.word	0x20000c50

0800c9e0 <MB_attachHRCallback>:
 * @param callbackReadFunc Pointer to the function that reads holding
 *                         registers. The function should match the
 *                         signature:
 *                         `uint8_t callback(MB_HRAddrEnum address, uint16_t *value)`.
 */
void MB_attachHRCallback(uint8_t (*callbackWriteFunc)(MB_HRAddrEnum address, uint16_t value), uint8_t (*callbackReadFunc)(MB_HRAddrEnum address, uint16_t *value)){
 800c9e0:	b480      	push	{r7}
 800c9e2:	b083      	sub	sp, #12
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
 800c9e8:	6039      	str	r1, [r7, #0]
	MB_writeHRCallback = callbackWriteFunc;
 800c9ea:	4a06      	ldr	r2, [pc, #24]	@ (800ca04 <MB_attachHRCallback+0x24>)
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	6013      	str	r3, [r2, #0]
	MB_readHRCallback = callbackReadFunc;
 800c9f0:	4a05      	ldr	r2, [pc, #20]	@ (800ca08 <MB_attachHRCallback+0x28>)
 800c9f2:	683b      	ldr	r3, [r7, #0]
 800c9f4:	6013      	str	r3, [r2, #0]
}
 800c9f6:	bf00      	nop
 800c9f8:	370c      	adds	r7, #12
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca00:	4770      	bx	lr
 800ca02:	bf00      	nop
 800ca04:	20000c54 	.word	0x20000c54
 800ca08:	20000c58 	.word	0x20000c58

0800ca0c <MBRS_Init>:
#include "MB_CRC.h"
#include "MB_Serial.h"


static MB_RTUSlave *slv;
void MBRS_Init(MB_RTUSlave *mbSlave,uint8_t slaveAddress){
 800ca0c:	b480      	push	{r7}
 800ca0e:	b083      	sub	sp, #12
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
 800ca14:	460b      	mov	r3, r1
 800ca16:	70fb      	strb	r3, [r7, #3]
	slv = mbSlave;
 800ca18:	4a06      	ldr	r2, [pc, #24]	@ (800ca34 <MBRS_Init+0x28>)
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	6013      	str	r3, [r2, #0]
	slv->slave_address = slaveAddress;
 800ca1e:	4b05      	ldr	r3, [pc, #20]	@ (800ca34 <MBRS_Init+0x28>)
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	78fa      	ldrb	r2, [r7, #3]
 800ca24:	701a      	strb	r2, [r3, #0]
}
 800ca26:	bf00      	nop
 800ca28:	370c      	adds	r7, #12
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca30:	4770      	bx	lr
 800ca32:	bf00      	nop
 800ca34:	20000c5c 	.word	0x20000c5c

0800ca38 <MBRS_GetInstance>:

MB_RTUSlave *MBRS_GetInstance(void){
 800ca38:	b480      	push	{r7}
 800ca3a:	af00      	add	r7, sp, #0
	return slv;
 800ca3c:	4b03      	ldr	r3, [pc, #12]	@ (800ca4c <MBRS_GetInstance+0x14>)
 800ca3e:	681b      	ldr	r3, [r3, #0]
}
 800ca40:	4618      	mov	r0, r3
 800ca42:	46bd      	mov	sp, r7
 800ca44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca48:	4770      	bx	lr
 800ca4a:	bf00      	nop
 800ca4c:	20000c5c 	.word	0x20000c5c

0800ca50 <MBRS_processRequest>:
  *
  * @param none
  *
  * @retval 0 & 1, if returns 0 do nothing, else send the response to the master
  */
uint8_t MBRS_processRequest(MB_RTUSlave *mbSlave){
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b084      	sub	sp, #16
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
		 * all active communication controls are turned off
		 * and  any MODBUS messages addressed to it or broadcast are monitored,
		 * but no actions will be taken and no responses will be sent
		 * */

	MB_setReqBuff(mbSlave->rxBuffer, mbSlave->rxBufferSize);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	685a      	ldr	r2, [r3, #4]
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	7b1b      	ldrb	r3, [r3, #12]
 800ca60:	4619      	mov	r1, r3
 800ca62:	4610      	mov	r0, r2
 800ca64:	f7fe fec6 	bl	800b7f4 <MB_setReqBuff>
	MB_setRespBuff(mbSlave->txBuffer);
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	689b      	ldr	r3, [r3, #8]
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	f7fe fed5 	bl	800b81c <MB_setRespBuff>
	uint8_t processStatus = 0u;
 800ca72:	2300      	movs	r3, #0
 800ca74:	73fb      	strb	r3, [r7, #15]
	uint8_t funCode = MB_getFunctionCode();
 800ca76:	f7ff f99b 	bl	800bdb0 <MB_getFunctionCode>
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	73bb      	strb	r3, [r7, #14]


		// check function code

		if( MB_isFunctionCodeValid(funCode)>0U){									// if the function code is valid
 800ca7e:	7bbb      	ldrb	r3, [r7, #14]
 800ca80:	4618      	mov	r0, r3
 800ca82:	f7fe ffe4 	bl	800ba4e <MB_isFunctionCodeValid>
 800ca86:	4603      	mov	r3, r0
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d006      	beq.n	800ca9a <MBRS_processRequest+0x4a>
			processStatus = MB_executeRequest(funCode);						//  MB_executeRequest() will return 0x04 and 0xFF, 0x04 = exception occured and 0xFF = no exception
 800ca8c:	7bbb      	ldrb	r3, [r7, #14]
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f7fe fee0 	bl	800b854 <MB_executeRequest>
 800ca94:	4603      	mov	r3, r0
 800ca96:	73fb      	strb	r3, [r7, #15]
 800ca98:	e001      	b.n	800ca9e <MBRS_processRequest+0x4e>

		}else{
			processStatus = MB_EC_ILF_1;									// exception code 1 for illegal function code
 800ca9a:	2301      	movs	r3, #1
 800ca9c:	73fb      	strb	r3, [r7, #15]
		}
		if (processStatus != 0u){
 800ca9e:	7bfb      	ldrb	r3, [r7, #15]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d02a      	beq.n	800cafa <MBRS_processRequest+0xaa>
			if(processStatus != MB_RS_255 && processStatus != MB_NRS_254){	// for exception response
 800caa4:	7bfb      	ldrb	r3, [r7, #15]
 800caa6:	2bff      	cmp	r3, #255	@ 0xff
 800caa8:	d007      	beq.n	800caba <MBRS_processRequest+0x6a>
 800caaa:	7bfb      	ldrb	r3, [r7, #15]
 800caac:	2bfe      	cmp	r3, #254	@ 0xfe
 800caae:	d004      	beq.n	800caba <MBRS_processRequest+0x6a>

				MB_excepRespBuilder(processStatus);						// processStatus = 255 means, no exception and the response has been built
 800cab0:	7bfb      	ldrb	r3, [r7, #15]
 800cab2:	4618      	mov	r0, r3
 800cab4:	f7fe ffb0 	bl	800ba18 <MB_excepRespBuilder>
 800cab8:	e004      	b.n	800cac4 <MBRS_processRequest+0x74>
			}else{															// for normal response
				if(processStatus == MB_NRS_254){
 800caba:	7bfb      	ldrb	r3, [r7, #15]
 800cabc:	2bfe      	cmp	r3, #254	@ 0xfe
 800cabe:	d101      	bne.n	800cac4 <MBRS_processRequest+0x74>
					return 0U;
 800cac0:	2300      	movs	r3, #0
 800cac2:	e01b      	b.n	800cafc <MBRS_processRequest+0xac>
				}
			}
			if((mbSlave->rxBuffer[MB_SA_INDEX] != MB_BROADCAST_ADDR)){
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	685b      	ldr	r3, [r3, #4]
 800cac8:	781b      	ldrb	r3, [r3, #0]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d015      	beq.n	800cafa <MBRS_processRequest+0xaa>
				MB_appendToRespPDU_CRC();
 800cace:	f7fe ff7d 	bl	800b9cc <MB_appendToRespPDU_CRC>
				mbSlave->txBufferSize = MB_getRespBuffSize();
 800cad2:	f7fe feb3 	bl	800b83c <MB_getRespBuffSize>
 800cad6:	4603      	mov	r3, r0
 800cad8:	461a      	mov	r2, r3
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	735a      	strb	r2, [r3, #13]
				if(funCode == MB_FC_WSC_05 || funCode == MB_FC_WSR_06) {mbSlave->txBufferSize -= 2;}
 800cade:	7bbb      	ldrb	r3, [r7, #14]
 800cae0:	2b05      	cmp	r3, #5
 800cae2:	d002      	beq.n	800caea <MBRS_processRequest+0x9a>
 800cae4:	7bbb      	ldrb	r3, [r7, #14]
 800cae6:	2b06      	cmp	r3, #6
 800cae8:	d105      	bne.n	800caf6 <MBRS_processRequest+0xa6>
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	7b5b      	ldrb	r3, [r3, #13]
 800caee:	3b02      	subs	r3, #2
 800caf0:	b2da      	uxtb	r2, r3
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	735a      	strb	r2, [r3, #13]
				return 1U;
 800caf6:	2301      	movs	r3, #1
 800caf8:	e000      	b.n	800cafc <MBRS_processRequest+0xac>
			}
		}

	return 0U;
 800cafa:	2300      	movs	r3, #0
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	3710      	adds	r7, #16
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}

0800cb04 <MBS_Init>:
  * where, 	Timer_1P5_CHAR timer pinter point 1.5 char timer,
  * 		Timer_3P5_CHAR timer pinter point 3.5 char timer,
  * @retval None
  *
  */
void MBS_Init(MBS_Serial *serial, UART_HandleTypeDef *UART, TIM_HandleTypeDef *TIMER_1P5_CHAR, TIM_HandleTypeDef *TIMER_3P5_CHAR){
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b084      	sub	sp, #16
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	60f8      	str	r0, [r7, #12]
 800cb0c:	60b9      	str	r1, [r7, #8]
 800cb0e:	607a      	str	r2, [r7, #4]
 800cb10:	603b      	str	r3, [r7, #0]
	serl = serial;
 800cb12:	4a2a      	ldr	r2, [pc, #168]	@ (800cbbc <MBS_Init+0xb8>)
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	6013      	str	r3, [r2, #0]
	Uart = UART;
 800cb18:	4a29      	ldr	r2, [pc, #164]	@ (800cbc0 <MBS_Init+0xbc>)
 800cb1a:	68bb      	ldr	r3, [r7, #8]
 800cb1c:	6013      	str	r3, [r2, #0]
	Timer_1P5_CHAR = TIMER_1P5_CHAR;
 800cb1e:	4a29      	ldr	r2, [pc, #164]	@ (800cbc4 <MBS_Init+0xc0>)
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	6013      	str	r3, [r2, #0]
	Timer_3P5_CHAR = TIMER_3P5_CHAR;
 800cb24:	4a28      	ldr	r2, [pc, #160]	@ (800cbc8 <MBS_Init+0xc4>)
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	6013      	str	r3, [r2, #0]


	MBS_Timer_Init(Timer_1P5_CHAR->Instance);					// initialize 1.5 char timer
 800cb2a:	4b26      	ldr	r3, [pc, #152]	@ (800cbc4 <MBS_Init+0xc0>)
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	4618      	mov	r0, r3
 800cb32:	f000 f84b 	bl	800cbcc <MBS_Timer_Init>
	MBS_Timer_Init(Timer_3P5_CHAR->Instance);					// initialize 3.5 char timer
 800cb36:	4b24      	ldr	r3, [pc, #144]	@ (800cbc8 <MBS_Init+0xc4>)
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	f000 f845 	bl	800cbcc <MBS_Timer_Init>
	serial->frameOkFlag = 0U;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	2200      	movs	r2, #0
 800cb46:	741a      	strb	r2, [r3, #16]


	MBS_STOP_TIMER(Timer_1P5_CHAR);		//start 1.5 char timer
 800cb48:	4b1e      	ldr	r3, [pc, #120]	@ (800cbc4 <MBS_Init+0xc0>)
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	2200      	movs	r2, #0
 800cb50:	625a      	str	r2, [r3, #36]	@ 0x24
 800cb52:	4b1c      	ldr	r3, [pc, #112]	@ (800cbc4 <MBS_Init+0xc0>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	681a      	ldr	r2, [r3, #0]
 800cb5a:	4b1a      	ldr	r3, [pc, #104]	@ (800cbc4 <MBS_Init+0xc0>)
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	f022 0201 	bic.w	r2, r2, #1
 800cb64:	601a      	str	r2, [r3, #0]
 800cb66:	4b17      	ldr	r3, [pc, #92]	@ (800cbc4 <MBS_Init+0xc0>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	691a      	ldr	r2, [r3, #16]
 800cb6e:	4b15      	ldr	r3, [pc, #84]	@ (800cbc4 <MBS_Init+0xc0>)
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	f022 0201 	bic.w	r2, r2, #1
 800cb78:	611a      	str	r2, [r3, #16]
	MBS_STOP_TIMER(Timer_3P5_CHAR);		//start 3.5 char timer
 800cb7a:	4b13      	ldr	r3, [pc, #76]	@ (800cbc8 <MBS_Init+0xc4>)
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	2200      	movs	r2, #0
 800cb82:	625a      	str	r2, [r3, #36]	@ 0x24
 800cb84:	4b10      	ldr	r3, [pc, #64]	@ (800cbc8 <MBS_Init+0xc4>)
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	681a      	ldr	r2, [r3, #0]
 800cb8c:	4b0e      	ldr	r3, [pc, #56]	@ (800cbc8 <MBS_Init+0xc4>)
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	f022 0201 	bic.w	r2, r2, #1
 800cb96:	601a      	str	r2, [r3, #0]
 800cb98:	4b0b      	ldr	r3, [pc, #44]	@ (800cbc8 <MBS_Init+0xc4>)
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	691a      	ldr	r2, [r3, #16]
 800cba0:	4b09      	ldr	r3, [pc, #36]	@ (800cbc8 <MBS_Init+0xc4>)
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	f022 0201 	bic.w	r2, r2, #1
 800cbaa:	611a      	str	r2, [r3, #16]

	/*Set the serial receiving mode always*/
	serial->setDownstream();
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	f8d3 3238 	ldr.w	r3, [r3, #568]	@ 0x238
 800cbb2:	4798      	blx	r3

}
 800cbb4:	bf00      	nop
 800cbb6:	3710      	adds	r7, #16
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd80      	pop	{r7, pc}
 800cbbc:	20000c6c 	.word	0x20000c6c
 800cbc0:	20000c60 	.word	0x20000c60
 800cbc4:	20000c64 	.word	0x20000c64
 800cbc8:	20000c68 	.word	0x20000c68

0800cbcc <MBS_Timer_Init>:
/**
  * @brief Initialize timer
  * @param none
  * @retval None
  */
static void MBS_Timer_Init(TIM_TypeDef *Timer_Inst){
 800cbcc:	b480      	push	{r7}
 800cbce:	b083      	sub	sp, #12
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
	Timer_Inst->CR1 &= ~TIM_CR1_CEN;		// Initially disable timer4 counter
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	f023 0201 	bic.w	r2, r3, #1
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	601a      	str	r2, [r3, #0]
	Timer_Inst->EGR |= TIM_EGR_UG;			// Re-initialize the counter and generates an update of the registers.
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	695b      	ldr	r3, [r3, #20]
 800cbe4:	f043 0201 	orr.w	r2, r3, #1
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	615a      	str	r2, [r3, #20]
	Timer_Inst->DIER |= TIM_DIER_UIE;		// enable Update interrupt
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	68db      	ldr	r3, [r3, #12]
 800cbf0:	f043 0201 	orr.w	r2, r3, #1
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	60da      	str	r2, [r3, #12]
}
 800cbf8:	bf00      	nop
 800cbfa:	370c      	adds	r7, #12
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc02:	4770      	bx	lr

0800cc04 <MBS_Config>:
/**
  * @brief configures the modbus serial port
  * @param serialPort: modbus serial port struct
  * @retval error status
  */
MB_ErrorStatus MBS_Config(MBS_Serial *serial){
 800cc04:	b590      	push	{r4, r7, lr}
 800cc06:	b085      	sub	sp, #20
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
	MB_ErrorStatus errorStatus = MB_OK;
 800cc0c:	2301      	movs	r3, #1
 800cc0e:	73fb      	strb	r3, [r7, #15]

	/*---------stop the uart interrupt, and the 3.5 & 1.5 char time------------*/
	__HAL_UART_DISABLE_IT(Uart, UART_IT_RXNE);		// enable uart receive interrupt
 800cc10:	4b70      	ldr	r3, [pc, #448]	@ (800cdd4 <MBS_Config+0x1d0>)
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	68da      	ldr	r2, [r3, #12]
 800cc18:	4b6e      	ldr	r3, [pc, #440]	@ (800cdd4 <MBS_Config+0x1d0>)
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	f022 0220 	bic.w	r2, r2, #32
 800cc22:	60da      	str	r2, [r3, #12]
	MBS_STOP_TIMER(Timer_1P5_CHAR); 					//stop 1.5 char timer
 800cc24:	4b6c      	ldr	r3, [pc, #432]	@ (800cdd8 <MBS_Config+0x1d4>)
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	625a      	str	r2, [r3, #36]	@ 0x24
 800cc2e:	4b6a      	ldr	r3, [pc, #424]	@ (800cdd8 <MBS_Config+0x1d4>)
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	681a      	ldr	r2, [r3, #0]
 800cc36:	4b68      	ldr	r3, [pc, #416]	@ (800cdd8 <MBS_Config+0x1d4>)
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	f022 0201 	bic.w	r2, r2, #1
 800cc40:	601a      	str	r2, [r3, #0]
 800cc42:	4b65      	ldr	r3, [pc, #404]	@ (800cdd8 <MBS_Config+0x1d4>)
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	691a      	ldr	r2, [r3, #16]
 800cc4a:	4b63      	ldr	r3, [pc, #396]	@ (800cdd8 <MBS_Config+0x1d4>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	f022 0201 	bic.w	r2, r2, #1
 800cc54:	611a      	str	r2, [r3, #16]
	MBS_STOP_TIMER(Timer_3P5_CHAR); 					//stop 3.5 char timer
 800cc56:	4b61      	ldr	r3, [pc, #388]	@ (800cddc <MBS_Config+0x1d8>)
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	625a      	str	r2, [r3, #36]	@ 0x24
 800cc60:	4b5e      	ldr	r3, [pc, #376]	@ (800cddc <MBS_Config+0x1d8>)
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	681a      	ldr	r2, [r3, #0]
 800cc68:	4b5c      	ldr	r3, [pc, #368]	@ (800cddc <MBS_Config+0x1d8>)
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	f022 0201 	bic.w	r2, r2, #1
 800cc72:	601a      	str	r2, [r3, #0]
 800cc74:	4b59      	ldr	r3, [pc, #356]	@ (800cddc <MBS_Config+0x1d8>)
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	691a      	ldr	r2, [r3, #16]
 800cc7c:	4b57      	ldr	r3, [pc, #348]	@ (800cddc <MBS_Config+0x1d8>)
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	f022 0201 	bic.w	r2, r2, #1
 800cc86:	611a      	str	r2, [r3, #16]

//	MBS_DecodeConfigValue(serial);
	// sets the baudrate for modbus serial
	if((serial->baudRate <= 65535U && serial->baudRate > 0) ){
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	685b      	ldr	r3, [r3, #4]
 800cc8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cc90:	d20f      	bcs.n	800ccb2 <MBS_Config+0xae>
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	685b      	ldr	r3, [r3, #4]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d00b      	beq.n	800ccb2 <MBS_Config+0xae>
		Uart->Init.BaudRate = serial->baudRate;
 800cc9a:	4b4e      	ldr	r3, [pc, #312]	@ (800cdd4 <MBS_Config+0x1d0>)
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	687a      	ldr	r2, [r7, #4]
 800cca0:	6852      	ldr	r2, [r2, #4]
 800cca2:	605a      	str	r2, [r3, #4]
		goto MBS_SERIAL_CONFIG_END;
	}

	/*---------configure the uart------------*/
	// sets the data bits for modbus serial
	switch (serial->dataBits) {
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	7a1b      	ldrb	r3, [r3, #8]
 800cca8:	2b07      	cmp	r3, #7
 800ccaa:	d005      	beq.n	800ccb8 <MBS_Config+0xb4>
 800ccac:	2b08      	cmp	r3, #8
 800ccae:	d008      	beq.n	800ccc2 <MBS_Config+0xbe>
 800ccb0:	e00d      	b.n	800ccce <MBS_Config+0xca>
		errorStatus = MB_ERROR;
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	73fb      	strb	r3, [r7, #15]
		goto MBS_SERIAL_CONFIG_END;
 800ccb6:	e07e      	b.n	800cdb6 <MBS_Config+0x1b2>
		case MBS_DB_7:
			Uart->Init.WordLength = UART_WORDLENGTH_8B;		// wordlength 8 bits = 7 data bits  + 1 parity bits
 800ccb8:	4b46      	ldr	r3, [pc, #280]	@ (800cdd4 <MBS_Config+0x1d0>)
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	609a      	str	r2, [r3, #8]
			break;
 800ccc0:	e008      	b.n	800ccd4 <MBS_Config+0xd0>
		case MBS_DB_8:
			Uart->Init.WordLength = UART_WORDLENGTH_9B;		// wordlength 9 bits = 8 data bits + 1 parity bits
 800ccc2:	4b44      	ldr	r3, [pc, #272]	@ (800cdd4 <MBS_Config+0x1d0>)
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800ccca:	609a      	str	r2, [r3, #8]
			break;
 800cccc:	e002      	b.n	800ccd4 <MBS_Config+0xd0>
		default:
			errorStatus = MB_ERROR;
 800ccce:	2300      	movs	r3, #0
 800ccd0:	73fb      	strb	r3, [r7, #15]
			goto MBS_SERIAL_CONFIG_END;
 800ccd2:	e070      	b.n	800cdb6 <MBS_Config+0x1b2>

	}


	// sets the parity bit
	switch (serial->parityBit) {
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	7a5b      	ldrb	r3, [r3, #9]
 800ccd8:	2b02      	cmp	r3, #2
 800ccda:	d011      	beq.n	800cd00 <MBS_Config+0xfc>
 800ccdc:	2b02      	cmp	r3, #2
 800ccde:	dc15      	bgt.n	800cd0c <MBS_Config+0x108>
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d002      	beq.n	800ccea <MBS_Config+0xe6>
 800cce4:	2b01      	cmp	r3, #1
 800cce6:	d005      	beq.n	800ccf4 <MBS_Config+0xf0>
 800cce8:	e010      	b.n	800cd0c <MBS_Config+0x108>
		case MBS_PB_NONE:
			Uart->Init.Parity = UART_PARITY_NONE;
 800ccea:	4b3a      	ldr	r3, [pc, #232]	@ (800cdd4 <MBS_Config+0x1d0>)
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	2200      	movs	r2, #0
 800ccf0:	611a      	str	r2, [r3, #16]
			break;
 800ccf2:	e00e      	b.n	800cd12 <MBS_Config+0x10e>
		case MBS_PB_ODD:
			Uart->Init.Parity = UART_PARITY_ODD;
 800ccf4:	4b37      	ldr	r3, [pc, #220]	@ (800cdd4 <MBS_Config+0x1d0>)
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800ccfc:	611a      	str	r2, [r3, #16]
			break;
 800ccfe:	e008      	b.n	800cd12 <MBS_Config+0x10e>
		case MBS_PB_EVEN:
			Uart->Init.Parity = UART_PARITY_EVEN;
 800cd00:	4b34      	ldr	r3, [pc, #208]	@ (800cdd4 <MBS_Config+0x1d0>)
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800cd08:	611a      	str	r2, [r3, #16]
			break;
 800cd0a:	e002      	b.n	800cd12 <MBS_Config+0x10e>
		default:
			errorStatus = MB_ERROR;
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	73fb      	strb	r3, [r7, #15]
			goto MBS_SERIAL_CONFIG_END;
 800cd10:	e051      	b.n	800cdb6 <MBS_Config+0x1b2>
			break;
	}

	// sets the stop bit
	switch (serial->stopBit) {
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	7a9b      	ldrb	r3, [r3, #10]
 800cd16:	2b01      	cmp	r3, #1
 800cd18:	d002      	beq.n	800cd20 <MBS_Config+0x11c>
 800cd1a:	2b02      	cmp	r3, #2
 800cd1c:	d005      	beq.n	800cd2a <MBS_Config+0x126>
 800cd1e:	e00a      	b.n	800cd36 <MBS_Config+0x132>
		case MBS_SB_1:
			Uart->Init.StopBits = UART_STOPBITS_1;
 800cd20:	4b2c      	ldr	r3, [pc, #176]	@ (800cdd4 <MBS_Config+0x1d0>)
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	2200      	movs	r2, #0
 800cd26:	60da      	str	r2, [r3, #12]
			break;
 800cd28:	e008      	b.n	800cd3c <MBS_Config+0x138>
		case MBS_SB_2:
			Uart->Init.StopBits = UART_STOPBITS_2;
 800cd2a:	4b2a      	ldr	r3, [pc, #168]	@ (800cdd4 <MBS_Config+0x1d0>)
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800cd32:	60da      	str	r2, [r3, #12]
			break;
 800cd34:	e002      	b.n	800cd3c <MBS_Config+0x138>
		default:
			errorStatus = MB_ERROR;
 800cd36:	2300      	movs	r3, #0
 800cd38:	73fb      	strb	r3, [r7, #15]
			goto MBS_SERIAL_CONFIG_END;
 800cd3a:	e03c      	b.n	800cdb6 <MBS_Config+0x1b2>
			break;
	}

	/*---------configure uart, 1.5 and 3.5 char Timer------------*/
	if(errorStatus == MB_OK){
 800cd3c:	7bfb      	ldrb	r3, [r7, #15]
 800cd3e:	2b01      	cmp	r3, #1
 800cd40:	d138      	bne.n	800cdb4 <MBS_Config+0x1b0>

		Timer_1P5_CHAR->Init.Period = MBS_GetCharTimeCluster(Uart->Init.BaudRate, MBS_1P5_CHAR);	// set the 1.5 char timer period according to the new baud rate
 800cd42:	4b24      	ldr	r3, [pc, #144]	@ (800cdd4 <MBS_Config+0x1d0>)
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	685b      	ldr	r3, [r3, #4]
 800cd48:	4a23      	ldr	r2, [pc, #140]	@ (800cdd8 <MBS_Config+0x1d4>)
 800cd4a:	6814      	ldr	r4, [r2, #0]
 800cd4c:	eeb7 0a08 	vmov.f32	s0, #120	@ 0x3fc00000  1.5
 800cd50:	4618      	mov	r0, r3
 800cd52:	f000 fa75 	bl	800d240 <MBS_GetCharTimeCluster>
 800cd56:	4603      	mov	r3, r0
 800cd58:	60e3      	str	r3, [r4, #12]
		Timer_3P5_CHAR->Init.Period = MBS_GetCharTimeCluster(Uart->Init.BaudRate, MBS_3P5_CHAR);	// set the 3.5 char timer period according to the new baud rat
 800cd5a:	4b1e      	ldr	r3, [pc, #120]	@ (800cdd4 <MBS_Config+0x1d0>)
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	685b      	ldr	r3, [r3, #4]
 800cd60:	4a1e      	ldr	r2, [pc, #120]	@ (800cddc <MBS_Config+0x1d8>)
 800cd62:	6814      	ldr	r4, [r2, #0]
 800cd64:	eeb0 0a0c 	vmov.f32	s0, #12	@ 0x40600000  3.5
 800cd68:	4618      	mov	r0, r3
 800cd6a:	f000 fa69 	bl	800d240 <MBS_GetCharTimeCluster>
 800cd6e:	4603      	mov	r3, r0
 800cd70:	60e3      	str	r3, [r4, #12]

		if (HAL_TIM_Base_Init(Timer_1P5_CHAR) != HAL_OK) {
 800cd72:	4b19      	ldr	r3, [pc, #100]	@ (800cdd8 <MBS_Config+0x1d4>)
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	4618      	mov	r0, r3
 800cd78:	f002 f816 	bl	800eda8 <HAL_TIM_Base_Init>
 800cd7c:	4603      	mov	r3, r0
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d002      	beq.n	800cd88 <MBS_Config+0x184>
			errorStatus = MB_ERROR;
 800cd82:	2300      	movs	r3, #0
 800cd84:	73fb      	strb	r3, [r7, #15]
			goto MBS_SERIAL_CONFIG_END;
 800cd86:	e016      	b.n	800cdb6 <MBS_Config+0x1b2>
		}					// configure 1.5 char timer
		if (HAL_TIM_Base_Init(Timer_3P5_CHAR) != HAL_OK) {
 800cd88:	4b14      	ldr	r3, [pc, #80]	@ (800cddc <MBS_Config+0x1d8>)
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	f002 f80b 	bl	800eda8 <HAL_TIM_Base_Init>
 800cd92:	4603      	mov	r3, r0
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d002      	beq.n	800cd9e <MBS_Config+0x19a>
			errorStatus = MB_ERROR;
 800cd98:	2300      	movs	r3, #0
 800cd9a:	73fb      	strb	r3, [r7, #15]
			goto MBS_SERIAL_CONFIG_END;
 800cd9c:	e00b      	b.n	800cdb6 <MBS_Config+0x1b2>
		}					// configure 3.5 char timer
		if (HAL_UART_Init(Uart) != HAL_OK) {
 800cd9e:	4b0d      	ldr	r3, [pc, #52]	@ (800cdd4 <MBS_Config+0x1d0>)
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	4618      	mov	r0, r3
 800cda4:	f002 fc80 	bl	800f6a8 <HAL_UART_Init>
 800cda8:	4603      	mov	r3, r0
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d002      	beq.n	800cdb4 <MBS_Config+0x1b0>
			errorStatus = MB_ERROR;
 800cdae:	2300      	movs	r3, #0
 800cdb0:	73fb      	strb	r3, [r7, #15]
			goto MBS_SERIAL_CONFIG_END;
 800cdb2:	e000      	b.n	800cdb6 <MBS_Config+0x1b2>
		}								// configure uart
	}

	/*---------start uart interrupt and the 3.5 & 1.5 char timer------------*/
	MBS_SERIAL_CONFIG_END:							// goto label
 800cdb4:	bf00      	nop

	__HAL_UART_ENABLE_IT(Uart, UART_IT_RXNE);		// enable uart receive interrupt
 800cdb6:	4b07      	ldr	r3, [pc, #28]	@ (800cdd4 <MBS_Config+0x1d0>)
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	68da      	ldr	r2, [r3, #12]
 800cdbe:	4b05      	ldr	r3, [pc, #20]	@ (800cdd4 <MBS_Config+0x1d0>)
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	f042 0220 	orr.w	r2, r2, #32
 800cdc8:	60da      	str	r2, [r3, #12]
//	MBS_START_TIMER(Timer_1P5_CHAR-); 				//start 1.5 char timer
//	MBS_START_TIMER(Timer_3P5_CHAR); 				//start 3.5 char timer

	return errorStatus;
 800cdca:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdcc:	4618      	mov	r0, r3
 800cdce:	3714      	adds	r7, #20
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	bd90      	pop	{r4, r7, pc}
 800cdd4:	20000c60 	.word	0x20000c60
 800cdd8:	20000c64 	.word	0x20000c64
 800cddc:	20000c68 	.word	0x20000c68

0800cde0 <MBS_Send>:
  * @brief send serial data packet
  *
  * @param none
  * @retval None
  */
MB_ErrorStatus MBS_Send(MBS_Serial *serial){
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b084      	sub	sp, #16
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]

	MB_ErrorStatus errorStatus = MB_OK;
 800cde8:	2301      	movs	r3, #1
 800cdea:	73fb      	strb	r3, [r7, #15]
	if(serial->txBuffSize > 0u){
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f8b3 3214 	ldrh.w	r3, [r3, #532]	@ 0x214
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d042      	beq.n	800ce7c <MBS_Send+0x9c>
		if(!serial->isSending){
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	7bdb      	ldrb	r3, [r3, #15]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d13b      	bne.n	800ce76 <MBS_Send+0x96>
			serial->rxBuffSize = 0;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	2200      	movs	r2, #0
 800ce02:	f8a3 2212 	strh.w	r2, [r3, #530]	@ 0x212
			HAL_GPIO_WritePin(RS485_TX_LED_GPIO_Port, RS485_TX_LED_Pin, GPIO_PIN_SET);
 800ce06:	2201      	movs	r2, #1
 800ce08:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800ce0c:	481f      	ldr	r0, [pc, #124]	@ (800ce8c <MBS_Send+0xac>)
 800ce0e:	f001 f95d 	bl	800e0cc <HAL_GPIO_WritePin>
			serial->setUpstream();
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 800ce18:	4798      	blx	r3
			if(serial->send(serial->txBuff, serial->txBuffSize) != HAL_OK){
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	f8d3 3230 	ldr.w	r3, [r3, #560]	@ 0x230
 800ce20:	687a      	ldr	r2, [r7, #4]
 800ce22:	f202 1011 	addw	r0, r2, #273	@ 0x111
 800ce26:	687a      	ldr	r2, [r7, #4]
 800ce28:	f8b2 2214 	ldrh.w	r2, [r2, #532]	@ 0x214
 800ce2c:	4611      	mov	r1, r2
 800ce2e:	4798      	blx	r3
 800ce30:	4603      	mov	r3, r0
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d002      	beq.n	800ce3c <MBS_Send+0x5c>
				errorStatus = MB_ERROR;
 800ce36:	2300      	movs	r3, #0
 800ce38:	73fb      	strb	r3, [r7, #15]
 800ce3a:	e011      	b.n	800ce60 <MBS_Send+0x80>
			}else{
				serial->isSending = 1;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2201      	movs	r2, #1
 800ce40:	73da      	strb	r2, [r3, #15]
				MBS_START_TIMER(Timer_3P5_CHAR);		//start 3.5 char timer
 800ce42:	4b13      	ldr	r3, [pc, #76]	@ (800ce90 <MBS_Send+0xb0>)
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	2200      	movs	r2, #0
 800ce4a:	625a      	str	r2, [r3, #36]	@ 0x24
 800ce4c:	4b10      	ldr	r3, [pc, #64]	@ (800ce90 <MBS_Send+0xb0>)
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	681a      	ldr	r2, [r3, #0]
 800ce54:	4b0e      	ldr	r3, [pc, #56]	@ (800ce90 <MBS_Send+0xb0>)
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	f042 0201 	orr.w	r2, r2, #1
 800ce5e:	601a      	str	r2, [r3, #0]
			}
			/*Set the serial receiving mode always*/
			serial->setDownstream();
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	f8d3 3238 	ldr.w	r3, [r3, #568]	@ 0x238
 800ce66:	4798      	blx	r3
			HAL_GPIO_WritePin(RS485_TX_LED_GPIO_Port, RS485_TX_LED_Pin, GPIO_PIN_RESET);
 800ce68:	2200      	movs	r2, #0
 800ce6a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800ce6e:	4807      	ldr	r0, [pc, #28]	@ (800ce8c <MBS_Send+0xac>)
 800ce70:	f001 f92c 	bl	800e0cc <HAL_GPIO_WritePin>
 800ce74:	e004      	b.n	800ce80 <MBS_Send+0xa0>
		}else{
			errorStatus = MB_ERROR;
 800ce76:	2300      	movs	r3, #0
 800ce78:	73fb      	strb	r3, [r7, #15]
 800ce7a:	e001      	b.n	800ce80 <MBS_Send+0xa0>
		}
	}else{
		errorStatus = MB_ERROR;
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	73fb      	strb	r3, [r7, #15]
	}
	return errorStatus;
 800ce80:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce82:	4618      	mov	r0, r3
 800ce84:	3710      	adds	r7, #16
 800ce86:	46bd      	mov	sp, r7
 800ce88:	bd80      	pop	{r7, pc}
 800ce8a:	bf00      	nop
 800ce8c:	40020400 	.word	0x40020400
 800ce90:	20000c68 	.word	0x20000c68

0800ce94 <MBS_Receive>:
  * @brief receives serial data byte
  *
  * @param none
  * @retval None
  */
void MBS_Receive(MBS_Serial *serial){
 800ce94:	b590      	push	{r4, r7, lr}
 800ce96:	b083      	sub	sp, #12
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]

		serial->isReceiving = 1;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2201      	movs	r2, #1
 800cea0:	739a      	strb	r2, [r3, #14]



		MBS_STOP_TIMER(Timer_1P5_CHAR); //stop 1.5 char timer
 800cea2:	4b3b      	ldr	r3, [pc, #236]	@ (800cf90 <MBS_Receive+0xfc>)
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	2200      	movs	r2, #0
 800ceaa:	625a      	str	r2, [r3, #36]	@ 0x24
 800ceac:	4b38      	ldr	r3, [pc, #224]	@ (800cf90 <MBS_Receive+0xfc>)
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	681a      	ldr	r2, [r3, #0]
 800ceb4:	4b36      	ldr	r3, [pc, #216]	@ (800cf90 <MBS_Receive+0xfc>)
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	f022 0201 	bic.w	r2, r2, #1
 800cebe:	601a      	str	r2, [r3, #0]
 800cec0:	4b33      	ldr	r3, [pc, #204]	@ (800cf90 <MBS_Receive+0xfc>)
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	691a      	ldr	r2, [r3, #16]
 800cec8:	4b31      	ldr	r3, [pc, #196]	@ (800cf90 <MBS_Receive+0xfc>)
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	f022 0201 	bic.w	r2, r2, #1
 800ced2:	611a      	str	r2, [r3, #16]
		MBS_STOP_TIMER(Timer_3P5_CHAR); //stop 3.5 char timer
 800ced4:	4b2f      	ldr	r3, [pc, #188]	@ (800cf94 <MBS_Receive+0x100>)
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	2200      	movs	r2, #0
 800cedc:	625a      	str	r2, [r3, #36]	@ 0x24
 800cede:	4b2d      	ldr	r3, [pc, #180]	@ (800cf94 <MBS_Receive+0x100>)
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	681a      	ldr	r2, [r3, #0]
 800cee6:	4b2b      	ldr	r3, [pc, #172]	@ (800cf94 <MBS_Receive+0x100>)
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	f022 0201 	bic.w	r2, r2, #1
 800cef0:	601a      	str	r2, [r3, #0]
 800cef2:	4b28      	ldr	r3, [pc, #160]	@ (800cf94 <MBS_Receive+0x100>)
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	691a      	ldr	r2, [r3, #16]
 800cefa:	4b26      	ldr	r3, [pc, #152]	@ (800cf94 <MBS_Receive+0x100>)
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	f022 0201 	bic.w	r2, r2, #1
 800cf04:	611a      	str	r2, [r3, #16]

		// copy data to the receive buffer
		if(serial->rxBuffSize < MB_PDU_MAX_SIZE){
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	f8b3 3212 	ldrh.w	r3, [r3, #530]	@ 0x212
 800cf0c:	2bff      	cmp	r3, #255	@ 0xff
 800cf0e:	d812      	bhi.n	800cf36 <MBS_Receive+0xa2>
			serial->rxBuff[serial->rxBuffSize++] = serial->rcvByte();//Uart->Instance->DR;//Uart->Instance->RDR;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	f8d3 222c 	ldr.w	r2, [r3, #556]	@ 0x22c
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	f8b3 3212 	ldrh.w	r3, [r3, #530]	@ 0x212
 800cf1c:	1c59      	adds	r1, r3, #1
 800cf1e:	b288      	uxth	r0, r1
 800cf20:	6879      	ldr	r1, [r7, #4]
 800cf22:	f8a1 0212 	strh.w	r0, [r1, #530]	@ 0x212
 800cf26:	461c      	mov	r4, r3
 800cf28:	4790      	blx	r2
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	461a      	mov	r2, r3
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	4423      	add	r3, r4
 800cf32:	745a      	strb	r2, [r3, #17]
 800cf34:	e004      	b.n	800cf40 <MBS_Receive+0xac>
		}else{
			serial->rxBuffSize = MB_PDU_MAX_SIZE;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cf3c:	f8a3 2212 	strh.w	r2, [r3, #530]	@ 0x212
		}

		MBS_START_TIMER(Timer_1P5_CHAR);		//start 1.5 char timer
 800cf40:	4b13      	ldr	r3, [pc, #76]	@ (800cf90 <MBS_Receive+0xfc>)
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	2200      	movs	r2, #0
 800cf48:	625a      	str	r2, [r3, #36]	@ 0x24
 800cf4a:	4b11      	ldr	r3, [pc, #68]	@ (800cf90 <MBS_Receive+0xfc>)
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	681a      	ldr	r2, [r3, #0]
 800cf52:	4b0f      	ldr	r3, [pc, #60]	@ (800cf90 <MBS_Receive+0xfc>)
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	f042 0201 	orr.w	r2, r2, #1
 800cf5c:	601a      	str	r2, [r3, #0]
		MBS_START_TIMER(Timer_3P5_CHAR);		//start 3.5 char timer
 800cf5e:	4b0d      	ldr	r3, [pc, #52]	@ (800cf94 <MBS_Receive+0x100>)
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	2200      	movs	r2, #0
 800cf66:	625a      	str	r2, [r3, #36]	@ 0x24
 800cf68:	4b0a      	ldr	r3, [pc, #40]	@ (800cf94 <MBS_Receive+0x100>)
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	681a      	ldr	r2, [r3, #0]
 800cf70:	4b08      	ldr	r3, [pc, #32]	@ (800cf94 <MBS_Receive+0x100>)
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	f042 0201 	orr.w	r2, r2, #1
 800cf7a:	601a      	str	r2, [r3, #0]


		HAL_GPIO_TogglePin(RS485_RX_LED_GPIO_Port, RS485_RX_LED_Pin);
 800cf7c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800cf80:	4805      	ldr	r0, [pc, #20]	@ (800cf98 <MBS_Receive+0x104>)
 800cf82:	f001 f8bc 	bl	800e0fe <HAL_GPIO_TogglePin>
}
 800cf86:	bf00      	nop
 800cf88:	370c      	adds	r7, #12
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	bd90      	pop	{r4, r7, pc}
 800cf8e:	bf00      	nop
 800cf90:	20000c64 	.word	0x20000c64
 800cf94:	20000c68 	.word	0x20000c68
 800cf98:	40020400 	.word	0x40020400

0800cf9c <MBS_StopReceiving>:


void MBS_StopReceiving(MBS_Serial *serial){
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b082      	sub	sp, #8
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(RS485_RX_LED_GPIO_Port, RS485_RX_LED_Pin, GPIO_PIN_RESET);
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800cfaa:	4826      	ldr	r0, [pc, #152]	@ (800d044 <MBS_StopReceiving+0xa8>)
 800cfac:	f001 f88e 	bl	800e0cc <HAL_GPIO_WritePin>
	serial->isSending = 0;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	73da      	strb	r2, [r3, #15]
	if(Timer_3P5_CHAR->Instance->SR & TIM_SR_UIF){
 800cfb6:	4b24      	ldr	r3, [pc, #144]	@ (800d048 <MBS_StopReceiving+0xac>)
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	691b      	ldr	r3, [r3, #16]
 800cfbe:	f003 0301 	and.w	r3, r3, #1
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d03a      	beq.n	800d03c <MBS_StopReceiving+0xa0>
		MBS_STOP_TIMER(Timer_3P5_CHAR);		//stop the 3.5 char timer, once a data packet is received
 800cfc6:	4b20      	ldr	r3, [pc, #128]	@ (800d048 <MBS_StopReceiving+0xac>)
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	2200      	movs	r2, #0
 800cfce:	625a      	str	r2, [r3, #36]	@ 0x24
 800cfd0:	4b1d      	ldr	r3, [pc, #116]	@ (800d048 <MBS_StopReceiving+0xac>)
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	681a      	ldr	r2, [r3, #0]
 800cfd8:	4b1b      	ldr	r3, [pc, #108]	@ (800d048 <MBS_StopReceiving+0xac>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	f022 0201 	bic.w	r2, r2, #1
 800cfe2:	601a      	str	r2, [r3, #0]
 800cfe4:	4b18      	ldr	r3, [pc, #96]	@ (800d048 <MBS_StopReceiving+0xac>)
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	691a      	ldr	r2, [r3, #16]
 800cfec:	4b16      	ldr	r3, [pc, #88]	@ (800d048 <MBS_StopReceiving+0xac>)
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	f022 0201 	bic.w	r2, r2, #1
 800cff6:	611a      	str	r2, [r3, #16]
		serial->isDataReceived = 1U;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	2201      	movs	r2, #1
 800cffc:	735a      	strb	r2, [r3, #13]

		if(serial->rxBuffSize <= MB_PDU_MIN_SIZE || serial->rxBuffSize >= MB_PDU_MAX_SIZE){
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	f8b3 3212 	ldrh.w	r3, [r3, #530]	@ 0x212
 800d004:	2b04      	cmp	r3, #4
 800d006:	d904      	bls.n	800d012 <MBS_StopReceiving+0x76>
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	f8b3 3212 	ldrh.w	r3, [r3, #530]	@ 0x212
 800d00e:	2bff      	cmp	r3, #255	@ 0xff
 800d010:	d907      	bls.n	800d022 <MBS_StopReceiving+0x86>
			serial->rxBuffSize = 0 ;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	2200      	movs	r2, #0
 800d016:	f8a3 2212 	strh.w	r2, [r3, #530]	@ 0x212
			serial->isDataReceived = 0U;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	2200      	movs	r2, #0
 800d01e:	735a      	strb	r2, [r3, #13]
 800d020:	e009      	b.n	800d036 <MBS_StopReceiving+0x9a>
		}else{
			MBS_ProcessRcvdFrame(serial);
 800d022:	6878      	ldr	r0, [r7, #4]
 800d024:	f000 f894 	bl	800d150 <MBS_ProcessRcvdFrame>
			serial->isReceiving = 0;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2200      	movs	r2, #0
 800d02c:	739a      	strb	r2, [r3, #14]
			serial->rxBuffSize = 0 ;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	2200      	movs	r2, #0
 800d032:	f8a3 2212 	strh.w	r2, [r3, #530]	@ 0x212
		}
		serial->isReceiving = 0;
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	2200      	movs	r2, #0
 800d03a:	739a      	strb	r2, [r3, #14]

	}
}
 800d03c:	bf00      	nop
 800d03e:	3708      	adds	r7, #8
 800d040:	46bd      	mov	sp, r7
 800d042:	bd80      	pop	{r7, pc}
 800d044:	40020400 	.word	0x40020400
 800d048:	20000c68 	.word	0x20000c68

0800d04c <MBS_ChackRcvdFrame>:
  * @brief check received data frame
  *
  * @param none
  * @retval None
  */
void MBS_ChackRcvdFrame(MBS_Serial *serial, MB_RTUSlave *mbSlave){
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b084      	sub	sp, #16
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
 800d054:	6039      	str	r1, [r7, #0]

	if(Timer_1P5_CHAR->Instance->SR & TIM_SR_UIF){
 800d056:	4b3d      	ldr	r3, [pc, #244]	@ (800d14c <MBS_ChackRcvdFrame+0x100>)
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	691b      	ldr	r3, [r3, #16]
 800d05e:	f003 0301 	and.w	r3, r3, #1
 800d062:	2b00      	cmp	r3, #0
 800d064:	d06d      	beq.n	800d142 <MBS_ChackRcvdFrame+0xf6>
		MBS_STOP_TIMER(Timer_1P5_CHAR);		// stop 1.5 char timer
 800d066:	4b39      	ldr	r3, [pc, #228]	@ (800d14c <MBS_ChackRcvdFrame+0x100>)
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	2200      	movs	r2, #0
 800d06e:	625a      	str	r2, [r3, #36]	@ 0x24
 800d070:	4b36      	ldr	r3, [pc, #216]	@ (800d14c <MBS_ChackRcvdFrame+0x100>)
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	681a      	ldr	r2, [r3, #0]
 800d078:	4b34      	ldr	r3, [pc, #208]	@ (800d14c <MBS_ChackRcvdFrame+0x100>)
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	f022 0201 	bic.w	r2, r2, #1
 800d082:	601a      	str	r2, [r3, #0]
 800d084:	4b31      	ldr	r3, [pc, #196]	@ (800d14c <MBS_ChackRcvdFrame+0x100>)
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	691a      	ldr	r2, [r3, #16]
 800d08c:	4b2f      	ldr	r3, [pc, #188]	@ (800d14c <MBS_ChackRcvdFrame+0x100>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	f022 0201 	bic.w	r2, r2, #1
 800d096:	611a      	str	r2, [r3, #16]
		serial->frameOkFlag = 0U;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2200      	movs	r2, #0
 800d09c:	741a      	strb	r2, [r3, #16]
		if(serial->rxBuffSize >= (MBS_RTU_PDU_MIN_SIZE-1U)){		// if the buffer size is less than the max buffer size
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	f8b3 3212 	ldrh.w	r3, [r3, #530]	@ 0x212
 800d0a4:	2b02      	cmp	r3, #2
 800d0a6:	d94c      	bls.n	800d142 <MBS_ChackRcvdFrame+0xf6>
			if(serial->rxBuff[MB_SA_INDEX] == mbSlave->slave_address
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	7c5a      	ldrb	r2, [r3, #17]
 800d0ac:	683b      	ldr	r3, [r7, #0]
 800d0ae:	781b      	ldrb	r3, [r3, #0]
 800d0b0:	429a      	cmp	r2, r3
 800d0b2:	d003      	beq.n	800d0bc <MBS_ChackRcvdFrame+0x70>
				|| serial->rxBuff[MB_SA_INDEX] == MB_BROADCAST_ADDR){
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	7c5b      	ldrb	r3, [r3, #17]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d142      	bne.n	800d142 <MBS_ChackRcvdFrame+0xf6>
				uint16_t receivedCRC16 = (serial->rxBuff[serial->rxBuffSize-1] << 8) | serial->rxBuff[serial->rxBuffSize-2];
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	f8b3 3212 	ldrh.w	r3, [r3, #530]	@ 0x212
 800d0c2:	3b01      	subs	r3, #1
 800d0c4:	687a      	ldr	r2, [r7, #4]
 800d0c6:	4413      	add	r3, r2
 800d0c8:	7c5b      	ldrb	r3, [r3, #17]
 800d0ca:	021b      	lsls	r3, r3, #8
 800d0cc:	b21a      	sxth	r2, r3
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	f8b3 3212 	ldrh.w	r3, [r3, #530]	@ 0x212
 800d0d4:	3b02      	subs	r3, #2
 800d0d6:	6879      	ldr	r1, [r7, #4]
 800d0d8:	440b      	add	r3, r1
 800d0da:	7c5b      	ldrb	r3, [r3, #17]
 800d0dc:	b21b      	sxth	r3, r3
 800d0de:	4313      	orrs	r3, r2
 800d0e0:	b21b      	sxth	r3, r3
 800d0e2:	81fb      	strh	r3, [r7, #14]
				uint16_t calculatedCRC16 = MB_CalcCRC16(serial->rxBuff, serial->rxBuffSize-2);
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	f103 0211 	add.w	r2, r3, #17
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	f8b3 3212 	ldrh.w	r3, [r3, #530]	@ 0x212
 800d0f0:	3b02      	subs	r3, #2
 800d0f2:	b29b      	uxth	r3, r3
 800d0f4:	4619      	mov	r1, r3
 800d0f6:	4610      	mov	r0, r2
 800d0f8:	f7fe fb44 	bl	800b784 <MB_CalcCRC16>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	81bb      	strh	r3, [r7, #12]
				if(receivedCRC16 == calculatedCRC16){
 800d100:	89fa      	ldrh	r2, [r7, #14]
 800d102:	89bb      	ldrh	r3, [r7, #12]
 800d104:	429a      	cmp	r2, r3
 800d106:	d119      	bne.n	800d13c <MBS_ChackRcvdFrame+0xf0>
					mbSlave->rxBuffer = &serial->rxBuff[0];
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	f103 0211 	add.w	r2, r3, #17
 800d10e:	683b      	ldr	r3, [r7, #0]
 800d110:	605a      	str	r2, [r3, #4]
					mbSlave->txBuffer = &serial->txBuff[0];
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	f203 1211 	addw	r2, r3, #273	@ 0x111
 800d118:	683b      	ldr	r3, [r7, #0]
 800d11a:	609a      	str	r2, [r3, #8]
					mbSlave->rxBufferSize = serial->rxBuffSize;
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	f8b3 3212 	ldrh.w	r3, [r3, #530]	@ 0x212
 800d122:	b2da      	uxtb	r2, r3
 800d124:	683b      	ldr	r3, [r7, #0]
 800d126:	731a      	strb	r2, [r3, #12]
					mbSlave->txBufferSize = serial->txBuffSize;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f8b3 3214 	ldrh.w	r3, [r3, #532]	@ 0x214
 800d12e:	b2da      	uxtb	r2, r3
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	735a      	strb	r2, [r3, #13]
					serial->frameOkFlag=1;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2201      	movs	r2, #1
 800d138:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

}
 800d13a:	e002      	b.n	800d142 <MBS_ChackRcvdFrame+0xf6>
					serial->frameOkFlag = 0;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2200      	movs	r2, #0
 800d140:	741a      	strb	r2, [r3, #16]
}
 800d142:	bf00      	nop
 800d144:	3710      	adds	r7, #16
 800d146:	46bd      	mov	sp, r7
 800d148:	bd80      	pop	{r7, pc}
 800d14a:	bf00      	nop
 800d14c:	20000c64 	.word	0x20000c64

0800d150 <MBS_ProcessRcvdFrame>:
  * @brief processes received data packet and response according to the command
  *
  * @param none
  * @retval None
  */
void MBS_ProcessRcvdFrame(MBS_Serial *serial){
 800d150:	b580      	push	{r7, lr}
 800d152:	b084      	sub	sp, #16
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
	if(serial->isDataReceived > 0U){
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	7b5b      	ldrb	r3, [r3, #13]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d068      	beq.n	800d232 <MBS_ProcessRcvdFrame+0xe2>
		serial->isDataReceived = 0U;
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	2200      	movs	r2, #0
 800d164:	735a      	strb	r2, [r3, #13]

		if(serial->frameOkFlag){	// if the buffer size is less than the max buffer size
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	7c1b      	ldrb	r3, [r3, #16]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d058      	beq.n	800d220 <MBS_ProcessRcvdFrame+0xd0>
			MB_RTUSlave *mbSlave = MBRS_GetInstance();
 800d16e:	f7ff fc63 	bl	800ca38 <MBRS_GetInstance>
 800d172:	60f8      	str	r0, [r7, #12]
			MB_ErrorStatus errorStatus = MB_ERROR;
 800d174:	2300      	movs	r3, #0
 800d176:	72fb      	strb	r3, [r7, #11]
			mbSlave->rxBuffer = &serial->rxBuff[0];
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	f103 0211 	add.w	r2, r3, #17
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	605a      	str	r2, [r3, #4]
//			memcpy(	mbSlave->rxBuffer, serial->rxBuff, serial->rxBuffSize);
			mbSlave->txBuffer = &serial->txBuff[0];
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	f203 1211 	addw	r2, r3, #273	@ 0x111
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	609a      	str	r2, [r3, #8]


			mbSlave->rxBufferSize = serial->rxBuffSize;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	f8b3 3212 	ldrh.w	r3, [r3, #530]	@ 0x212
 800d192:	b2da      	uxtb	r2, r3
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	731a      	strb	r2, [r3, #12]
			mbSlave->txBufferSize = serial->txBuffSize;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	f8b3 3214 	ldrh.w	r3, [r3, #532]	@ 0x214
 800d19e:	b2da      	uxtb	r2, r3
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	735a      	strb	r2, [r3, #13]

			uint8_t statusRet = MBRS_processRequest(mbSlave);
 800d1a4:	68f8      	ldr	r0, [r7, #12]
 800d1a6:	f7ff fc53 	bl	800ca50 <MBRS_processRequest>
 800d1aa:	4603      	mov	r3, r0
 800d1ac:	72bb      	strb	r3, [r7, #10]

			serial->rxBuffSize = mbSlave->rxBufferSize;
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	7b1b      	ldrb	r3, [r3, #12]
 800d1b2:	461a      	mov	r2, r3
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	f8a3 2212 	strh.w	r2, [r3, #530]	@ 0x212
			serial->txBuffSize = mbSlave->txBufferSize;
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	7b5b      	ldrb	r3, [r3, #13]
 800d1be:	461a      	mov	r2, r3
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f8a3 2214 	strh.w	r2, [r3, #532]	@ 0x214


			if(statusRet>0){
 800d1c6:	7abb      	ldrb	r3, [r7, #10]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d01a      	beq.n	800d202 <MBS_ProcessRcvdFrame+0xb2>
				errorStatus = MBS_Send(serial);
 800d1cc:	6878      	ldr	r0, [r7, #4]
 800d1ce:	f7ff fe07 	bl	800cde0 <MBS_Send>
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	72fb      	strb	r3, [r7, #11]
				if(errorStatus != MB_OK){
 800d1d6:	7afb      	ldrb	r3, [r7, #11]
 800d1d8:	2b01      	cmp	r3, #1
 800d1da:	d002      	beq.n	800d1e2 <MBS_ProcessRcvdFrame+0x92>
					DEBUG_SPRINT_NL("Modbus: Transmission Failed!");
 800d1dc:	4817      	ldr	r0, [pc, #92]	@ (800d23c <MBS_ProcessRcvdFrame+0xec>)
 800d1de:	f7fe fa03 	bl	800b5e8 <DEBUG_SPRINT_NL>
				}

				serial->rxBuffSize = 0;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	f8a3 2212 	strh.w	r2, [r3, #530]	@ 0x212
				serial->txBuffSize = 0;
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	f8a3 2214 	strh.w	r2, [r3, #532]	@ 0x214
				mbSlave->rxBufferSize = 0;
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	731a      	strb	r2, [r3, #12]
				mbSlave->txBufferSize = 0;
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	735a      	strb	r2, [r3, #13]
				MB_ClearBuffer();
 800d1fe:	f7fe fb9d 	bl	800b93c <MB_ClearBuffer>
			}
			serial->rxBuffSize = 0;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	2200      	movs	r2, #0
 800d206:	f8a3 2212 	strh.w	r2, [r3, #530]	@ 0x212
			serial->txBuffSize = 0;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	2200      	movs	r2, #0
 800d20e:	f8a3 2214 	strh.w	r2, [r3, #532]	@ 0x214
			mbSlave->rxBufferSize = 0;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	2200      	movs	r2, #0
 800d216:	731a      	strb	r2, [r3, #12]
			mbSlave->txBufferSize = 0;
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	2200      	movs	r2, #0
 800d21c:	735a      	strb	r2, [r3, #13]
 800d21e:	e001      	b.n	800d224 <MBS_ProcessRcvdFrame+0xd4>
//			MBRS_PostProcess(mbSlave, errorStatus); // to process some modbus related task after sending the response
		}else{
			MB_ClearBuffer();
 800d220:	f7fe fb8c 	bl	800b93c <MB_ClearBuffer>
		}

		serial->rxBuffSize = 0;
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	2200      	movs	r2, #0
 800d228:	f8a3 2212 	strh.w	r2, [r3, #530]	@ 0x212
		serial->frameOkFlag = 0U;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	2200      	movs	r2, #0
 800d230:	741a      	strb	r2, [r3, #16]
	}
}
 800d232:	bf00      	nop
 800d234:	3710      	adds	r7, #16
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}
 800d23a:	bf00      	nop
 800d23c:	08013860 	.word	0x08013860

0800d240 <MBS_GetCharTimeCluster>:
/**
  * @brief to get the 1.5 7 3.5 char time for slave mode
  * @param none
  * @retval return timeout in us
  */
uint32_t MBS_GetCharTimeCluster(uint32_t baudRate, float charType){
 800d240:	b580      	push	{r7, lr}
 800d242:	ed2d 8b02 	vpush	{d8}
 800d246:	b082      	sub	sp, #8
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
 800d24c:	ed87 0a00 	vstr	s0, [r7]
	return ceil(1000.0f * charType * MBS_GetByteTxTime(baudRate));
 800d250:	edd7 7a00 	vldr	s15, [r7]
 800d254:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800d298 <MBS_GetCharTimeCluster+0x58>
 800d258:	ee27 8a87 	vmul.f32	s16, s15, s14
 800d25c:	6878      	ldr	r0, [r7, #4]
 800d25e:	f000 f81d 	bl	800d29c <MBS_GetByteTxTime>
 800d262:	eef0 7a40 	vmov.f32	s15, s0
 800d266:	ee68 7a27 	vmul.f32	s15, s16, s15
 800d26a:	ee17 0a90 	vmov	r0, s15
 800d26e:	f7fb f8a3 	bl	80083b8 <__aeabi_f2d>
 800d272:	4602      	mov	r2, r0
 800d274:	460b      	mov	r3, r1
 800d276:	ec43 2b10 	vmov	d0, r2, r3
 800d27a:	f006 f885 	bl	8013388 <ceil>
 800d27e:	ec53 2b10 	vmov	r2, r3, d0
 800d282:	4610      	mov	r0, r2
 800d284:	4619      	mov	r1, r3
 800d286:	f7fb fbc7 	bl	8008a18 <__aeabi_d2uiz>
 800d28a:	4603      	mov	r3, r0
}
 800d28c:	4618      	mov	r0, r3
 800d28e:	3708      	adds	r7, #8
 800d290:	46bd      	mov	sp, r7
 800d292:	ecbd 8b02 	vpop	{d8}
 800d296:	bd80      	pop	{r7, pc}
 800d298:	447a0000 	.word	0x447a0000

0800d29c <MBS_GetByteTxTime>:
  * fo 1 byte tx, we actually need to send 11bits in 1 frame
  * 1 frame = 11 bits = 1 stop bit + 8 bits data + 1 parity bit + 1 stop bit
  * @param none
  * @retval return timeout in ms
  */
static float MBS_GetByteTxTime(uint32_t baudRate){
 800d29c:	b480      	push	{r7}
 800d29e:	b083      	sub	sp, #12
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
	return (baudRate > 0 ? (11000.0f/(float)baudRate) : MBS_1CHAR_TX_TIMEOUT_MAX);
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d009      	beq.n	800d2be <MBS_GetByteTxTime+0x22>
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	ee07 3a90 	vmov	s15, r3
 800d2b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2b4:	eddf 6a07 	vldr	s13, [pc, #28]	@ 800d2d4 <MBS_GetByteTxTime+0x38>
 800d2b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d2bc:	e001      	b.n	800d2c2 <MBS_GetByteTxTime+0x26>
 800d2be:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800d2d8 <MBS_GetByteTxTime+0x3c>
 800d2c2:	eef0 7a47 	vmov.f32	s15, s14
}
 800d2c6:	eeb0 0a67 	vmov.f32	s0, s15
 800d2ca:	370c      	adds	r7, #12
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d2:	4770      	bx	lr
 800d2d4:	462be000 	.word	0x462be000
 800d2d8:	3f856042 	.word	0x3f856042

0800d2dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800d2dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800d314 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800d2e0:	480d      	ldr	r0, [pc, #52]	@ (800d318 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800d2e2:	490e      	ldr	r1, [pc, #56]	@ (800d31c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800d2e4:	4a0e      	ldr	r2, [pc, #56]	@ (800d320 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800d2e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800d2e8:	e002      	b.n	800d2f0 <LoopCopyDataInit>

0800d2ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800d2ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800d2ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800d2ee:	3304      	adds	r3, #4

0800d2f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800d2f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800d2f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800d2f4:	d3f9      	bcc.n	800d2ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800d2f6:	4a0b      	ldr	r2, [pc, #44]	@ (800d324 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800d2f8:	4c0b      	ldr	r4, [pc, #44]	@ (800d328 <LoopFillZerobss+0x26>)
  movs r3, #0
 800d2fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 800d2fc:	e001      	b.n	800d302 <LoopFillZerobss>

0800d2fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800d2fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800d300:	3204      	adds	r2, #4

0800d302 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800d302:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800d304:	d3fb      	bcc.n	800d2fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800d306:	f7fe f857 	bl	800b3b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800d30a:	f003 ffcb 	bl	80112a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800d30e:	f7fd f991 	bl	800a634 <main>
  bx  lr    
 800d312:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800d314:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800d318:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800d31c:	200003fc 	.word	0x200003fc
  ldr r2, =_sidata
 800d320:	08013c18 	.word	0x08013c18
  ldr r2, =_sbss
 800d324:	20000400 	.word	0x20000400
  ldr r4, =_ebss
 800d328:	20000de0 	.word	0x20000de0

0800d32c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800d32c:	e7fe      	b.n	800d32c <ADC_IRQHandler>
	...

0800d330 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800d330:	b580      	push	{r7, lr}
 800d332:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800d334:	4b0e      	ldr	r3, [pc, #56]	@ (800d370 <HAL_Init+0x40>)
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	4a0d      	ldr	r2, [pc, #52]	@ (800d370 <HAL_Init+0x40>)
 800d33a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800d33e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800d340:	4b0b      	ldr	r3, [pc, #44]	@ (800d370 <HAL_Init+0x40>)
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	4a0a      	ldr	r2, [pc, #40]	@ (800d370 <HAL_Init+0x40>)
 800d346:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800d34a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800d34c:	4b08      	ldr	r3, [pc, #32]	@ (800d370 <HAL_Init+0x40>)
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	4a07      	ldr	r2, [pc, #28]	@ (800d370 <HAL_Init+0x40>)
 800d352:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d356:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800d358:	2003      	movs	r0, #3
 800d35a:	f000 f94f 	bl	800d5fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800d35e:	2000      	movs	r0, #0
 800d360:	f000 f808 	bl	800d374 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800d364:	f7fd fcb2 	bl	800accc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800d368:	2300      	movs	r3, #0
}
 800d36a:	4618      	mov	r0, r3
 800d36c:	bd80      	pop	{r7, pc}
 800d36e:	bf00      	nop
 800d370:	40023c00 	.word	0x40023c00

0800d374 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b082      	sub	sp, #8
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800d37c:	4b12      	ldr	r3, [pc, #72]	@ (800d3c8 <HAL_InitTick+0x54>)
 800d37e:	681a      	ldr	r2, [r3, #0]
 800d380:	4b12      	ldr	r3, [pc, #72]	@ (800d3cc <HAL_InitTick+0x58>)
 800d382:	781b      	ldrb	r3, [r3, #0]
 800d384:	4619      	mov	r1, r3
 800d386:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d38a:	fbb3 f3f1 	udiv	r3, r3, r1
 800d38e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d392:	4618      	mov	r0, r3
 800d394:	f000 f967 	bl	800d666 <HAL_SYSTICK_Config>
 800d398:	4603      	mov	r3, r0
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d001      	beq.n	800d3a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800d39e:	2301      	movs	r3, #1
 800d3a0:	e00e      	b.n	800d3c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	2b0f      	cmp	r3, #15
 800d3a6:	d80a      	bhi.n	800d3be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	6879      	ldr	r1, [r7, #4]
 800d3ac:	f04f 30ff 	mov.w	r0, #4294967295
 800d3b0:	f000 f92f 	bl	800d612 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800d3b4:	4a06      	ldr	r2, [pc, #24]	@ (800d3d0 <HAL_InitTick+0x5c>)
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	e000      	b.n	800d3c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800d3be:	2301      	movs	r3, #1
}
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	3708      	adds	r7, #8
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	bd80      	pop	{r7, pc}
 800d3c8:	20000028 	.word	0x20000028
 800d3cc:	20000230 	.word	0x20000230
 800d3d0:	2000022c 	.word	0x2000022c

0800d3d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800d3d4:	b480      	push	{r7}
 800d3d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800d3d8:	4b06      	ldr	r3, [pc, #24]	@ (800d3f4 <HAL_IncTick+0x20>)
 800d3da:	781b      	ldrb	r3, [r3, #0]
 800d3dc:	461a      	mov	r2, r3
 800d3de:	4b06      	ldr	r3, [pc, #24]	@ (800d3f8 <HAL_IncTick+0x24>)
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	4413      	add	r3, r2
 800d3e4:	4a04      	ldr	r2, [pc, #16]	@ (800d3f8 <HAL_IncTick+0x24>)
 800d3e6:	6013      	str	r3, [r2, #0]
}
 800d3e8:	bf00      	nop
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f0:	4770      	bx	lr
 800d3f2:	bf00      	nop
 800d3f4:	20000230 	.word	0x20000230
 800d3f8:	20000c70 	.word	0x20000c70

0800d3fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800d3fc:	b480      	push	{r7}
 800d3fe:	af00      	add	r7, sp, #0
  return uwTick;
 800d400:	4b03      	ldr	r3, [pc, #12]	@ (800d410 <HAL_GetTick+0x14>)
 800d402:	681b      	ldr	r3, [r3, #0]
}
 800d404:	4618      	mov	r0, r3
 800d406:	46bd      	mov	sp, r7
 800d408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40c:	4770      	bx	lr
 800d40e:	bf00      	nop
 800d410:	20000c70 	.word	0x20000c70

0800d414 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800d414:	b580      	push	{r7, lr}
 800d416:	b084      	sub	sp, #16
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800d41c:	f7ff ffee 	bl	800d3fc <HAL_GetTick>
 800d420:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d42c:	d005      	beq.n	800d43a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800d42e:	4b0a      	ldr	r3, [pc, #40]	@ (800d458 <HAL_Delay+0x44>)
 800d430:	781b      	ldrb	r3, [r3, #0]
 800d432:	461a      	mov	r2, r3
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	4413      	add	r3, r2
 800d438:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800d43a:	bf00      	nop
 800d43c:	f7ff ffde 	bl	800d3fc <HAL_GetTick>
 800d440:	4602      	mov	r2, r0
 800d442:	68bb      	ldr	r3, [r7, #8]
 800d444:	1ad3      	subs	r3, r2, r3
 800d446:	68fa      	ldr	r2, [r7, #12]
 800d448:	429a      	cmp	r2, r3
 800d44a:	d8f7      	bhi.n	800d43c <HAL_Delay+0x28>
  {
  }
}
 800d44c:	bf00      	nop
 800d44e:	bf00      	nop
 800d450:	3710      	adds	r7, #16
 800d452:	46bd      	mov	sp, r7
 800d454:	bd80      	pop	{r7, pc}
 800d456:	bf00      	nop
 800d458:	20000230 	.word	0x20000230

0800d45c <__NVIC_SetPriorityGrouping>:
{
 800d45c:	b480      	push	{r7}
 800d45e:	b085      	sub	sp, #20
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	f003 0307 	and.w	r3, r3, #7
 800d46a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800d46c:	4b0c      	ldr	r3, [pc, #48]	@ (800d4a0 <__NVIC_SetPriorityGrouping+0x44>)
 800d46e:	68db      	ldr	r3, [r3, #12]
 800d470:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800d472:	68ba      	ldr	r2, [r7, #8]
 800d474:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800d478:	4013      	ands	r3, r2
 800d47a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800d480:	68bb      	ldr	r3, [r7, #8]
 800d482:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800d484:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800d488:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d48c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800d48e:	4a04      	ldr	r2, [pc, #16]	@ (800d4a0 <__NVIC_SetPriorityGrouping+0x44>)
 800d490:	68bb      	ldr	r3, [r7, #8]
 800d492:	60d3      	str	r3, [r2, #12]
}
 800d494:	bf00      	nop
 800d496:	3714      	adds	r7, #20
 800d498:	46bd      	mov	sp, r7
 800d49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49e:	4770      	bx	lr
 800d4a0:	e000ed00 	.word	0xe000ed00

0800d4a4 <__NVIC_GetPriorityGrouping>:
{
 800d4a4:	b480      	push	{r7}
 800d4a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800d4a8:	4b04      	ldr	r3, [pc, #16]	@ (800d4bc <__NVIC_GetPriorityGrouping+0x18>)
 800d4aa:	68db      	ldr	r3, [r3, #12]
 800d4ac:	0a1b      	lsrs	r3, r3, #8
 800d4ae:	f003 0307 	and.w	r3, r3, #7
}
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ba:	4770      	bx	lr
 800d4bc:	e000ed00 	.word	0xe000ed00

0800d4c0 <__NVIC_EnableIRQ>:
{
 800d4c0:	b480      	push	{r7}
 800d4c2:	b083      	sub	sp, #12
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d4ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	db0b      	blt.n	800d4ea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d4d2:	79fb      	ldrb	r3, [r7, #7]
 800d4d4:	f003 021f 	and.w	r2, r3, #31
 800d4d8:	4907      	ldr	r1, [pc, #28]	@ (800d4f8 <__NVIC_EnableIRQ+0x38>)
 800d4da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d4de:	095b      	lsrs	r3, r3, #5
 800d4e0:	2001      	movs	r0, #1
 800d4e2:	fa00 f202 	lsl.w	r2, r0, r2
 800d4e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800d4ea:	bf00      	nop
 800d4ec:	370c      	adds	r7, #12
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f4:	4770      	bx	lr
 800d4f6:	bf00      	nop
 800d4f8:	e000e100 	.word	0xe000e100

0800d4fc <__NVIC_SetPriority>:
{
 800d4fc:	b480      	push	{r7}
 800d4fe:	b083      	sub	sp, #12
 800d500:	af00      	add	r7, sp, #0
 800d502:	4603      	mov	r3, r0
 800d504:	6039      	str	r1, [r7, #0]
 800d506:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	db0a      	blt.n	800d526 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d510:	683b      	ldr	r3, [r7, #0]
 800d512:	b2da      	uxtb	r2, r3
 800d514:	490c      	ldr	r1, [pc, #48]	@ (800d548 <__NVIC_SetPriority+0x4c>)
 800d516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d51a:	0112      	lsls	r2, r2, #4
 800d51c:	b2d2      	uxtb	r2, r2
 800d51e:	440b      	add	r3, r1
 800d520:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800d524:	e00a      	b.n	800d53c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d526:	683b      	ldr	r3, [r7, #0]
 800d528:	b2da      	uxtb	r2, r3
 800d52a:	4908      	ldr	r1, [pc, #32]	@ (800d54c <__NVIC_SetPriority+0x50>)
 800d52c:	79fb      	ldrb	r3, [r7, #7]
 800d52e:	f003 030f 	and.w	r3, r3, #15
 800d532:	3b04      	subs	r3, #4
 800d534:	0112      	lsls	r2, r2, #4
 800d536:	b2d2      	uxtb	r2, r2
 800d538:	440b      	add	r3, r1
 800d53a:	761a      	strb	r2, [r3, #24]
}
 800d53c:	bf00      	nop
 800d53e:	370c      	adds	r7, #12
 800d540:	46bd      	mov	sp, r7
 800d542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d546:	4770      	bx	lr
 800d548:	e000e100 	.word	0xe000e100
 800d54c:	e000ed00 	.word	0xe000ed00

0800d550 <NVIC_EncodePriority>:
{
 800d550:	b480      	push	{r7}
 800d552:	b089      	sub	sp, #36	@ 0x24
 800d554:	af00      	add	r7, sp, #0
 800d556:	60f8      	str	r0, [r7, #12]
 800d558:	60b9      	str	r1, [r7, #8]
 800d55a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	f003 0307 	and.w	r3, r3, #7
 800d562:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800d564:	69fb      	ldr	r3, [r7, #28]
 800d566:	f1c3 0307 	rsb	r3, r3, #7
 800d56a:	2b04      	cmp	r3, #4
 800d56c:	bf28      	it	cs
 800d56e:	2304      	movcs	r3, #4
 800d570:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800d572:	69fb      	ldr	r3, [r7, #28]
 800d574:	3304      	adds	r3, #4
 800d576:	2b06      	cmp	r3, #6
 800d578:	d902      	bls.n	800d580 <NVIC_EncodePriority+0x30>
 800d57a:	69fb      	ldr	r3, [r7, #28]
 800d57c:	3b03      	subs	r3, #3
 800d57e:	e000      	b.n	800d582 <NVIC_EncodePriority+0x32>
 800d580:	2300      	movs	r3, #0
 800d582:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d584:	f04f 32ff 	mov.w	r2, #4294967295
 800d588:	69bb      	ldr	r3, [r7, #24]
 800d58a:	fa02 f303 	lsl.w	r3, r2, r3
 800d58e:	43da      	mvns	r2, r3
 800d590:	68bb      	ldr	r3, [r7, #8]
 800d592:	401a      	ands	r2, r3
 800d594:	697b      	ldr	r3, [r7, #20]
 800d596:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800d598:	f04f 31ff 	mov.w	r1, #4294967295
 800d59c:	697b      	ldr	r3, [r7, #20]
 800d59e:	fa01 f303 	lsl.w	r3, r1, r3
 800d5a2:	43d9      	mvns	r1, r3
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d5a8:	4313      	orrs	r3, r2
}
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	3724      	adds	r7, #36	@ 0x24
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b4:	4770      	bx	lr
	...

0800d5b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b082      	sub	sp, #8
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	3b01      	subs	r3, #1
 800d5c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d5c8:	d301      	bcc.n	800d5ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800d5ca:	2301      	movs	r3, #1
 800d5cc:	e00f      	b.n	800d5ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800d5ce:	4a0a      	ldr	r2, [pc, #40]	@ (800d5f8 <SysTick_Config+0x40>)
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	3b01      	subs	r3, #1
 800d5d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800d5d6:	210f      	movs	r1, #15
 800d5d8:	f04f 30ff 	mov.w	r0, #4294967295
 800d5dc:	f7ff ff8e 	bl	800d4fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800d5e0:	4b05      	ldr	r3, [pc, #20]	@ (800d5f8 <SysTick_Config+0x40>)
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800d5e6:	4b04      	ldr	r3, [pc, #16]	@ (800d5f8 <SysTick_Config+0x40>)
 800d5e8:	2207      	movs	r2, #7
 800d5ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800d5ec:	2300      	movs	r3, #0
}
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	3708      	adds	r7, #8
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	bd80      	pop	{r7, pc}
 800d5f6:	bf00      	nop
 800d5f8:	e000e010 	.word	0xe000e010

0800d5fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b082      	sub	sp, #8
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800d604:	6878      	ldr	r0, [r7, #4]
 800d606:	f7ff ff29 	bl	800d45c <__NVIC_SetPriorityGrouping>
}
 800d60a:	bf00      	nop
 800d60c:	3708      	adds	r7, #8
 800d60e:	46bd      	mov	sp, r7
 800d610:	bd80      	pop	{r7, pc}

0800d612 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800d612:	b580      	push	{r7, lr}
 800d614:	b086      	sub	sp, #24
 800d616:	af00      	add	r7, sp, #0
 800d618:	4603      	mov	r3, r0
 800d61a:	60b9      	str	r1, [r7, #8]
 800d61c:	607a      	str	r2, [r7, #4]
 800d61e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800d620:	2300      	movs	r3, #0
 800d622:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800d624:	f7ff ff3e 	bl	800d4a4 <__NVIC_GetPriorityGrouping>
 800d628:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800d62a:	687a      	ldr	r2, [r7, #4]
 800d62c:	68b9      	ldr	r1, [r7, #8]
 800d62e:	6978      	ldr	r0, [r7, #20]
 800d630:	f7ff ff8e 	bl	800d550 <NVIC_EncodePriority>
 800d634:	4602      	mov	r2, r0
 800d636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d63a:	4611      	mov	r1, r2
 800d63c:	4618      	mov	r0, r3
 800d63e:	f7ff ff5d 	bl	800d4fc <__NVIC_SetPriority>
}
 800d642:	bf00      	nop
 800d644:	3718      	adds	r7, #24
 800d646:	46bd      	mov	sp, r7
 800d648:	bd80      	pop	{r7, pc}

0800d64a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800d64a:	b580      	push	{r7, lr}
 800d64c:	b082      	sub	sp, #8
 800d64e:	af00      	add	r7, sp, #0
 800d650:	4603      	mov	r3, r0
 800d652:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800d654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d658:	4618      	mov	r0, r3
 800d65a:	f7ff ff31 	bl	800d4c0 <__NVIC_EnableIRQ>
}
 800d65e:	bf00      	nop
 800d660:	3708      	adds	r7, #8
 800d662:	46bd      	mov	sp, r7
 800d664:	bd80      	pop	{r7, pc}

0800d666 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800d666:	b580      	push	{r7, lr}
 800d668:	b082      	sub	sp, #8
 800d66a:	af00      	add	r7, sp, #0
 800d66c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800d66e:	6878      	ldr	r0, [r7, #4]
 800d670:	f7ff ffa2 	bl	800d5b8 <SysTick_Config>
 800d674:	4603      	mov	r3, r0
}
 800d676:	4618      	mov	r0, r3
 800d678:	3708      	adds	r7, #8
 800d67a:	46bd      	mov	sp, r7
 800d67c:	bd80      	pop	{r7, pc}

0800d67e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800d67e:	b580      	push	{r7, lr}
 800d680:	b084      	sub	sp, #16
 800d682:	af00      	add	r7, sp, #0
 800d684:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d68a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800d68c:	f7ff feb6 	bl	800d3fc <HAL_GetTick>
 800d690:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d698:	b2db      	uxtb	r3, r3
 800d69a:	2b02      	cmp	r3, #2
 800d69c:	d008      	beq.n	800d6b0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	2280      	movs	r2, #128	@ 0x80
 800d6a2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800d6ac:	2301      	movs	r3, #1
 800d6ae:	e052      	b.n	800d756 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	681a      	ldr	r2, [r3, #0]
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	f022 0216 	bic.w	r2, r2, #22
 800d6be:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	695a      	ldr	r2, [r3, #20]
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d6ce:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d103      	bne.n	800d6e0 <HAL_DMA_Abort+0x62>
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d007      	beq.n	800d6f0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	681a      	ldr	r2, [r3, #0]
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	f022 0208 	bic.w	r2, r2, #8
 800d6ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	681a      	ldr	r2, [r3, #0]
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	f022 0201 	bic.w	r2, r2, #1
 800d6fe:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800d700:	e013      	b.n	800d72a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800d702:	f7ff fe7b 	bl	800d3fc <HAL_GetTick>
 800d706:	4602      	mov	r2, r0
 800d708:	68bb      	ldr	r3, [r7, #8]
 800d70a:	1ad3      	subs	r3, r2, r3
 800d70c:	2b05      	cmp	r3, #5
 800d70e:	d90c      	bls.n	800d72a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	2220      	movs	r2, #32
 800d714:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	2203      	movs	r2, #3
 800d71a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	2200      	movs	r2, #0
 800d722:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800d726:	2303      	movs	r3, #3
 800d728:	e015      	b.n	800d756 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	f003 0301 	and.w	r3, r3, #1
 800d734:	2b00      	cmp	r3, #0
 800d736:	d1e4      	bne.n	800d702 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d73c:	223f      	movs	r2, #63	@ 0x3f
 800d73e:	409a      	lsls	r2, r3
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	2201      	movs	r2, #1
 800d748:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	2200      	movs	r2, #0
 800d750:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800d754:	2300      	movs	r3, #0
}
 800d756:	4618      	mov	r0, r3
 800d758:	3710      	adds	r7, #16
 800d75a:	46bd      	mov	sp, r7
 800d75c:	bd80      	pop	{r7, pc}

0800d75e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800d75e:	b480      	push	{r7}
 800d760:	b083      	sub	sp, #12
 800d762:	af00      	add	r7, sp, #0
 800d764:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d76c:	b2db      	uxtb	r3, r3
 800d76e:	2b02      	cmp	r3, #2
 800d770:	d004      	beq.n	800d77c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	2280      	movs	r2, #128	@ 0x80
 800d776:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800d778:	2301      	movs	r3, #1
 800d77a:	e00c      	b.n	800d796 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	2205      	movs	r2, #5
 800d780:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	681a      	ldr	r2, [r3, #0]
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	f022 0201 	bic.w	r2, r2, #1
 800d792:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800d794:	2300      	movs	r3, #0
}
 800d796:	4618      	mov	r0, r3
 800d798:	370c      	adds	r7, #12
 800d79a:	46bd      	mov	sp, r7
 800d79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a0:	4770      	bx	lr
	...

0800d7a4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b086      	sub	sp, #24
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	60f8      	str	r0, [r7, #12]
 800d7ac:	60b9      	str	r1, [r7, #8]
 800d7ae:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d7b2:	2301      	movs	r3, #1
 800d7b4:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800d7b6:	4b23      	ldr	r3, [pc, #140]	@ (800d844 <HAL_FLASH_Program+0xa0>)
 800d7b8:	7e1b      	ldrb	r3, [r3, #24]
 800d7ba:	2b01      	cmp	r3, #1
 800d7bc:	d101      	bne.n	800d7c2 <HAL_FLASH_Program+0x1e>
 800d7be:	2302      	movs	r3, #2
 800d7c0:	e03b      	b.n	800d83a <HAL_FLASH_Program+0x96>
 800d7c2:	4b20      	ldr	r3, [pc, #128]	@ (800d844 <HAL_FLASH_Program+0xa0>)
 800d7c4:	2201      	movs	r2, #1
 800d7c6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d7c8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d7cc:	f000 f870 	bl	800d8b0 <FLASH_WaitForLastOperation>
 800d7d0:	4603      	mov	r3, r0
 800d7d2:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800d7d4:	7dfb      	ldrb	r3, [r7, #23]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d12b      	bne.n	800d832 <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d105      	bne.n	800d7ec <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800d7e0:	783b      	ldrb	r3, [r7, #0]
 800d7e2:	4619      	mov	r1, r3
 800d7e4:	68b8      	ldr	r0, [r7, #8]
 800d7e6:	f000 f91b 	bl	800da20 <FLASH_Program_Byte>
 800d7ea:	e016      	b.n	800d81a <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	2b01      	cmp	r3, #1
 800d7f0:	d105      	bne.n	800d7fe <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800d7f2:	883b      	ldrh	r3, [r7, #0]
 800d7f4:	4619      	mov	r1, r3
 800d7f6:	68b8      	ldr	r0, [r7, #8]
 800d7f8:	f000 f8ee 	bl	800d9d8 <FLASH_Program_HalfWord>
 800d7fc:	e00d      	b.n	800d81a <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	2b02      	cmp	r3, #2
 800d802:	d105      	bne.n	800d810 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	4619      	mov	r1, r3
 800d808:	68b8      	ldr	r0, [r7, #8]
 800d80a:	f000 f8c3 	bl	800d994 <FLASH_Program_Word>
 800d80e:	e004      	b.n	800d81a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800d810:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d814:	68b8      	ldr	r0, [r7, #8]
 800d816:	f000 f88b 	bl	800d930 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d81a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d81e:	f000 f847 	bl	800d8b0 <FLASH_WaitForLastOperation>
 800d822:	4603      	mov	r3, r0
 800d824:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800d826:	4b08      	ldr	r3, [pc, #32]	@ (800d848 <HAL_FLASH_Program+0xa4>)
 800d828:	691b      	ldr	r3, [r3, #16]
 800d82a:	4a07      	ldr	r2, [pc, #28]	@ (800d848 <HAL_FLASH_Program+0xa4>)
 800d82c:	f023 0301 	bic.w	r3, r3, #1
 800d830:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800d832:	4b04      	ldr	r3, [pc, #16]	@ (800d844 <HAL_FLASH_Program+0xa0>)
 800d834:	2200      	movs	r2, #0
 800d836:	761a      	strb	r2, [r3, #24]

  return status;
 800d838:	7dfb      	ldrb	r3, [r7, #23]
}
 800d83a:	4618      	mov	r0, r3
 800d83c:	3718      	adds	r7, #24
 800d83e:	46bd      	mov	sp, r7
 800d840:	bd80      	pop	{r7, pc}
 800d842:	bf00      	nop
 800d844:	20000c74 	.word	0x20000c74
 800d848:	40023c00 	.word	0x40023c00

0800d84c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800d84c:	b480      	push	{r7}
 800d84e:	b083      	sub	sp, #12
 800d850:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800d852:	2300      	movs	r3, #0
 800d854:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800d856:	4b0b      	ldr	r3, [pc, #44]	@ (800d884 <HAL_FLASH_Unlock+0x38>)
 800d858:	691b      	ldr	r3, [r3, #16]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	da0b      	bge.n	800d876 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800d85e:	4b09      	ldr	r3, [pc, #36]	@ (800d884 <HAL_FLASH_Unlock+0x38>)
 800d860:	4a09      	ldr	r2, [pc, #36]	@ (800d888 <HAL_FLASH_Unlock+0x3c>)
 800d862:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800d864:	4b07      	ldr	r3, [pc, #28]	@ (800d884 <HAL_FLASH_Unlock+0x38>)
 800d866:	4a09      	ldr	r2, [pc, #36]	@ (800d88c <HAL_FLASH_Unlock+0x40>)
 800d868:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800d86a:	4b06      	ldr	r3, [pc, #24]	@ (800d884 <HAL_FLASH_Unlock+0x38>)
 800d86c:	691b      	ldr	r3, [r3, #16]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	da01      	bge.n	800d876 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800d872:	2301      	movs	r3, #1
 800d874:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800d876:	79fb      	ldrb	r3, [r7, #7]
}
 800d878:	4618      	mov	r0, r3
 800d87a:	370c      	adds	r7, #12
 800d87c:	46bd      	mov	sp, r7
 800d87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d882:	4770      	bx	lr
 800d884:	40023c00 	.word	0x40023c00
 800d888:	45670123 	.word	0x45670123
 800d88c:	cdef89ab 	.word	0xcdef89ab

0800d890 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800d890:	b480      	push	{r7}
 800d892:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800d894:	4b05      	ldr	r3, [pc, #20]	@ (800d8ac <HAL_FLASH_Lock+0x1c>)
 800d896:	691b      	ldr	r3, [r3, #16]
 800d898:	4a04      	ldr	r2, [pc, #16]	@ (800d8ac <HAL_FLASH_Lock+0x1c>)
 800d89a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800d89e:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800d8a0:	2300      	movs	r3, #0
}
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8aa:	4770      	bx	lr
 800d8ac:	40023c00 	.word	0x40023c00

0800d8b0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b084      	sub	sp, #16
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800d8bc:	4b1a      	ldr	r3, [pc, #104]	@ (800d928 <FLASH_WaitForLastOperation+0x78>)
 800d8be:	2200      	movs	r2, #0
 800d8c0:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800d8c2:	f7ff fd9b 	bl	800d3fc <HAL_GetTick>
 800d8c6:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 800d8c8:	e010      	b.n	800d8ec <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8d0:	d00c      	beq.n	800d8ec <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d007      	beq.n	800d8e8 <FLASH_WaitForLastOperation+0x38>
 800d8d8:	f7ff fd90 	bl	800d3fc <HAL_GetTick>
 800d8dc:	4602      	mov	r2, r0
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	1ad3      	subs	r3, r2, r3
 800d8e2:	687a      	ldr	r2, [r7, #4]
 800d8e4:	429a      	cmp	r2, r3
 800d8e6:	d201      	bcs.n	800d8ec <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800d8e8:	2303      	movs	r3, #3
 800d8ea:	e019      	b.n	800d920 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 800d8ec:	4b0f      	ldr	r3, [pc, #60]	@ (800d92c <FLASH_WaitForLastOperation+0x7c>)
 800d8ee:	68db      	ldr	r3, [r3, #12]
 800d8f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d1e8      	bne.n	800d8ca <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800d8f8:	4b0c      	ldr	r3, [pc, #48]	@ (800d92c <FLASH_WaitForLastOperation+0x7c>)
 800d8fa:	68db      	ldr	r3, [r3, #12]
 800d8fc:	f003 0301 	and.w	r3, r3, #1
 800d900:	2b00      	cmp	r3, #0
 800d902:	d002      	beq.n	800d90a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800d904:	4b09      	ldr	r3, [pc, #36]	@ (800d92c <FLASH_WaitForLastOperation+0x7c>)
 800d906:	2201      	movs	r2, #1
 800d908:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800d90a:	4b08      	ldr	r3, [pc, #32]	@ (800d92c <FLASH_WaitForLastOperation+0x7c>)
 800d90c:	68db      	ldr	r3, [r3, #12]
 800d90e:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 800d912:	2b00      	cmp	r3, #0
 800d914:	d003      	beq.n	800d91e <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800d916:	f000 f8a5 	bl	800da64 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800d91a:	2301      	movs	r3, #1
 800d91c:	e000      	b.n	800d920 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800d91e:	2300      	movs	r3, #0

}
 800d920:	4618      	mov	r0, r3
 800d922:	3710      	adds	r7, #16
 800d924:	46bd      	mov	sp, r7
 800d926:	bd80      	pop	{r7, pc}
 800d928:	20000c74 	.word	0x20000c74
 800d92c:	40023c00 	.word	0x40023c00

0800d930 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800d930:	b480      	push	{r7}
 800d932:	b085      	sub	sp, #20
 800d934:	af00      	add	r7, sp, #0
 800d936:	60f8      	str	r0, [r7, #12]
 800d938:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800d93c:	4b14      	ldr	r3, [pc, #80]	@ (800d990 <FLASH_Program_DoubleWord+0x60>)
 800d93e:	691b      	ldr	r3, [r3, #16]
 800d940:	4a13      	ldr	r2, [pc, #76]	@ (800d990 <FLASH_Program_DoubleWord+0x60>)
 800d942:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d946:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800d948:	4b11      	ldr	r3, [pc, #68]	@ (800d990 <FLASH_Program_DoubleWord+0x60>)
 800d94a:	691b      	ldr	r3, [r3, #16]
 800d94c:	4a10      	ldr	r2, [pc, #64]	@ (800d990 <FLASH_Program_DoubleWord+0x60>)
 800d94e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800d952:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800d954:	4b0e      	ldr	r3, [pc, #56]	@ (800d990 <FLASH_Program_DoubleWord+0x60>)
 800d956:	691b      	ldr	r3, [r3, #16]
 800d958:	4a0d      	ldr	r2, [pc, #52]	@ (800d990 <FLASH_Program_DoubleWord+0x60>)
 800d95a:	f043 0301 	orr.w	r3, r3, #1
 800d95e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	683a      	ldr	r2, [r7, #0]
 800d964:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800d966:	f3bf 8f6f 	isb	sy
}
 800d96a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 800d96c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d970:	f04f 0200 	mov.w	r2, #0
 800d974:	f04f 0300 	mov.w	r3, #0
 800d978:	000a      	movs	r2, r1
 800d97a:	2300      	movs	r3, #0
 800d97c:	68f9      	ldr	r1, [r7, #12]
 800d97e:	3104      	adds	r1, #4
 800d980:	4613      	mov	r3, r2
 800d982:	600b      	str	r3, [r1, #0]
}
 800d984:	bf00      	nop
 800d986:	3714      	adds	r7, #20
 800d988:	46bd      	mov	sp, r7
 800d98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98e:	4770      	bx	lr
 800d990:	40023c00 	.word	0x40023c00

0800d994 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800d994:	b480      	push	{r7}
 800d996:	b083      	sub	sp, #12
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
 800d99c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800d99e:	4b0d      	ldr	r3, [pc, #52]	@ (800d9d4 <FLASH_Program_Word+0x40>)
 800d9a0:	691b      	ldr	r3, [r3, #16]
 800d9a2:	4a0c      	ldr	r2, [pc, #48]	@ (800d9d4 <FLASH_Program_Word+0x40>)
 800d9a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d9a8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800d9aa:	4b0a      	ldr	r3, [pc, #40]	@ (800d9d4 <FLASH_Program_Word+0x40>)
 800d9ac:	691b      	ldr	r3, [r3, #16]
 800d9ae:	4a09      	ldr	r2, [pc, #36]	@ (800d9d4 <FLASH_Program_Word+0x40>)
 800d9b0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800d9b4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800d9b6:	4b07      	ldr	r3, [pc, #28]	@ (800d9d4 <FLASH_Program_Word+0x40>)
 800d9b8:	691b      	ldr	r3, [r3, #16]
 800d9ba:	4a06      	ldr	r2, [pc, #24]	@ (800d9d4 <FLASH_Program_Word+0x40>)
 800d9bc:	f043 0301 	orr.w	r3, r3, #1
 800d9c0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	683a      	ldr	r2, [r7, #0]
 800d9c6:	601a      	str	r2, [r3, #0]
}
 800d9c8:	bf00      	nop
 800d9ca:	370c      	adds	r7, #12
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d2:	4770      	bx	lr
 800d9d4:	40023c00 	.word	0x40023c00

0800d9d8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800d9d8:	b480      	push	{r7}
 800d9da:	b083      	sub	sp, #12
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
 800d9e0:	460b      	mov	r3, r1
 800d9e2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800d9e4:	4b0d      	ldr	r3, [pc, #52]	@ (800da1c <FLASH_Program_HalfWord+0x44>)
 800d9e6:	691b      	ldr	r3, [r3, #16]
 800d9e8:	4a0c      	ldr	r2, [pc, #48]	@ (800da1c <FLASH_Program_HalfWord+0x44>)
 800d9ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d9ee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800d9f0:	4b0a      	ldr	r3, [pc, #40]	@ (800da1c <FLASH_Program_HalfWord+0x44>)
 800d9f2:	691b      	ldr	r3, [r3, #16]
 800d9f4:	4a09      	ldr	r2, [pc, #36]	@ (800da1c <FLASH_Program_HalfWord+0x44>)
 800d9f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d9fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800d9fc:	4b07      	ldr	r3, [pc, #28]	@ (800da1c <FLASH_Program_HalfWord+0x44>)
 800d9fe:	691b      	ldr	r3, [r3, #16]
 800da00:	4a06      	ldr	r2, [pc, #24]	@ (800da1c <FLASH_Program_HalfWord+0x44>)
 800da02:	f043 0301 	orr.w	r3, r3, #1
 800da06:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	887a      	ldrh	r2, [r7, #2]
 800da0c:	801a      	strh	r2, [r3, #0]
}
 800da0e:	bf00      	nop
 800da10:	370c      	adds	r7, #12
 800da12:	46bd      	mov	sp, r7
 800da14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da18:	4770      	bx	lr
 800da1a:	bf00      	nop
 800da1c:	40023c00 	.word	0x40023c00

0800da20 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800da20:	b480      	push	{r7}
 800da22:	b083      	sub	sp, #12
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
 800da28:	460b      	mov	r3, r1
 800da2a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800da2c:	4b0c      	ldr	r3, [pc, #48]	@ (800da60 <FLASH_Program_Byte+0x40>)
 800da2e:	691b      	ldr	r3, [r3, #16]
 800da30:	4a0b      	ldr	r2, [pc, #44]	@ (800da60 <FLASH_Program_Byte+0x40>)
 800da32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800da36:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800da38:	4b09      	ldr	r3, [pc, #36]	@ (800da60 <FLASH_Program_Byte+0x40>)
 800da3a:	4a09      	ldr	r2, [pc, #36]	@ (800da60 <FLASH_Program_Byte+0x40>)
 800da3c:	691b      	ldr	r3, [r3, #16]
 800da3e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800da40:	4b07      	ldr	r3, [pc, #28]	@ (800da60 <FLASH_Program_Byte+0x40>)
 800da42:	691b      	ldr	r3, [r3, #16]
 800da44:	4a06      	ldr	r2, [pc, #24]	@ (800da60 <FLASH_Program_Byte+0x40>)
 800da46:	f043 0301 	orr.w	r3, r3, #1
 800da4a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	78fa      	ldrb	r2, [r7, #3]
 800da50:	701a      	strb	r2, [r3, #0]
}
 800da52:	bf00      	nop
 800da54:	370c      	adds	r7, #12
 800da56:	46bd      	mov	sp, r7
 800da58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5c:	4770      	bx	lr
 800da5e:	bf00      	nop
 800da60:	40023c00 	.word	0x40023c00

0800da64 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800da64:	b480      	push	{r7}
 800da66:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800da68:	4b2f      	ldr	r3, [pc, #188]	@ (800db28 <FLASH_SetErrorCode+0xc4>)
 800da6a:	68db      	ldr	r3, [r3, #12]
 800da6c:	f003 0310 	and.w	r3, r3, #16
 800da70:	2b00      	cmp	r3, #0
 800da72:	d008      	beq.n	800da86 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800da74:	4b2d      	ldr	r3, [pc, #180]	@ (800db2c <FLASH_SetErrorCode+0xc8>)
 800da76:	69db      	ldr	r3, [r3, #28]
 800da78:	f043 0310 	orr.w	r3, r3, #16
 800da7c:	4a2b      	ldr	r2, [pc, #172]	@ (800db2c <FLASH_SetErrorCode+0xc8>)
 800da7e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800da80:	4b29      	ldr	r3, [pc, #164]	@ (800db28 <FLASH_SetErrorCode+0xc4>)
 800da82:	2210      	movs	r2, #16
 800da84:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800da86:	4b28      	ldr	r3, [pc, #160]	@ (800db28 <FLASH_SetErrorCode+0xc4>)
 800da88:	68db      	ldr	r3, [r3, #12]
 800da8a:	f003 0320 	and.w	r3, r3, #32
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d008      	beq.n	800daa4 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800da92:	4b26      	ldr	r3, [pc, #152]	@ (800db2c <FLASH_SetErrorCode+0xc8>)
 800da94:	69db      	ldr	r3, [r3, #28]
 800da96:	f043 0308 	orr.w	r3, r3, #8
 800da9a:	4a24      	ldr	r2, [pc, #144]	@ (800db2c <FLASH_SetErrorCode+0xc8>)
 800da9c:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800da9e:	4b22      	ldr	r3, [pc, #136]	@ (800db28 <FLASH_SetErrorCode+0xc4>)
 800daa0:	2220      	movs	r2, #32
 800daa2:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800daa4:	4b20      	ldr	r3, [pc, #128]	@ (800db28 <FLASH_SetErrorCode+0xc4>)
 800daa6:	68db      	ldr	r3, [r3, #12]
 800daa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800daac:	2b00      	cmp	r3, #0
 800daae:	d008      	beq.n	800dac2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800dab0:	4b1e      	ldr	r3, [pc, #120]	@ (800db2c <FLASH_SetErrorCode+0xc8>)
 800dab2:	69db      	ldr	r3, [r3, #28]
 800dab4:	f043 0304 	orr.w	r3, r3, #4
 800dab8:	4a1c      	ldr	r2, [pc, #112]	@ (800db2c <FLASH_SetErrorCode+0xc8>)
 800daba:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800dabc:	4b1a      	ldr	r3, [pc, #104]	@ (800db28 <FLASH_SetErrorCode+0xc4>)
 800dabe:	2240      	movs	r2, #64	@ 0x40
 800dac0:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800dac2:	4b19      	ldr	r3, [pc, #100]	@ (800db28 <FLASH_SetErrorCode+0xc4>)
 800dac4:	68db      	ldr	r3, [r3, #12]
 800dac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d008      	beq.n	800dae0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800dace:	4b17      	ldr	r3, [pc, #92]	@ (800db2c <FLASH_SetErrorCode+0xc8>)
 800dad0:	69db      	ldr	r3, [r3, #28]
 800dad2:	f043 0302 	orr.w	r3, r3, #2
 800dad6:	4a15      	ldr	r2, [pc, #84]	@ (800db2c <FLASH_SetErrorCode+0xc8>)
 800dad8:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800dada:	4b13      	ldr	r3, [pc, #76]	@ (800db28 <FLASH_SetErrorCode+0xc4>)
 800dadc:	2280      	movs	r2, #128	@ 0x80
 800dade:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800dae0:	4b11      	ldr	r3, [pc, #68]	@ (800db28 <FLASH_SetErrorCode+0xc4>)
 800dae2:	68db      	ldr	r3, [r3, #12]
 800dae4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d009      	beq.n	800db00 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800daec:	4b0f      	ldr	r3, [pc, #60]	@ (800db2c <FLASH_SetErrorCode+0xc8>)
 800daee:	69db      	ldr	r3, [r3, #28]
 800daf0:	f043 0301 	orr.w	r3, r3, #1
 800daf4:	4a0d      	ldr	r2, [pc, #52]	@ (800db2c <FLASH_SetErrorCode+0xc8>)
 800daf6:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800daf8:	4b0b      	ldr	r3, [pc, #44]	@ (800db28 <FLASH_SetErrorCode+0xc4>)
 800dafa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800dafe:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800db00:	4b09      	ldr	r3, [pc, #36]	@ (800db28 <FLASH_SetErrorCode+0xc4>)
 800db02:	68db      	ldr	r3, [r3, #12]
 800db04:	f003 0302 	and.w	r3, r3, #2
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d008      	beq.n	800db1e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800db0c:	4b07      	ldr	r3, [pc, #28]	@ (800db2c <FLASH_SetErrorCode+0xc8>)
 800db0e:	69db      	ldr	r3, [r3, #28]
 800db10:	f043 0320 	orr.w	r3, r3, #32
 800db14:	4a05      	ldr	r2, [pc, #20]	@ (800db2c <FLASH_SetErrorCode+0xc8>)
 800db16:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800db18:	4b03      	ldr	r3, [pc, #12]	@ (800db28 <FLASH_SetErrorCode+0xc4>)
 800db1a:	2202      	movs	r2, #2
 800db1c:	60da      	str	r2, [r3, #12]
  }
}
 800db1e:	bf00      	nop
 800db20:	46bd      	mov	sp, r7
 800db22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db26:	4770      	bx	lr
 800db28:	40023c00 	.word	0x40023c00
 800db2c:	20000c74 	.word	0x20000c74

0800db30 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800db30:	b580      	push	{r7, lr}
 800db32:	b084      	sub	sp, #16
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
 800db38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800db3a:	2301      	movs	r3, #1
 800db3c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800db3e:	2300      	movs	r3, #0
 800db40:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800db42:	4b31      	ldr	r3, [pc, #196]	@ (800dc08 <HAL_FLASHEx_Erase+0xd8>)
 800db44:	7e1b      	ldrb	r3, [r3, #24]
 800db46:	2b01      	cmp	r3, #1
 800db48:	d101      	bne.n	800db4e <HAL_FLASHEx_Erase+0x1e>
 800db4a:	2302      	movs	r3, #2
 800db4c:	e058      	b.n	800dc00 <HAL_FLASHEx_Erase+0xd0>
 800db4e:	4b2e      	ldr	r3, [pc, #184]	@ (800dc08 <HAL_FLASHEx_Erase+0xd8>)
 800db50:	2201      	movs	r2, #1
 800db52:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800db54:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800db58:	f7ff feaa 	bl	800d8b0 <FLASH_WaitForLastOperation>
 800db5c:	4603      	mov	r3, r0
 800db5e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800db60:	7bfb      	ldrb	r3, [r7, #15]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d148      	bne.n	800dbf8 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	f04f 32ff 	mov.w	r2, #4294967295
 800db6c:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	2b01      	cmp	r3, #1
 800db74:	d115      	bne.n	800dba2 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	691b      	ldr	r3, [r3, #16]
 800db7a:	b2da      	uxtb	r2, r3
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	685b      	ldr	r3, [r3, #4]
 800db80:	4619      	mov	r1, r3
 800db82:	4610      	mov	r0, r2
 800db84:	f000 f844 	bl	800dc10 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800db88:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800db8c:	f7ff fe90 	bl	800d8b0 <FLASH_WaitForLastOperation>
 800db90:	4603      	mov	r3, r0
 800db92:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800db94:	4b1d      	ldr	r3, [pc, #116]	@ (800dc0c <HAL_FLASHEx_Erase+0xdc>)
 800db96:	691b      	ldr	r3, [r3, #16]
 800db98:	4a1c      	ldr	r2, [pc, #112]	@ (800dc0c <HAL_FLASHEx_Erase+0xdc>)
 800db9a:	f023 0304 	bic.w	r3, r3, #4
 800db9e:	6113      	str	r3, [r2, #16]
 800dba0:	e028      	b.n	800dbf4 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	689b      	ldr	r3, [r3, #8]
 800dba6:	60bb      	str	r3, [r7, #8]
 800dba8:	e01c      	b.n	800dbe4 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	691b      	ldr	r3, [r3, #16]
 800dbae:	b2db      	uxtb	r3, r3
 800dbb0:	4619      	mov	r1, r3
 800dbb2:	68b8      	ldr	r0, [r7, #8]
 800dbb4:	f000 f850 	bl	800dc58 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800dbb8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800dbbc:	f7ff fe78 	bl	800d8b0 <FLASH_WaitForLastOperation>
 800dbc0:	4603      	mov	r3, r0
 800dbc2:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800dbc4:	4b11      	ldr	r3, [pc, #68]	@ (800dc0c <HAL_FLASHEx_Erase+0xdc>)
 800dbc6:	691b      	ldr	r3, [r3, #16]
 800dbc8:	4a10      	ldr	r2, [pc, #64]	@ (800dc0c <HAL_FLASHEx_Erase+0xdc>)
 800dbca:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 800dbce:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800dbd0:	7bfb      	ldrb	r3, [r7, #15]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d003      	beq.n	800dbde <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800dbd6:	683b      	ldr	r3, [r7, #0]
 800dbd8:	68ba      	ldr	r2, [r7, #8]
 800dbda:	601a      	str	r2, [r3, #0]
          break;
 800dbdc:	e00a      	b.n	800dbf4 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800dbde:	68bb      	ldr	r3, [r7, #8]
 800dbe0:	3301      	adds	r3, #1
 800dbe2:	60bb      	str	r3, [r7, #8]
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	68da      	ldr	r2, [r3, #12]
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	689b      	ldr	r3, [r3, #8]
 800dbec:	4413      	add	r3, r2
 800dbee:	68ba      	ldr	r2, [r7, #8]
 800dbf0:	429a      	cmp	r2, r3
 800dbf2:	d3da      	bcc.n	800dbaa <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800dbf4:	f000 f878 	bl	800dce8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800dbf8:	4b03      	ldr	r3, [pc, #12]	@ (800dc08 <HAL_FLASHEx_Erase+0xd8>)
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	761a      	strb	r2, [r3, #24]

  return status;
 800dbfe:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc00:	4618      	mov	r0, r3
 800dc02:	3710      	adds	r7, #16
 800dc04:	46bd      	mov	sp, r7
 800dc06:	bd80      	pop	{r7, pc}
 800dc08:	20000c74 	.word	0x20000c74
 800dc0c:	40023c00 	.word	0x40023c00

0800dc10 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800dc10:	b480      	push	{r7}
 800dc12:	b083      	sub	sp, #12
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	4603      	mov	r3, r0
 800dc18:	6039      	str	r1, [r7, #0]
 800dc1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800dc1c:	4b0d      	ldr	r3, [pc, #52]	@ (800dc54 <FLASH_MassErase+0x44>)
 800dc1e:	691b      	ldr	r3, [r3, #16]
 800dc20:	4a0c      	ldr	r2, [pc, #48]	@ (800dc54 <FLASH_MassErase+0x44>)
 800dc22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800dc26:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800dc28:	4b0a      	ldr	r3, [pc, #40]	@ (800dc54 <FLASH_MassErase+0x44>)
 800dc2a:	691b      	ldr	r3, [r3, #16]
 800dc2c:	4a09      	ldr	r2, [pc, #36]	@ (800dc54 <FLASH_MassErase+0x44>)
 800dc2e:	f043 0304 	orr.w	r3, r3, #4
 800dc32:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 800dc34:	4b07      	ldr	r3, [pc, #28]	@ (800dc54 <FLASH_MassErase+0x44>)
 800dc36:	691a      	ldr	r2, [r3, #16]
 800dc38:	79fb      	ldrb	r3, [r7, #7]
 800dc3a:	021b      	lsls	r3, r3, #8
 800dc3c:	4313      	orrs	r3, r2
 800dc3e:	4a05      	ldr	r2, [pc, #20]	@ (800dc54 <FLASH_MassErase+0x44>)
 800dc40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800dc44:	6113      	str	r3, [r2, #16]
}
 800dc46:	bf00      	nop
 800dc48:	370c      	adds	r7, #12
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc50:	4770      	bx	lr
 800dc52:	bf00      	nop
 800dc54:	40023c00 	.word	0x40023c00

0800dc58 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800dc58:	b480      	push	{r7}
 800dc5a:	b085      	sub	sp, #20
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
 800dc60:	460b      	mov	r3, r1
 800dc62:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800dc64:	2300      	movs	r3, #0
 800dc66:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800dc68:	78fb      	ldrb	r3, [r7, #3]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d102      	bne.n	800dc74 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800dc6e:	2300      	movs	r3, #0
 800dc70:	60fb      	str	r3, [r7, #12]
 800dc72:	e010      	b.n	800dc96 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800dc74:	78fb      	ldrb	r3, [r7, #3]
 800dc76:	2b01      	cmp	r3, #1
 800dc78:	d103      	bne.n	800dc82 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800dc7a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800dc7e:	60fb      	str	r3, [r7, #12]
 800dc80:	e009      	b.n	800dc96 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800dc82:	78fb      	ldrb	r3, [r7, #3]
 800dc84:	2b02      	cmp	r3, #2
 800dc86:	d103      	bne.n	800dc90 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800dc88:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dc8c:	60fb      	str	r3, [r7, #12]
 800dc8e:	e002      	b.n	800dc96 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800dc90:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800dc94:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800dc96:	4b13      	ldr	r3, [pc, #76]	@ (800dce4 <FLASH_Erase_Sector+0x8c>)
 800dc98:	691b      	ldr	r3, [r3, #16]
 800dc9a:	4a12      	ldr	r2, [pc, #72]	@ (800dce4 <FLASH_Erase_Sector+0x8c>)
 800dc9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800dca0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800dca2:	4b10      	ldr	r3, [pc, #64]	@ (800dce4 <FLASH_Erase_Sector+0x8c>)
 800dca4:	691a      	ldr	r2, [r3, #16]
 800dca6:	490f      	ldr	r1, [pc, #60]	@ (800dce4 <FLASH_Erase_Sector+0x8c>)
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	4313      	orrs	r3, r2
 800dcac:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800dcae:	4b0d      	ldr	r3, [pc, #52]	@ (800dce4 <FLASH_Erase_Sector+0x8c>)
 800dcb0:	691b      	ldr	r3, [r3, #16]
 800dcb2:	4a0c      	ldr	r2, [pc, #48]	@ (800dce4 <FLASH_Erase_Sector+0x8c>)
 800dcb4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800dcb8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800dcba:	4b0a      	ldr	r3, [pc, #40]	@ (800dce4 <FLASH_Erase_Sector+0x8c>)
 800dcbc:	691a      	ldr	r2, [r3, #16]
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	00db      	lsls	r3, r3, #3
 800dcc2:	4313      	orrs	r3, r2
 800dcc4:	4a07      	ldr	r2, [pc, #28]	@ (800dce4 <FLASH_Erase_Sector+0x8c>)
 800dcc6:	f043 0302 	orr.w	r3, r3, #2
 800dcca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800dccc:	4b05      	ldr	r3, [pc, #20]	@ (800dce4 <FLASH_Erase_Sector+0x8c>)
 800dcce:	691b      	ldr	r3, [r3, #16]
 800dcd0:	4a04      	ldr	r2, [pc, #16]	@ (800dce4 <FLASH_Erase_Sector+0x8c>)
 800dcd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800dcd6:	6113      	str	r3, [r2, #16]
}
 800dcd8:	bf00      	nop
 800dcda:	3714      	adds	r7, #20
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce2:	4770      	bx	lr
 800dce4:	40023c00 	.word	0x40023c00

0800dce8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800dce8:	b480      	push	{r7}
 800dcea:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 800dcec:	4b20      	ldr	r3, [pc, #128]	@ (800dd70 <FLASH_FlushCaches+0x88>)
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d017      	beq.n	800dd28 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800dcf8:	4b1d      	ldr	r3, [pc, #116]	@ (800dd70 <FLASH_FlushCaches+0x88>)
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	4a1c      	ldr	r2, [pc, #112]	@ (800dd70 <FLASH_FlushCaches+0x88>)
 800dcfe:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800dd02:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800dd04:	4b1a      	ldr	r3, [pc, #104]	@ (800dd70 <FLASH_FlushCaches+0x88>)
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	4a19      	ldr	r2, [pc, #100]	@ (800dd70 <FLASH_FlushCaches+0x88>)
 800dd0a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800dd0e:	6013      	str	r3, [r2, #0]
 800dd10:	4b17      	ldr	r3, [pc, #92]	@ (800dd70 <FLASH_FlushCaches+0x88>)
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	4a16      	ldr	r2, [pc, #88]	@ (800dd70 <FLASH_FlushCaches+0x88>)
 800dd16:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800dd1a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800dd1c:	4b14      	ldr	r3, [pc, #80]	@ (800dd70 <FLASH_FlushCaches+0x88>)
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	4a13      	ldr	r2, [pc, #76]	@ (800dd70 <FLASH_FlushCaches+0x88>)
 800dd22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800dd26:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800dd28:	4b11      	ldr	r3, [pc, #68]	@ (800dd70 <FLASH_FlushCaches+0x88>)
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d017      	beq.n	800dd64 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800dd34:	4b0e      	ldr	r3, [pc, #56]	@ (800dd70 <FLASH_FlushCaches+0x88>)
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	4a0d      	ldr	r2, [pc, #52]	@ (800dd70 <FLASH_FlushCaches+0x88>)
 800dd3a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800dd3e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800dd40:	4b0b      	ldr	r3, [pc, #44]	@ (800dd70 <FLASH_FlushCaches+0x88>)
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	4a0a      	ldr	r2, [pc, #40]	@ (800dd70 <FLASH_FlushCaches+0x88>)
 800dd46:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800dd4a:	6013      	str	r3, [r2, #0]
 800dd4c:	4b08      	ldr	r3, [pc, #32]	@ (800dd70 <FLASH_FlushCaches+0x88>)
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	4a07      	ldr	r2, [pc, #28]	@ (800dd70 <FLASH_FlushCaches+0x88>)
 800dd52:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dd56:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800dd58:	4b05      	ldr	r3, [pc, #20]	@ (800dd70 <FLASH_FlushCaches+0x88>)
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	4a04      	ldr	r2, [pc, #16]	@ (800dd70 <FLASH_FlushCaches+0x88>)
 800dd5e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800dd62:	6013      	str	r3, [r2, #0]
  }
}
 800dd64:	bf00      	nop
 800dd66:	46bd      	mov	sp, r7
 800dd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd6c:	4770      	bx	lr
 800dd6e:	bf00      	nop
 800dd70:	40023c00 	.word	0x40023c00

0800dd74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800dd74:	b480      	push	{r7}
 800dd76:	b089      	sub	sp, #36	@ 0x24
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
 800dd7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800dd7e:	2300      	movs	r3, #0
 800dd80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800dd82:	2300      	movs	r3, #0
 800dd84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800dd86:	2300      	movs	r3, #0
 800dd88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	61fb      	str	r3, [r7, #28]
 800dd8e:	e165      	b.n	800e05c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800dd90:	2201      	movs	r2, #1
 800dd92:	69fb      	ldr	r3, [r7, #28]
 800dd94:	fa02 f303 	lsl.w	r3, r2, r3
 800dd98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800dd9a:	683b      	ldr	r3, [r7, #0]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	697a      	ldr	r2, [r7, #20]
 800dda0:	4013      	ands	r3, r2
 800dda2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800dda4:	693a      	ldr	r2, [r7, #16]
 800dda6:	697b      	ldr	r3, [r7, #20]
 800dda8:	429a      	cmp	r2, r3
 800ddaa:	f040 8154 	bne.w	800e056 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800ddae:	683b      	ldr	r3, [r7, #0]
 800ddb0:	685b      	ldr	r3, [r3, #4]
 800ddb2:	f003 0303 	and.w	r3, r3, #3
 800ddb6:	2b01      	cmp	r3, #1
 800ddb8:	d005      	beq.n	800ddc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ddba:	683b      	ldr	r3, [r7, #0]
 800ddbc:	685b      	ldr	r3, [r3, #4]
 800ddbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800ddc2:	2b02      	cmp	r3, #2
 800ddc4:	d130      	bne.n	800de28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	689b      	ldr	r3, [r3, #8]
 800ddca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800ddcc:	69fb      	ldr	r3, [r7, #28]
 800ddce:	005b      	lsls	r3, r3, #1
 800ddd0:	2203      	movs	r2, #3
 800ddd2:	fa02 f303 	lsl.w	r3, r2, r3
 800ddd6:	43db      	mvns	r3, r3
 800ddd8:	69ba      	ldr	r2, [r7, #24]
 800ddda:	4013      	ands	r3, r2
 800dddc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ddde:	683b      	ldr	r3, [r7, #0]
 800dde0:	68da      	ldr	r2, [r3, #12]
 800dde2:	69fb      	ldr	r3, [r7, #28]
 800dde4:	005b      	lsls	r3, r3, #1
 800dde6:	fa02 f303 	lsl.w	r3, r2, r3
 800ddea:	69ba      	ldr	r2, [r7, #24]
 800ddec:	4313      	orrs	r3, r2
 800ddee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	69ba      	ldr	r2, [r7, #24]
 800ddf4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	685b      	ldr	r3, [r3, #4]
 800ddfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800ddfc:	2201      	movs	r2, #1
 800ddfe:	69fb      	ldr	r3, [r7, #28]
 800de00:	fa02 f303 	lsl.w	r3, r2, r3
 800de04:	43db      	mvns	r3, r3
 800de06:	69ba      	ldr	r2, [r7, #24]
 800de08:	4013      	ands	r3, r2
 800de0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800de0c:	683b      	ldr	r3, [r7, #0]
 800de0e:	685b      	ldr	r3, [r3, #4]
 800de10:	091b      	lsrs	r3, r3, #4
 800de12:	f003 0201 	and.w	r2, r3, #1
 800de16:	69fb      	ldr	r3, [r7, #28]
 800de18:	fa02 f303 	lsl.w	r3, r2, r3
 800de1c:	69ba      	ldr	r2, [r7, #24]
 800de1e:	4313      	orrs	r3, r2
 800de20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	69ba      	ldr	r2, [r7, #24]
 800de26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800de28:	683b      	ldr	r3, [r7, #0]
 800de2a:	685b      	ldr	r3, [r3, #4]
 800de2c:	f003 0303 	and.w	r3, r3, #3
 800de30:	2b03      	cmp	r3, #3
 800de32:	d017      	beq.n	800de64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	68db      	ldr	r3, [r3, #12]
 800de38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800de3a:	69fb      	ldr	r3, [r7, #28]
 800de3c:	005b      	lsls	r3, r3, #1
 800de3e:	2203      	movs	r2, #3
 800de40:	fa02 f303 	lsl.w	r3, r2, r3
 800de44:	43db      	mvns	r3, r3
 800de46:	69ba      	ldr	r2, [r7, #24]
 800de48:	4013      	ands	r3, r2
 800de4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800de4c:	683b      	ldr	r3, [r7, #0]
 800de4e:	689a      	ldr	r2, [r3, #8]
 800de50:	69fb      	ldr	r3, [r7, #28]
 800de52:	005b      	lsls	r3, r3, #1
 800de54:	fa02 f303 	lsl.w	r3, r2, r3
 800de58:	69ba      	ldr	r2, [r7, #24]
 800de5a:	4313      	orrs	r3, r2
 800de5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	69ba      	ldr	r2, [r7, #24]
 800de62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800de64:	683b      	ldr	r3, [r7, #0]
 800de66:	685b      	ldr	r3, [r3, #4]
 800de68:	f003 0303 	and.w	r3, r3, #3
 800de6c:	2b02      	cmp	r3, #2
 800de6e:	d123      	bne.n	800deb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800de70:	69fb      	ldr	r3, [r7, #28]
 800de72:	08da      	lsrs	r2, r3, #3
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	3208      	adds	r2, #8
 800de78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800de7e:	69fb      	ldr	r3, [r7, #28]
 800de80:	f003 0307 	and.w	r3, r3, #7
 800de84:	009b      	lsls	r3, r3, #2
 800de86:	220f      	movs	r2, #15
 800de88:	fa02 f303 	lsl.w	r3, r2, r3
 800de8c:	43db      	mvns	r3, r3
 800de8e:	69ba      	ldr	r2, [r7, #24]
 800de90:	4013      	ands	r3, r2
 800de92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800de94:	683b      	ldr	r3, [r7, #0]
 800de96:	691a      	ldr	r2, [r3, #16]
 800de98:	69fb      	ldr	r3, [r7, #28]
 800de9a:	f003 0307 	and.w	r3, r3, #7
 800de9e:	009b      	lsls	r3, r3, #2
 800dea0:	fa02 f303 	lsl.w	r3, r2, r3
 800dea4:	69ba      	ldr	r2, [r7, #24]
 800dea6:	4313      	orrs	r3, r2
 800dea8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800deaa:	69fb      	ldr	r3, [r7, #28]
 800deac:	08da      	lsrs	r2, r3, #3
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	3208      	adds	r2, #8
 800deb2:	69b9      	ldr	r1, [r7, #24]
 800deb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800debe:	69fb      	ldr	r3, [r7, #28]
 800dec0:	005b      	lsls	r3, r3, #1
 800dec2:	2203      	movs	r2, #3
 800dec4:	fa02 f303 	lsl.w	r3, r2, r3
 800dec8:	43db      	mvns	r3, r3
 800deca:	69ba      	ldr	r2, [r7, #24]
 800decc:	4013      	ands	r3, r2
 800dece:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ded0:	683b      	ldr	r3, [r7, #0]
 800ded2:	685b      	ldr	r3, [r3, #4]
 800ded4:	f003 0203 	and.w	r2, r3, #3
 800ded8:	69fb      	ldr	r3, [r7, #28]
 800deda:	005b      	lsls	r3, r3, #1
 800dedc:	fa02 f303 	lsl.w	r3, r2, r3
 800dee0:	69ba      	ldr	r2, [r7, #24]
 800dee2:	4313      	orrs	r3, r2
 800dee4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	69ba      	ldr	r2, [r7, #24]
 800deea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800deec:	683b      	ldr	r3, [r7, #0]
 800deee:	685b      	ldr	r3, [r3, #4]
 800def0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800def4:	2b00      	cmp	r3, #0
 800def6:	f000 80ae 	beq.w	800e056 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800defa:	2300      	movs	r3, #0
 800defc:	60fb      	str	r3, [r7, #12]
 800defe:	4b5d      	ldr	r3, [pc, #372]	@ (800e074 <HAL_GPIO_Init+0x300>)
 800df00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800df02:	4a5c      	ldr	r2, [pc, #368]	@ (800e074 <HAL_GPIO_Init+0x300>)
 800df04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800df08:	6453      	str	r3, [r2, #68]	@ 0x44
 800df0a:	4b5a      	ldr	r3, [pc, #360]	@ (800e074 <HAL_GPIO_Init+0x300>)
 800df0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800df0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800df12:	60fb      	str	r3, [r7, #12]
 800df14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800df16:	4a58      	ldr	r2, [pc, #352]	@ (800e078 <HAL_GPIO_Init+0x304>)
 800df18:	69fb      	ldr	r3, [r7, #28]
 800df1a:	089b      	lsrs	r3, r3, #2
 800df1c:	3302      	adds	r3, #2
 800df1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800df24:	69fb      	ldr	r3, [r7, #28]
 800df26:	f003 0303 	and.w	r3, r3, #3
 800df2a:	009b      	lsls	r3, r3, #2
 800df2c:	220f      	movs	r2, #15
 800df2e:	fa02 f303 	lsl.w	r3, r2, r3
 800df32:	43db      	mvns	r3, r3
 800df34:	69ba      	ldr	r2, [r7, #24]
 800df36:	4013      	ands	r3, r2
 800df38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	4a4f      	ldr	r2, [pc, #316]	@ (800e07c <HAL_GPIO_Init+0x308>)
 800df3e:	4293      	cmp	r3, r2
 800df40:	d025      	beq.n	800df8e <HAL_GPIO_Init+0x21a>
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	4a4e      	ldr	r2, [pc, #312]	@ (800e080 <HAL_GPIO_Init+0x30c>)
 800df46:	4293      	cmp	r3, r2
 800df48:	d01f      	beq.n	800df8a <HAL_GPIO_Init+0x216>
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	4a4d      	ldr	r2, [pc, #308]	@ (800e084 <HAL_GPIO_Init+0x310>)
 800df4e:	4293      	cmp	r3, r2
 800df50:	d019      	beq.n	800df86 <HAL_GPIO_Init+0x212>
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	4a4c      	ldr	r2, [pc, #304]	@ (800e088 <HAL_GPIO_Init+0x314>)
 800df56:	4293      	cmp	r3, r2
 800df58:	d013      	beq.n	800df82 <HAL_GPIO_Init+0x20e>
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	4a4b      	ldr	r2, [pc, #300]	@ (800e08c <HAL_GPIO_Init+0x318>)
 800df5e:	4293      	cmp	r3, r2
 800df60:	d00d      	beq.n	800df7e <HAL_GPIO_Init+0x20a>
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	4a4a      	ldr	r2, [pc, #296]	@ (800e090 <HAL_GPIO_Init+0x31c>)
 800df66:	4293      	cmp	r3, r2
 800df68:	d007      	beq.n	800df7a <HAL_GPIO_Init+0x206>
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	4a49      	ldr	r2, [pc, #292]	@ (800e094 <HAL_GPIO_Init+0x320>)
 800df6e:	4293      	cmp	r3, r2
 800df70:	d101      	bne.n	800df76 <HAL_GPIO_Init+0x202>
 800df72:	2306      	movs	r3, #6
 800df74:	e00c      	b.n	800df90 <HAL_GPIO_Init+0x21c>
 800df76:	2307      	movs	r3, #7
 800df78:	e00a      	b.n	800df90 <HAL_GPIO_Init+0x21c>
 800df7a:	2305      	movs	r3, #5
 800df7c:	e008      	b.n	800df90 <HAL_GPIO_Init+0x21c>
 800df7e:	2304      	movs	r3, #4
 800df80:	e006      	b.n	800df90 <HAL_GPIO_Init+0x21c>
 800df82:	2303      	movs	r3, #3
 800df84:	e004      	b.n	800df90 <HAL_GPIO_Init+0x21c>
 800df86:	2302      	movs	r3, #2
 800df88:	e002      	b.n	800df90 <HAL_GPIO_Init+0x21c>
 800df8a:	2301      	movs	r3, #1
 800df8c:	e000      	b.n	800df90 <HAL_GPIO_Init+0x21c>
 800df8e:	2300      	movs	r3, #0
 800df90:	69fa      	ldr	r2, [r7, #28]
 800df92:	f002 0203 	and.w	r2, r2, #3
 800df96:	0092      	lsls	r2, r2, #2
 800df98:	4093      	lsls	r3, r2
 800df9a:	69ba      	ldr	r2, [r7, #24]
 800df9c:	4313      	orrs	r3, r2
 800df9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800dfa0:	4935      	ldr	r1, [pc, #212]	@ (800e078 <HAL_GPIO_Init+0x304>)
 800dfa2:	69fb      	ldr	r3, [r7, #28]
 800dfa4:	089b      	lsrs	r3, r3, #2
 800dfa6:	3302      	adds	r3, #2
 800dfa8:	69ba      	ldr	r2, [r7, #24]
 800dfaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800dfae:	4b3a      	ldr	r3, [pc, #232]	@ (800e098 <HAL_GPIO_Init+0x324>)
 800dfb0:	689b      	ldr	r3, [r3, #8]
 800dfb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800dfb4:	693b      	ldr	r3, [r7, #16]
 800dfb6:	43db      	mvns	r3, r3
 800dfb8:	69ba      	ldr	r2, [r7, #24]
 800dfba:	4013      	ands	r3, r2
 800dfbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800dfbe:	683b      	ldr	r3, [r7, #0]
 800dfc0:	685b      	ldr	r3, [r3, #4]
 800dfc2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d003      	beq.n	800dfd2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800dfca:	69ba      	ldr	r2, [r7, #24]
 800dfcc:	693b      	ldr	r3, [r7, #16]
 800dfce:	4313      	orrs	r3, r2
 800dfd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800dfd2:	4a31      	ldr	r2, [pc, #196]	@ (800e098 <HAL_GPIO_Init+0x324>)
 800dfd4:	69bb      	ldr	r3, [r7, #24]
 800dfd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800dfd8:	4b2f      	ldr	r3, [pc, #188]	@ (800e098 <HAL_GPIO_Init+0x324>)
 800dfda:	68db      	ldr	r3, [r3, #12]
 800dfdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800dfde:	693b      	ldr	r3, [r7, #16]
 800dfe0:	43db      	mvns	r3, r3
 800dfe2:	69ba      	ldr	r2, [r7, #24]
 800dfe4:	4013      	ands	r3, r2
 800dfe6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800dfe8:	683b      	ldr	r3, [r7, #0]
 800dfea:	685b      	ldr	r3, [r3, #4]
 800dfec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d003      	beq.n	800dffc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800dff4:	69ba      	ldr	r2, [r7, #24]
 800dff6:	693b      	ldr	r3, [r7, #16]
 800dff8:	4313      	orrs	r3, r2
 800dffa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800dffc:	4a26      	ldr	r2, [pc, #152]	@ (800e098 <HAL_GPIO_Init+0x324>)
 800dffe:	69bb      	ldr	r3, [r7, #24]
 800e000:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800e002:	4b25      	ldr	r3, [pc, #148]	@ (800e098 <HAL_GPIO_Init+0x324>)
 800e004:	685b      	ldr	r3, [r3, #4]
 800e006:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e008:	693b      	ldr	r3, [r7, #16]
 800e00a:	43db      	mvns	r3, r3
 800e00c:	69ba      	ldr	r2, [r7, #24]
 800e00e:	4013      	ands	r3, r2
 800e010:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800e012:	683b      	ldr	r3, [r7, #0]
 800e014:	685b      	ldr	r3, [r3, #4]
 800e016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d003      	beq.n	800e026 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800e01e:	69ba      	ldr	r2, [r7, #24]
 800e020:	693b      	ldr	r3, [r7, #16]
 800e022:	4313      	orrs	r3, r2
 800e024:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800e026:	4a1c      	ldr	r2, [pc, #112]	@ (800e098 <HAL_GPIO_Init+0x324>)
 800e028:	69bb      	ldr	r3, [r7, #24]
 800e02a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800e02c:	4b1a      	ldr	r3, [pc, #104]	@ (800e098 <HAL_GPIO_Init+0x324>)
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e032:	693b      	ldr	r3, [r7, #16]
 800e034:	43db      	mvns	r3, r3
 800e036:	69ba      	ldr	r2, [r7, #24]
 800e038:	4013      	ands	r3, r2
 800e03a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800e03c:	683b      	ldr	r3, [r7, #0]
 800e03e:	685b      	ldr	r3, [r3, #4]
 800e040:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e044:	2b00      	cmp	r3, #0
 800e046:	d003      	beq.n	800e050 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800e048:	69ba      	ldr	r2, [r7, #24]
 800e04a:	693b      	ldr	r3, [r7, #16]
 800e04c:	4313      	orrs	r3, r2
 800e04e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800e050:	4a11      	ldr	r2, [pc, #68]	@ (800e098 <HAL_GPIO_Init+0x324>)
 800e052:	69bb      	ldr	r3, [r7, #24]
 800e054:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800e056:	69fb      	ldr	r3, [r7, #28]
 800e058:	3301      	adds	r3, #1
 800e05a:	61fb      	str	r3, [r7, #28]
 800e05c:	69fb      	ldr	r3, [r7, #28]
 800e05e:	2b0f      	cmp	r3, #15
 800e060:	f67f ae96 	bls.w	800dd90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800e064:	bf00      	nop
 800e066:	bf00      	nop
 800e068:	3724      	adds	r7, #36	@ 0x24
 800e06a:	46bd      	mov	sp, r7
 800e06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e070:	4770      	bx	lr
 800e072:	bf00      	nop
 800e074:	40023800 	.word	0x40023800
 800e078:	40013800 	.word	0x40013800
 800e07c:	40020000 	.word	0x40020000
 800e080:	40020400 	.word	0x40020400
 800e084:	40020800 	.word	0x40020800
 800e088:	40020c00 	.word	0x40020c00
 800e08c:	40021000 	.word	0x40021000
 800e090:	40021400 	.word	0x40021400
 800e094:	40021800 	.word	0x40021800
 800e098:	40013c00 	.word	0x40013c00

0800e09c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800e09c:	b480      	push	{r7}
 800e09e:	b085      	sub	sp, #20
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	6078      	str	r0, [r7, #4]
 800e0a4:	460b      	mov	r3, r1
 800e0a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	691a      	ldr	r2, [r3, #16]
 800e0ac:	887b      	ldrh	r3, [r7, #2]
 800e0ae:	4013      	ands	r3, r2
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d002      	beq.n	800e0ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800e0b4:	2301      	movs	r3, #1
 800e0b6:	73fb      	strb	r3, [r7, #15]
 800e0b8:	e001      	b.n	800e0be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800e0be:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	3714      	adds	r7, #20
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ca:	4770      	bx	lr

0800e0cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800e0cc:	b480      	push	{r7}
 800e0ce:	b083      	sub	sp, #12
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	6078      	str	r0, [r7, #4]
 800e0d4:	460b      	mov	r3, r1
 800e0d6:	807b      	strh	r3, [r7, #2]
 800e0d8:	4613      	mov	r3, r2
 800e0da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800e0dc:	787b      	ldrb	r3, [r7, #1]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d003      	beq.n	800e0ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800e0e2:	887a      	ldrh	r2, [r7, #2]
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800e0e8:	e003      	b.n	800e0f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800e0ea:	887b      	ldrh	r3, [r7, #2]
 800e0ec:	041a      	lsls	r2, r3, #16
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	619a      	str	r2, [r3, #24]
}
 800e0f2:	bf00      	nop
 800e0f4:	370c      	adds	r7, #12
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fc:	4770      	bx	lr

0800e0fe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800e0fe:	b480      	push	{r7}
 800e100:	b085      	sub	sp, #20
 800e102:	af00      	add	r7, sp, #0
 800e104:	6078      	str	r0, [r7, #4]
 800e106:	460b      	mov	r3, r1
 800e108:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	695b      	ldr	r3, [r3, #20]
 800e10e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800e110:	887a      	ldrh	r2, [r7, #2]
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	4013      	ands	r3, r2
 800e116:	041a      	lsls	r2, r3, #16
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	43d9      	mvns	r1, r3
 800e11c:	887b      	ldrh	r3, [r7, #2]
 800e11e:	400b      	ands	r3, r1
 800e120:	431a      	orrs	r2, r3
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	619a      	str	r2, [r3, #24]
}
 800e126:	bf00      	nop
 800e128:	3714      	adds	r7, #20
 800e12a:	46bd      	mov	sp, r7
 800e12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e130:	4770      	bx	lr

0800e132 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800e132:	b580      	push	{r7, lr}
 800e134:	b084      	sub	sp, #16
 800e136:	af00      	add	r7, sp, #0
 800e138:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d101      	bne.n	800e144 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800e140:	2301      	movs	r3, #1
 800e142:	e034      	b.n	800e1ae <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 800e14c:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	f245 5255 	movw	r2, #21845	@ 0x5555
 800e156:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	687a      	ldr	r2, [r7, #4]
 800e15e:	6852      	ldr	r2, [r2, #4]
 800e160:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	687a      	ldr	r2, [r7, #4]
 800e168:	6892      	ldr	r2, [r2, #8]
 800e16a:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800e16c:	f7ff f946 	bl	800d3fc <HAL_GetTick>
 800e170:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800e172:	e00f      	b.n	800e194 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800e174:	f7ff f942 	bl	800d3fc <HAL_GetTick>
 800e178:	4602      	mov	r2, r0
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	1ad3      	subs	r3, r2, r3
 800e17e:	2b31      	cmp	r3, #49	@ 0x31
 800e180:	d908      	bls.n	800e194 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	68db      	ldr	r3, [r3, #12]
 800e188:	f003 0303 	and.w	r3, r3, #3
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d001      	beq.n	800e194 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800e190:	2303      	movs	r3, #3
 800e192:	e00c      	b.n	800e1ae <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	68db      	ldr	r3, [r3, #12]
 800e19a:	f003 0303 	and.w	r3, r3, #3
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d1e8      	bne.n	800e174 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800e1aa:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800e1ac:	2300      	movs	r3, #0
}
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	3710      	adds	r7, #16
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	bd80      	pop	{r7, pc}

0800e1b6 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800e1b6:	b480      	push	{r7}
 800e1b8:	b083      	sub	sp, #12
 800e1ba:	af00      	add	r7, sp, #0
 800e1bc:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800e1c6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800e1c8:	2300      	movs	r3, #0
}
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	370c      	adds	r7, #12
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d4:	4770      	bx	lr
	...

0800e1d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b084      	sub	sp, #16
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	6078      	str	r0, [r7, #4]
 800e1e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d101      	bne.n	800e1ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e1e8:	2301      	movs	r3, #1
 800e1ea:	e0cc      	b.n	800e386 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800e1ec:	4b68      	ldr	r3, [pc, #416]	@ (800e390 <HAL_RCC_ClockConfig+0x1b8>)
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	f003 030f 	and.w	r3, r3, #15
 800e1f4:	683a      	ldr	r2, [r7, #0]
 800e1f6:	429a      	cmp	r2, r3
 800e1f8:	d90c      	bls.n	800e214 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e1fa:	4b65      	ldr	r3, [pc, #404]	@ (800e390 <HAL_RCC_ClockConfig+0x1b8>)
 800e1fc:	683a      	ldr	r2, [r7, #0]
 800e1fe:	b2d2      	uxtb	r2, r2
 800e200:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e202:	4b63      	ldr	r3, [pc, #396]	@ (800e390 <HAL_RCC_ClockConfig+0x1b8>)
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	f003 030f 	and.w	r3, r3, #15
 800e20a:	683a      	ldr	r2, [r7, #0]
 800e20c:	429a      	cmp	r2, r3
 800e20e:	d001      	beq.n	800e214 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800e210:	2301      	movs	r3, #1
 800e212:	e0b8      	b.n	800e386 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	f003 0302 	and.w	r3, r3, #2
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d020      	beq.n	800e262 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	f003 0304 	and.w	r3, r3, #4
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d005      	beq.n	800e238 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800e22c:	4b59      	ldr	r3, [pc, #356]	@ (800e394 <HAL_RCC_ClockConfig+0x1bc>)
 800e22e:	689b      	ldr	r3, [r3, #8]
 800e230:	4a58      	ldr	r2, [pc, #352]	@ (800e394 <HAL_RCC_ClockConfig+0x1bc>)
 800e232:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800e236:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	f003 0308 	and.w	r3, r3, #8
 800e240:	2b00      	cmp	r3, #0
 800e242:	d005      	beq.n	800e250 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800e244:	4b53      	ldr	r3, [pc, #332]	@ (800e394 <HAL_RCC_ClockConfig+0x1bc>)
 800e246:	689b      	ldr	r3, [r3, #8]
 800e248:	4a52      	ldr	r2, [pc, #328]	@ (800e394 <HAL_RCC_ClockConfig+0x1bc>)
 800e24a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800e24e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e250:	4b50      	ldr	r3, [pc, #320]	@ (800e394 <HAL_RCC_ClockConfig+0x1bc>)
 800e252:	689b      	ldr	r3, [r3, #8]
 800e254:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	689b      	ldr	r3, [r3, #8]
 800e25c:	494d      	ldr	r1, [pc, #308]	@ (800e394 <HAL_RCC_ClockConfig+0x1bc>)
 800e25e:	4313      	orrs	r3, r2
 800e260:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	f003 0301 	and.w	r3, r3, #1
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d044      	beq.n	800e2f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	685b      	ldr	r3, [r3, #4]
 800e272:	2b01      	cmp	r3, #1
 800e274:	d107      	bne.n	800e286 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e276:	4b47      	ldr	r3, [pc, #284]	@ (800e394 <HAL_RCC_ClockConfig+0x1bc>)
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d119      	bne.n	800e2b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e282:	2301      	movs	r3, #1
 800e284:	e07f      	b.n	800e386 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	685b      	ldr	r3, [r3, #4]
 800e28a:	2b02      	cmp	r3, #2
 800e28c:	d003      	beq.n	800e296 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e292:	2b03      	cmp	r3, #3
 800e294:	d107      	bne.n	800e2a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e296:	4b3f      	ldr	r3, [pc, #252]	@ (800e394 <HAL_RCC_ClockConfig+0x1bc>)
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d109      	bne.n	800e2b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e2a2:	2301      	movs	r3, #1
 800e2a4:	e06f      	b.n	800e386 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e2a6:	4b3b      	ldr	r3, [pc, #236]	@ (800e394 <HAL_RCC_ClockConfig+0x1bc>)
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	f003 0302 	and.w	r3, r3, #2
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d101      	bne.n	800e2b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e2b2:	2301      	movs	r3, #1
 800e2b4:	e067      	b.n	800e386 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800e2b6:	4b37      	ldr	r3, [pc, #220]	@ (800e394 <HAL_RCC_ClockConfig+0x1bc>)
 800e2b8:	689b      	ldr	r3, [r3, #8]
 800e2ba:	f023 0203 	bic.w	r2, r3, #3
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	685b      	ldr	r3, [r3, #4]
 800e2c2:	4934      	ldr	r1, [pc, #208]	@ (800e394 <HAL_RCC_ClockConfig+0x1bc>)
 800e2c4:	4313      	orrs	r3, r2
 800e2c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800e2c8:	f7ff f898 	bl	800d3fc <HAL_GetTick>
 800e2cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e2ce:	e00a      	b.n	800e2e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e2d0:	f7ff f894 	bl	800d3fc <HAL_GetTick>
 800e2d4:	4602      	mov	r2, r0
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	1ad3      	subs	r3, r2, r3
 800e2da:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e2de:	4293      	cmp	r3, r2
 800e2e0:	d901      	bls.n	800e2e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800e2e2:	2303      	movs	r3, #3
 800e2e4:	e04f      	b.n	800e386 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e2e6:	4b2b      	ldr	r3, [pc, #172]	@ (800e394 <HAL_RCC_ClockConfig+0x1bc>)
 800e2e8:	689b      	ldr	r3, [r3, #8]
 800e2ea:	f003 020c 	and.w	r2, r3, #12
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	685b      	ldr	r3, [r3, #4]
 800e2f2:	009b      	lsls	r3, r3, #2
 800e2f4:	429a      	cmp	r2, r3
 800e2f6:	d1eb      	bne.n	800e2d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800e2f8:	4b25      	ldr	r3, [pc, #148]	@ (800e390 <HAL_RCC_ClockConfig+0x1b8>)
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	f003 030f 	and.w	r3, r3, #15
 800e300:	683a      	ldr	r2, [r7, #0]
 800e302:	429a      	cmp	r2, r3
 800e304:	d20c      	bcs.n	800e320 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e306:	4b22      	ldr	r3, [pc, #136]	@ (800e390 <HAL_RCC_ClockConfig+0x1b8>)
 800e308:	683a      	ldr	r2, [r7, #0]
 800e30a:	b2d2      	uxtb	r2, r2
 800e30c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e30e:	4b20      	ldr	r3, [pc, #128]	@ (800e390 <HAL_RCC_ClockConfig+0x1b8>)
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	f003 030f 	and.w	r3, r3, #15
 800e316:	683a      	ldr	r2, [r7, #0]
 800e318:	429a      	cmp	r2, r3
 800e31a:	d001      	beq.n	800e320 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800e31c:	2301      	movs	r3, #1
 800e31e:	e032      	b.n	800e386 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	f003 0304 	and.w	r3, r3, #4
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d008      	beq.n	800e33e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800e32c:	4b19      	ldr	r3, [pc, #100]	@ (800e394 <HAL_RCC_ClockConfig+0x1bc>)
 800e32e:	689b      	ldr	r3, [r3, #8]
 800e330:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	68db      	ldr	r3, [r3, #12]
 800e338:	4916      	ldr	r1, [pc, #88]	@ (800e394 <HAL_RCC_ClockConfig+0x1bc>)
 800e33a:	4313      	orrs	r3, r2
 800e33c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	f003 0308 	and.w	r3, r3, #8
 800e346:	2b00      	cmp	r3, #0
 800e348:	d009      	beq.n	800e35e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800e34a:	4b12      	ldr	r3, [pc, #72]	@ (800e394 <HAL_RCC_ClockConfig+0x1bc>)
 800e34c:	689b      	ldr	r3, [r3, #8]
 800e34e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	691b      	ldr	r3, [r3, #16]
 800e356:	00db      	lsls	r3, r3, #3
 800e358:	490e      	ldr	r1, [pc, #56]	@ (800e394 <HAL_RCC_ClockConfig+0x1bc>)
 800e35a:	4313      	orrs	r3, r2
 800e35c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800e35e:	f000 f855 	bl	800e40c <HAL_RCC_GetSysClockFreq>
 800e362:	4602      	mov	r2, r0
 800e364:	4b0b      	ldr	r3, [pc, #44]	@ (800e394 <HAL_RCC_ClockConfig+0x1bc>)
 800e366:	689b      	ldr	r3, [r3, #8]
 800e368:	091b      	lsrs	r3, r3, #4
 800e36a:	f003 030f 	and.w	r3, r3, #15
 800e36e:	490a      	ldr	r1, [pc, #40]	@ (800e398 <HAL_RCC_ClockConfig+0x1c0>)
 800e370:	5ccb      	ldrb	r3, [r1, r3]
 800e372:	fa22 f303 	lsr.w	r3, r2, r3
 800e376:	4a09      	ldr	r2, [pc, #36]	@ (800e39c <HAL_RCC_ClockConfig+0x1c4>)
 800e378:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800e37a:	4b09      	ldr	r3, [pc, #36]	@ (800e3a0 <HAL_RCC_ClockConfig+0x1c8>)
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	4618      	mov	r0, r3
 800e380:	f7fe fff8 	bl	800d374 <HAL_InitTick>

  return HAL_OK;
 800e384:	2300      	movs	r3, #0
}
 800e386:	4618      	mov	r0, r3
 800e388:	3710      	adds	r7, #16
 800e38a:	46bd      	mov	sp, r7
 800e38c:	bd80      	pop	{r7, pc}
 800e38e:	bf00      	nop
 800e390:	40023c00 	.word	0x40023c00
 800e394:	40023800 	.word	0x40023800
 800e398:	08013880 	.word	0x08013880
 800e39c:	20000028 	.word	0x20000028
 800e3a0:	2000022c 	.word	0x2000022c

0800e3a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e3a4:	b480      	push	{r7}
 800e3a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e3a8:	4b03      	ldr	r3, [pc, #12]	@ (800e3b8 <HAL_RCC_GetHCLKFreq+0x14>)
 800e3aa:	681b      	ldr	r3, [r3, #0]
}
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b4:	4770      	bx	lr
 800e3b6:	bf00      	nop
 800e3b8:	20000028 	.word	0x20000028

0800e3bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800e3c0:	f7ff fff0 	bl	800e3a4 <HAL_RCC_GetHCLKFreq>
 800e3c4:	4602      	mov	r2, r0
 800e3c6:	4b05      	ldr	r3, [pc, #20]	@ (800e3dc <HAL_RCC_GetPCLK1Freq+0x20>)
 800e3c8:	689b      	ldr	r3, [r3, #8]
 800e3ca:	0a9b      	lsrs	r3, r3, #10
 800e3cc:	f003 0307 	and.w	r3, r3, #7
 800e3d0:	4903      	ldr	r1, [pc, #12]	@ (800e3e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e3d2:	5ccb      	ldrb	r3, [r1, r3]
 800e3d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e3d8:	4618      	mov	r0, r3
 800e3da:	bd80      	pop	{r7, pc}
 800e3dc:	40023800 	.word	0x40023800
 800e3e0:	08013890 	.word	0x08013890

0800e3e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800e3e8:	f7ff ffdc 	bl	800e3a4 <HAL_RCC_GetHCLKFreq>
 800e3ec:	4602      	mov	r2, r0
 800e3ee:	4b05      	ldr	r3, [pc, #20]	@ (800e404 <HAL_RCC_GetPCLK2Freq+0x20>)
 800e3f0:	689b      	ldr	r3, [r3, #8]
 800e3f2:	0b5b      	lsrs	r3, r3, #13
 800e3f4:	f003 0307 	and.w	r3, r3, #7
 800e3f8:	4903      	ldr	r1, [pc, #12]	@ (800e408 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e3fa:	5ccb      	ldrb	r3, [r1, r3]
 800e3fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e400:	4618      	mov	r0, r3
 800e402:	bd80      	pop	{r7, pc}
 800e404:	40023800 	.word	0x40023800
 800e408:	08013890 	.word	0x08013890

0800e40c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e40c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e410:	b0ae      	sub	sp, #184	@ 0xb8
 800e412:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800e414:	2300      	movs	r3, #0
 800e416:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800e41a:	2300      	movs	r3, #0
 800e41c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800e420:	2300      	movs	r3, #0
 800e422:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800e426:	2300      	movs	r3, #0
 800e428:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800e42c:	2300      	movs	r3, #0
 800e42e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e432:	4bcb      	ldr	r3, [pc, #812]	@ (800e760 <HAL_RCC_GetSysClockFreq+0x354>)
 800e434:	689b      	ldr	r3, [r3, #8]
 800e436:	f003 030c 	and.w	r3, r3, #12
 800e43a:	2b0c      	cmp	r3, #12
 800e43c:	f200 8206 	bhi.w	800e84c <HAL_RCC_GetSysClockFreq+0x440>
 800e440:	a201      	add	r2, pc, #4	@ (adr r2, 800e448 <HAL_RCC_GetSysClockFreq+0x3c>)
 800e442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e446:	bf00      	nop
 800e448:	0800e47d 	.word	0x0800e47d
 800e44c:	0800e84d 	.word	0x0800e84d
 800e450:	0800e84d 	.word	0x0800e84d
 800e454:	0800e84d 	.word	0x0800e84d
 800e458:	0800e485 	.word	0x0800e485
 800e45c:	0800e84d 	.word	0x0800e84d
 800e460:	0800e84d 	.word	0x0800e84d
 800e464:	0800e84d 	.word	0x0800e84d
 800e468:	0800e48d 	.word	0x0800e48d
 800e46c:	0800e84d 	.word	0x0800e84d
 800e470:	0800e84d 	.word	0x0800e84d
 800e474:	0800e84d 	.word	0x0800e84d
 800e478:	0800e67d 	.word	0x0800e67d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800e47c:	4bb9      	ldr	r3, [pc, #740]	@ (800e764 <HAL_RCC_GetSysClockFreq+0x358>)
 800e47e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800e482:	e1e7      	b.n	800e854 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800e484:	4bb8      	ldr	r3, [pc, #736]	@ (800e768 <HAL_RCC_GetSysClockFreq+0x35c>)
 800e486:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800e48a:	e1e3      	b.n	800e854 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800e48c:	4bb4      	ldr	r3, [pc, #720]	@ (800e760 <HAL_RCC_GetSysClockFreq+0x354>)
 800e48e:	685b      	ldr	r3, [r3, #4]
 800e490:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e494:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800e498:	4bb1      	ldr	r3, [pc, #708]	@ (800e760 <HAL_RCC_GetSysClockFreq+0x354>)
 800e49a:	685b      	ldr	r3, [r3, #4]
 800e49c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d071      	beq.n	800e588 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e4a4:	4bae      	ldr	r3, [pc, #696]	@ (800e760 <HAL_RCC_GetSysClockFreq+0x354>)
 800e4a6:	685b      	ldr	r3, [r3, #4]
 800e4a8:	099b      	lsrs	r3, r3, #6
 800e4aa:	2200      	movs	r2, #0
 800e4ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e4b0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800e4b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e4b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e4bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e4c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800e4ca:	4622      	mov	r2, r4
 800e4cc:	462b      	mov	r3, r5
 800e4ce:	f04f 0000 	mov.w	r0, #0
 800e4d2:	f04f 0100 	mov.w	r1, #0
 800e4d6:	0159      	lsls	r1, r3, #5
 800e4d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e4dc:	0150      	lsls	r0, r2, #5
 800e4de:	4602      	mov	r2, r0
 800e4e0:	460b      	mov	r3, r1
 800e4e2:	4621      	mov	r1, r4
 800e4e4:	1a51      	subs	r1, r2, r1
 800e4e6:	6439      	str	r1, [r7, #64]	@ 0x40
 800e4e8:	4629      	mov	r1, r5
 800e4ea:	eb63 0301 	sbc.w	r3, r3, r1
 800e4ee:	647b      	str	r3, [r7, #68]	@ 0x44
 800e4f0:	f04f 0200 	mov.w	r2, #0
 800e4f4:	f04f 0300 	mov.w	r3, #0
 800e4f8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800e4fc:	4649      	mov	r1, r9
 800e4fe:	018b      	lsls	r3, r1, #6
 800e500:	4641      	mov	r1, r8
 800e502:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800e506:	4641      	mov	r1, r8
 800e508:	018a      	lsls	r2, r1, #6
 800e50a:	4641      	mov	r1, r8
 800e50c:	1a51      	subs	r1, r2, r1
 800e50e:	63b9      	str	r1, [r7, #56]	@ 0x38
 800e510:	4649      	mov	r1, r9
 800e512:	eb63 0301 	sbc.w	r3, r3, r1
 800e516:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e518:	f04f 0200 	mov.w	r2, #0
 800e51c:	f04f 0300 	mov.w	r3, #0
 800e520:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800e524:	4649      	mov	r1, r9
 800e526:	00cb      	lsls	r3, r1, #3
 800e528:	4641      	mov	r1, r8
 800e52a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e52e:	4641      	mov	r1, r8
 800e530:	00ca      	lsls	r2, r1, #3
 800e532:	4610      	mov	r0, r2
 800e534:	4619      	mov	r1, r3
 800e536:	4603      	mov	r3, r0
 800e538:	4622      	mov	r2, r4
 800e53a:	189b      	adds	r3, r3, r2
 800e53c:	633b      	str	r3, [r7, #48]	@ 0x30
 800e53e:	462b      	mov	r3, r5
 800e540:	460a      	mov	r2, r1
 800e542:	eb42 0303 	adc.w	r3, r2, r3
 800e546:	637b      	str	r3, [r7, #52]	@ 0x34
 800e548:	f04f 0200 	mov.w	r2, #0
 800e54c:	f04f 0300 	mov.w	r3, #0
 800e550:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800e554:	4629      	mov	r1, r5
 800e556:	024b      	lsls	r3, r1, #9
 800e558:	4621      	mov	r1, r4
 800e55a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800e55e:	4621      	mov	r1, r4
 800e560:	024a      	lsls	r2, r1, #9
 800e562:	4610      	mov	r0, r2
 800e564:	4619      	mov	r1, r3
 800e566:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e56a:	2200      	movs	r2, #0
 800e56c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e570:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800e574:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800e578:	f7fa fa6e 	bl	8008a58 <__aeabi_uldivmod>
 800e57c:	4602      	mov	r2, r0
 800e57e:	460b      	mov	r3, r1
 800e580:	4613      	mov	r3, r2
 800e582:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e586:	e067      	b.n	800e658 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e588:	4b75      	ldr	r3, [pc, #468]	@ (800e760 <HAL_RCC_GetSysClockFreq+0x354>)
 800e58a:	685b      	ldr	r3, [r3, #4]
 800e58c:	099b      	lsrs	r3, r3, #6
 800e58e:	2200      	movs	r2, #0
 800e590:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e594:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800e598:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e59c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e5a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e5a6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800e5aa:	4622      	mov	r2, r4
 800e5ac:	462b      	mov	r3, r5
 800e5ae:	f04f 0000 	mov.w	r0, #0
 800e5b2:	f04f 0100 	mov.w	r1, #0
 800e5b6:	0159      	lsls	r1, r3, #5
 800e5b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e5bc:	0150      	lsls	r0, r2, #5
 800e5be:	4602      	mov	r2, r0
 800e5c0:	460b      	mov	r3, r1
 800e5c2:	4621      	mov	r1, r4
 800e5c4:	1a51      	subs	r1, r2, r1
 800e5c6:	62b9      	str	r1, [r7, #40]	@ 0x28
 800e5c8:	4629      	mov	r1, r5
 800e5ca:	eb63 0301 	sbc.w	r3, r3, r1
 800e5ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e5d0:	f04f 0200 	mov.w	r2, #0
 800e5d4:	f04f 0300 	mov.w	r3, #0
 800e5d8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800e5dc:	4649      	mov	r1, r9
 800e5de:	018b      	lsls	r3, r1, #6
 800e5e0:	4641      	mov	r1, r8
 800e5e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800e5e6:	4641      	mov	r1, r8
 800e5e8:	018a      	lsls	r2, r1, #6
 800e5ea:	4641      	mov	r1, r8
 800e5ec:	ebb2 0a01 	subs.w	sl, r2, r1
 800e5f0:	4649      	mov	r1, r9
 800e5f2:	eb63 0b01 	sbc.w	fp, r3, r1
 800e5f6:	f04f 0200 	mov.w	r2, #0
 800e5fa:	f04f 0300 	mov.w	r3, #0
 800e5fe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800e602:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800e606:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e60a:	4692      	mov	sl, r2
 800e60c:	469b      	mov	fp, r3
 800e60e:	4623      	mov	r3, r4
 800e610:	eb1a 0303 	adds.w	r3, sl, r3
 800e614:	623b      	str	r3, [r7, #32]
 800e616:	462b      	mov	r3, r5
 800e618:	eb4b 0303 	adc.w	r3, fp, r3
 800e61c:	627b      	str	r3, [r7, #36]	@ 0x24
 800e61e:	f04f 0200 	mov.w	r2, #0
 800e622:	f04f 0300 	mov.w	r3, #0
 800e626:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800e62a:	4629      	mov	r1, r5
 800e62c:	028b      	lsls	r3, r1, #10
 800e62e:	4621      	mov	r1, r4
 800e630:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800e634:	4621      	mov	r1, r4
 800e636:	028a      	lsls	r2, r1, #10
 800e638:	4610      	mov	r0, r2
 800e63a:	4619      	mov	r1, r3
 800e63c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e640:	2200      	movs	r2, #0
 800e642:	673b      	str	r3, [r7, #112]	@ 0x70
 800e644:	677a      	str	r2, [r7, #116]	@ 0x74
 800e646:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800e64a:	f7fa fa05 	bl	8008a58 <__aeabi_uldivmod>
 800e64e:	4602      	mov	r2, r0
 800e650:	460b      	mov	r3, r1
 800e652:	4613      	mov	r3, r2
 800e654:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800e658:	4b41      	ldr	r3, [pc, #260]	@ (800e760 <HAL_RCC_GetSysClockFreq+0x354>)
 800e65a:	685b      	ldr	r3, [r3, #4]
 800e65c:	0c1b      	lsrs	r3, r3, #16
 800e65e:	f003 0303 	and.w	r3, r3, #3
 800e662:	3301      	adds	r3, #1
 800e664:	005b      	lsls	r3, r3, #1
 800e666:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800e66a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800e66e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e672:	fbb2 f3f3 	udiv	r3, r2, r3
 800e676:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800e67a:	e0eb      	b.n	800e854 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800e67c:	4b38      	ldr	r3, [pc, #224]	@ (800e760 <HAL_RCC_GetSysClockFreq+0x354>)
 800e67e:	685b      	ldr	r3, [r3, #4]
 800e680:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e684:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800e688:	4b35      	ldr	r3, [pc, #212]	@ (800e760 <HAL_RCC_GetSysClockFreq+0x354>)
 800e68a:	685b      	ldr	r3, [r3, #4]
 800e68c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e690:	2b00      	cmp	r3, #0
 800e692:	d06b      	beq.n	800e76c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e694:	4b32      	ldr	r3, [pc, #200]	@ (800e760 <HAL_RCC_GetSysClockFreq+0x354>)
 800e696:	685b      	ldr	r3, [r3, #4]
 800e698:	099b      	lsrs	r3, r3, #6
 800e69a:	2200      	movs	r2, #0
 800e69c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e69e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e6a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e6a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e6a6:	663b      	str	r3, [r7, #96]	@ 0x60
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	667b      	str	r3, [r7, #100]	@ 0x64
 800e6ac:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800e6b0:	4622      	mov	r2, r4
 800e6b2:	462b      	mov	r3, r5
 800e6b4:	f04f 0000 	mov.w	r0, #0
 800e6b8:	f04f 0100 	mov.w	r1, #0
 800e6bc:	0159      	lsls	r1, r3, #5
 800e6be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e6c2:	0150      	lsls	r0, r2, #5
 800e6c4:	4602      	mov	r2, r0
 800e6c6:	460b      	mov	r3, r1
 800e6c8:	4621      	mov	r1, r4
 800e6ca:	1a51      	subs	r1, r2, r1
 800e6cc:	61b9      	str	r1, [r7, #24]
 800e6ce:	4629      	mov	r1, r5
 800e6d0:	eb63 0301 	sbc.w	r3, r3, r1
 800e6d4:	61fb      	str	r3, [r7, #28]
 800e6d6:	f04f 0200 	mov.w	r2, #0
 800e6da:	f04f 0300 	mov.w	r3, #0
 800e6de:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800e6e2:	4659      	mov	r1, fp
 800e6e4:	018b      	lsls	r3, r1, #6
 800e6e6:	4651      	mov	r1, sl
 800e6e8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800e6ec:	4651      	mov	r1, sl
 800e6ee:	018a      	lsls	r2, r1, #6
 800e6f0:	4651      	mov	r1, sl
 800e6f2:	ebb2 0801 	subs.w	r8, r2, r1
 800e6f6:	4659      	mov	r1, fp
 800e6f8:	eb63 0901 	sbc.w	r9, r3, r1
 800e6fc:	f04f 0200 	mov.w	r2, #0
 800e700:	f04f 0300 	mov.w	r3, #0
 800e704:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800e708:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800e70c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800e710:	4690      	mov	r8, r2
 800e712:	4699      	mov	r9, r3
 800e714:	4623      	mov	r3, r4
 800e716:	eb18 0303 	adds.w	r3, r8, r3
 800e71a:	613b      	str	r3, [r7, #16]
 800e71c:	462b      	mov	r3, r5
 800e71e:	eb49 0303 	adc.w	r3, r9, r3
 800e722:	617b      	str	r3, [r7, #20]
 800e724:	f04f 0200 	mov.w	r2, #0
 800e728:	f04f 0300 	mov.w	r3, #0
 800e72c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800e730:	4629      	mov	r1, r5
 800e732:	024b      	lsls	r3, r1, #9
 800e734:	4621      	mov	r1, r4
 800e736:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800e73a:	4621      	mov	r1, r4
 800e73c:	024a      	lsls	r2, r1, #9
 800e73e:	4610      	mov	r0, r2
 800e740:	4619      	mov	r1, r3
 800e742:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e746:	2200      	movs	r2, #0
 800e748:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e74a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800e74c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800e750:	f7fa f982 	bl	8008a58 <__aeabi_uldivmod>
 800e754:	4602      	mov	r2, r0
 800e756:	460b      	mov	r3, r1
 800e758:	4613      	mov	r3, r2
 800e75a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e75e:	e065      	b.n	800e82c <HAL_RCC_GetSysClockFreq+0x420>
 800e760:	40023800 	.word	0x40023800
 800e764:	00f42400 	.word	0x00f42400
 800e768:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e76c:	4b3d      	ldr	r3, [pc, #244]	@ (800e864 <HAL_RCC_GetSysClockFreq+0x458>)
 800e76e:	685b      	ldr	r3, [r3, #4]
 800e770:	099b      	lsrs	r3, r3, #6
 800e772:	2200      	movs	r2, #0
 800e774:	4618      	mov	r0, r3
 800e776:	4611      	mov	r1, r2
 800e778:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800e77c:	653b      	str	r3, [r7, #80]	@ 0x50
 800e77e:	2300      	movs	r3, #0
 800e780:	657b      	str	r3, [r7, #84]	@ 0x54
 800e782:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800e786:	4642      	mov	r2, r8
 800e788:	464b      	mov	r3, r9
 800e78a:	f04f 0000 	mov.w	r0, #0
 800e78e:	f04f 0100 	mov.w	r1, #0
 800e792:	0159      	lsls	r1, r3, #5
 800e794:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e798:	0150      	lsls	r0, r2, #5
 800e79a:	4602      	mov	r2, r0
 800e79c:	460b      	mov	r3, r1
 800e79e:	4641      	mov	r1, r8
 800e7a0:	1a51      	subs	r1, r2, r1
 800e7a2:	60b9      	str	r1, [r7, #8]
 800e7a4:	4649      	mov	r1, r9
 800e7a6:	eb63 0301 	sbc.w	r3, r3, r1
 800e7aa:	60fb      	str	r3, [r7, #12]
 800e7ac:	f04f 0200 	mov.w	r2, #0
 800e7b0:	f04f 0300 	mov.w	r3, #0
 800e7b4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800e7b8:	4659      	mov	r1, fp
 800e7ba:	018b      	lsls	r3, r1, #6
 800e7bc:	4651      	mov	r1, sl
 800e7be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800e7c2:	4651      	mov	r1, sl
 800e7c4:	018a      	lsls	r2, r1, #6
 800e7c6:	4651      	mov	r1, sl
 800e7c8:	1a54      	subs	r4, r2, r1
 800e7ca:	4659      	mov	r1, fp
 800e7cc:	eb63 0501 	sbc.w	r5, r3, r1
 800e7d0:	f04f 0200 	mov.w	r2, #0
 800e7d4:	f04f 0300 	mov.w	r3, #0
 800e7d8:	00eb      	lsls	r3, r5, #3
 800e7da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800e7de:	00e2      	lsls	r2, r4, #3
 800e7e0:	4614      	mov	r4, r2
 800e7e2:	461d      	mov	r5, r3
 800e7e4:	4643      	mov	r3, r8
 800e7e6:	18e3      	adds	r3, r4, r3
 800e7e8:	603b      	str	r3, [r7, #0]
 800e7ea:	464b      	mov	r3, r9
 800e7ec:	eb45 0303 	adc.w	r3, r5, r3
 800e7f0:	607b      	str	r3, [r7, #4]
 800e7f2:	f04f 0200 	mov.w	r2, #0
 800e7f6:	f04f 0300 	mov.w	r3, #0
 800e7fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 800e7fe:	4629      	mov	r1, r5
 800e800:	028b      	lsls	r3, r1, #10
 800e802:	4621      	mov	r1, r4
 800e804:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800e808:	4621      	mov	r1, r4
 800e80a:	028a      	lsls	r2, r1, #10
 800e80c:	4610      	mov	r0, r2
 800e80e:	4619      	mov	r1, r3
 800e810:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e814:	2200      	movs	r2, #0
 800e816:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e818:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800e81a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800e81e:	f7fa f91b 	bl	8008a58 <__aeabi_uldivmod>
 800e822:	4602      	mov	r2, r0
 800e824:	460b      	mov	r3, r1
 800e826:	4613      	mov	r3, r2
 800e828:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800e82c:	4b0d      	ldr	r3, [pc, #52]	@ (800e864 <HAL_RCC_GetSysClockFreq+0x458>)
 800e82e:	685b      	ldr	r3, [r3, #4]
 800e830:	0f1b      	lsrs	r3, r3, #28
 800e832:	f003 0307 	and.w	r3, r3, #7
 800e836:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800e83a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800e83e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e842:	fbb2 f3f3 	udiv	r3, r2, r3
 800e846:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800e84a:	e003      	b.n	800e854 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800e84c:	4b06      	ldr	r3, [pc, #24]	@ (800e868 <HAL_RCC_GetSysClockFreq+0x45c>)
 800e84e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800e852:	bf00      	nop
    }
  }
  return sysclockfreq;
 800e854:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800e858:	4618      	mov	r0, r3
 800e85a:	37b8      	adds	r7, #184	@ 0xb8
 800e85c:	46bd      	mov	sp, r7
 800e85e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e862:	bf00      	nop
 800e864:	40023800 	.word	0x40023800
 800e868:	00f42400 	.word	0x00f42400

0800e86c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b086      	sub	sp, #24
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d101      	bne.n	800e87e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800e87a:	2301      	movs	r3, #1
 800e87c:	e28d      	b.n	800ed9a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	f003 0301 	and.w	r3, r3, #1
 800e886:	2b00      	cmp	r3, #0
 800e888:	f000 8083 	beq.w	800e992 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800e88c:	4b94      	ldr	r3, [pc, #592]	@ (800eae0 <HAL_RCC_OscConfig+0x274>)
 800e88e:	689b      	ldr	r3, [r3, #8]
 800e890:	f003 030c 	and.w	r3, r3, #12
 800e894:	2b04      	cmp	r3, #4
 800e896:	d019      	beq.n	800e8cc <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800e898:	4b91      	ldr	r3, [pc, #580]	@ (800eae0 <HAL_RCC_OscConfig+0x274>)
 800e89a:	689b      	ldr	r3, [r3, #8]
 800e89c:	f003 030c 	and.w	r3, r3, #12
        || \
 800e8a0:	2b08      	cmp	r3, #8
 800e8a2:	d106      	bne.n	800e8b2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800e8a4:	4b8e      	ldr	r3, [pc, #568]	@ (800eae0 <HAL_RCC_OscConfig+0x274>)
 800e8a6:	685b      	ldr	r3, [r3, #4]
 800e8a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e8ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e8b0:	d00c      	beq.n	800e8cc <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e8b2:	4b8b      	ldr	r3, [pc, #556]	@ (800eae0 <HAL_RCC_OscConfig+0x274>)
 800e8b4:	689b      	ldr	r3, [r3, #8]
 800e8b6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800e8ba:	2b0c      	cmp	r3, #12
 800e8bc:	d112      	bne.n	800e8e4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e8be:	4b88      	ldr	r3, [pc, #544]	@ (800eae0 <HAL_RCC_OscConfig+0x274>)
 800e8c0:	685b      	ldr	r3, [r3, #4]
 800e8c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e8c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e8ca:	d10b      	bne.n	800e8e4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e8cc:	4b84      	ldr	r3, [pc, #528]	@ (800eae0 <HAL_RCC_OscConfig+0x274>)
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d05b      	beq.n	800e990 <HAL_RCC_OscConfig+0x124>
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	685b      	ldr	r3, [r3, #4]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d157      	bne.n	800e990 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800e8e0:	2301      	movs	r3, #1
 800e8e2:	e25a      	b.n	800ed9a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	685b      	ldr	r3, [r3, #4]
 800e8e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e8ec:	d106      	bne.n	800e8fc <HAL_RCC_OscConfig+0x90>
 800e8ee:	4b7c      	ldr	r3, [pc, #496]	@ (800eae0 <HAL_RCC_OscConfig+0x274>)
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	4a7b      	ldr	r2, [pc, #492]	@ (800eae0 <HAL_RCC_OscConfig+0x274>)
 800e8f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e8f8:	6013      	str	r3, [r2, #0]
 800e8fa:	e01d      	b.n	800e938 <HAL_RCC_OscConfig+0xcc>
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	685b      	ldr	r3, [r3, #4]
 800e900:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e904:	d10c      	bne.n	800e920 <HAL_RCC_OscConfig+0xb4>
 800e906:	4b76      	ldr	r3, [pc, #472]	@ (800eae0 <HAL_RCC_OscConfig+0x274>)
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	4a75      	ldr	r2, [pc, #468]	@ (800eae0 <HAL_RCC_OscConfig+0x274>)
 800e90c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800e910:	6013      	str	r3, [r2, #0]
 800e912:	4b73      	ldr	r3, [pc, #460]	@ (800eae0 <HAL_RCC_OscConfig+0x274>)
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	4a72      	ldr	r2, [pc, #456]	@ (800eae0 <HAL_RCC_OscConfig+0x274>)
 800e918:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e91c:	6013      	str	r3, [r2, #0]
 800e91e:	e00b      	b.n	800e938 <HAL_RCC_OscConfig+0xcc>
 800e920:	4b6f      	ldr	r3, [pc, #444]	@ (800eae0 <HAL_RCC_OscConfig+0x274>)
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	4a6e      	ldr	r2, [pc, #440]	@ (800eae0 <HAL_RCC_OscConfig+0x274>)
 800e926:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e92a:	6013      	str	r3, [r2, #0]
 800e92c:	4b6c      	ldr	r3, [pc, #432]	@ (800eae0 <HAL_RCC_OscConfig+0x274>)
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	4a6b      	ldr	r2, [pc, #428]	@ (800eae0 <HAL_RCC_OscConfig+0x274>)
 800e932:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e936:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	685b      	ldr	r3, [r3, #4]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d013      	beq.n	800e968 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e940:	f7fe fd5c 	bl	800d3fc <HAL_GetTick>
 800e944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e946:	e008      	b.n	800e95a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e948:	f7fe fd58 	bl	800d3fc <HAL_GetTick>
 800e94c:	4602      	mov	r2, r0
 800e94e:	693b      	ldr	r3, [r7, #16]
 800e950:	1ad3      	subs	r3, r2, r3
 800e952:	2b64      	cmp	r3, #100	@ 0x64
 800e954:	d901      	bls.n	800e95a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800e956:	2303      	movs	r3, #3
 800e958:	e21f      	b.n	800ed9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e95a:	4b61      	ldr	r3, [pc, #388]	@ (800eae0 <HAL_RCC_OscConfig+0x274>)
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e962:	2b00      	cmp	r3, #0
 800e964:	d0f0      	beq.n	800e948 <HAL_RCC_OscConfig+0xdc>
 800e966:	e014      	b.n	800e992 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e968:	f7fe fd48 	bl	800d3fc <HAL_GetTick>
 800e96c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e96e:	e008      	b.n	800e982 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e970:	f7fe fd44 	bl	800d3fc <HAL_GetTick>
 800e974:	4602      	mov	r2, r0
 800e976:	693b      	ldr	r3, [r7, #16]
 800e978:	1ad3      	subs	r3, r2, r3
 800e97a:	2b64      	cmp	r3, #100	@ 0x64
 800e97c:	d901      	bls.n	800e982 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800e97e:	2303      	movs	r3, #3
 800e980:	e20b      	b.n	800ed9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e982:	4b57      	ldr	r3, [pc, #348]	@ (800eae0 <HAL_RCC_OscConfig+0x274>)
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d1f0      	bne.n	800e970 <HAL_RCC_OscConfig+0x104>
 800e98e:	e000      	b.n	800e992 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e990:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	f003 0302 	and.w	r3, r3, #2
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d06f      	beq.n	800ea7e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800e99e:	4b50      	ldr	r3, [pc, #320]	@ (800eae0 <HAL_RCC_OscConfig+0x274>)
 800e9a0:	689b      	ldr	r3, [r3, #8]
 800e9a2:	f003 030c 	and.w	r3, r3, #12
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d017      	beq.n	800e9da <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800e9aa:	4b4d      	ldr	r3, [pc, #308]	@ (800eae0 <HAL_RCC_OscConfig+0x274>)
 800e9ac:	689b      	ldr	r3, [r3, #8]
 800e9ae:	f003 030c 	and.w	r3, r3, #12
        || \
 800e9b2:	2b08      	cmp	r3, #8
 800e9b4:	d105      	bne.n	800e9c2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800e9b6:	4b4a      	ldr	r3, [pc, #296]	@ (800eae0 <HAL_RCC_OscConfig+0x274>)
 800e9b8:	685b      	ldr	r3, [r3, #4]
 800e9ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d00b      	beq.n	800e9da <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e9c2:	4b47      	ldr	r3, [pc, #284]	@ (800eae0 <HAL_RCC_OscConfig+0x274>)
 800e9c4:	689b      	ldr	r3, [r3, #8]
 800e9c6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800e9ca:	2b0c      	cmp	r3, #12
 800e9cc:	d11c      	bne.n	800ea08 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e9ce:	4b44      	ldr	r3, [pc, #272]	@ (800eae0 <HAL_RCC_OscConfig+0x274>)
 800e9d0:	685b      	ldr	r3, [r3, #4]
 800e9d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d116      	bne.n	800ea08 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e9da:	4b41      	ldr	r3, [pc, #260]	@ (800eae0 <HAL_RCC_OscConfig+0x274>)
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	f003 0302 	and.w	r3, r3, #2
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d005      	beq.n	800e9f2 <HAL_RCC_OscConfig+0x186>
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	68db      	ldr	r3, [r3, #12]
 800e9ea:	2b01      	cmp	r3, #1
 800e9ec:	d001      	beq.n	800e9f2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800e9ee:	2301      	movs	r3, #1
 800e9f0:	e1d3      	b.n	800ed9a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e9f2:	4b3b      	ldr	r3, [pc, #236]	@ (800eae0 <HAL_RCC_OscConfig+0x274>)
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	691b      	ldr	r3, [r3, #16]
 800e9fe:	00db      	lsls	r3, r3, #3
 800ea00:	4937      	ldr	r1, [pc, #220]	@ (800eae0 <HAL_RCC_OscConfig+0x274>)
 800ea02:	4313      	orrs	r3, r2
 800ea04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ea06:	e03a      	b.n	800ea7e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	68db      	ldr	r3, [r3, #12]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d020      	beq.n	800ea52 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ea10:	4b34      	ldr	r3, [pc, #208]	@ (800eae4 <HAL_RCC_OscConfig+0x278>)
 800ea12:	2201      	movs	r2, #1
 800ea14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ea16:	f7fe fcf1 	bl	800d3fc <HAL_GetTick>
 800ea1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ea1c:	e008      	b.n	800ea30 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ea1e:	f7fe fced 	bl	800d3fc <HAL_GetTick>
 800ea22:	4602      	mov	r2, r0
 800ea24:	693b      	ldr	r3, [r7, #16]
 800ea26:	1ad3      	subs	r3, r2, r3
 800ea28:	2b02      	cmp	r3, #2
 800ea2a:	d901      	bls.n	800ea30 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800ea2c:	2303      	movs	r3, #3
 800ea2e:	e1b4      	b.n	800ed9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ea30:	4b2b      	ldr	r3, [pc, #172]	@ (800eae0 <HAL_RCC_OscConfig+0x274>)
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	f003 0302 	and.w	r3, r3, #2
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d0f0      	beq.n	800ea1e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ea3c:	4b28      	ldr	r3, [pc, #160]	@ (800eae0 <HAL_RCC_OscConfig+0x274>)
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	691b      	ldr	r3, [r3, #16]
 800ea48:	00db      	lsls	r3, r3, #3
 800ea4a:	4925      	ldr	r1, [pc, #148]	@ (800eae0 <HAL_RCC_OscConfig+0x274>)
 800ea4c:	4313      	orrs	r3, r2
 800ea4e:	600b      	str	r3, [r1, #0]
 800ea50:	e015      	b.n	800ea7e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ea52:	4b24      	ldr	r3, [pc, #144]	@ (800eae4 <HAL_RCC_OscConfig+0x278>)
 800ea54:	2200      	movs	r2, #0
 800ea56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ea58:	f7fe fcd0 	bl	800d3fc <HAL_GetTick>
 800ea5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ea5e:	e008      	b.n	800ea72 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ea60:	f7fe fccc 	bl	800d3fc <HAL_GetTick>
 800ea64:	4602      	mov	r2, r0
 800ea66:	693b      	ldr	r3, [r7, #16]
 800ea68:	1ad3      	subs	r3, r2, r3
 800ea6a:	2b02      	cmp	r3, #2
 800ea6c:	d901      	bls.n	800ea72 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800ea6e:	2303      	movs	r3, #3
 800ea70:	e193      	b.n	800ed9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ea72:	4b1b      	ldr	r3, [pc, #108]	@ (800eae0 <HAL_RCC_OscConfig+0x274>)
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	f003 0302 	and.w	r3, r3, #2
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d1f0      	bne.n	800ea60 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	f003 0308 	and.w	r3, r3, #8
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d036      	beq.n	800eaf8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	695b      	ldr	r3, [r3, #20]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d016      	beq.n	800eac0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ea92:	4b15      	ldr	r3, [pc, #84]	@ (800eae8 <HAL_RCC_OscConfig+0x27c>)
 800ea94:	2201      	movs	r2, #1
 800ea96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ea98:	f7fe fcb0 	bl	800d3fc <HAL_GetTick>
 800ea9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ea9e:	e008      	b.n	800eab2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800eaa0:	f7fe fcac 	bl	800d3fc <HAL_GetTick>
 800eaa4:	4602      	mov	r2, r0
 800eaa6:	693b      	ldr	r3, [r7, #16]
 800eaa8:	1ad3      	subs	r3, r2, r3
 800eaaa:	2b02      	cmp	r3, #2
 800eaac:	d901      	bls.n	800eab2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800eaae:	2303      	movs	r3, #3
 800eab0:	e173      	b.n	800ed9a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800eab2:	4b0b      	ldr	r3, [pc, #44]	@ (800eae0 <HAL_RCC_OscConfig+0x274>)
 800eab4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eab6:	f003 0302 	and.w	r3, r3, #2
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d0f0      	beq.n	800eaa0 <HAL_RCC_OscConfig+0x234>
 800eabe:	e01b      	b.n	800eaf8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800eac0:	4b09      	ldr	r3, [pc, #36]	@ (800eae8 <HAL_RCC_OscConfig+0x27c>)
 800eac2:	2200      	movs	r2, #0
 800eac4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800eac6:	f7fe fc99 	bl	800d3fc <HAL_GetTick>
 800eaca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800eacc:	e00e      	b.n	800eaec <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800eace:	f7fe fc95 	bl	800d3fc <HAL_GetTick>
 800ead2:	4602      	mov	r2, r0
 800ead4:	693b      	ldr	r3, [r7, #16]
 800ead6:	1ad3      	subs	r3, r2, r3
 800ead8:	2b02      	cmp	r3, #2
 800eada:	d907      	bls.n	800eaec <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800eadc:	2303      	movs	r3, #3
 800eade:	e15c      	b.n	800ed9a <HAL_RCC_OscConfig+0x52e>
 800eae0:	40023800 	.word	0x40023800
 800eae4:	42470000 	.word	0x42470000
 800eae8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800eaec:	4b8a      	ldr	r3, [pc, #552]	@ (800ed18 <HAL_RCC_OscConfig+0x4ac>)
 800eaee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eaf0:	f003 0302 	and.w	r3, r3, #2
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d1ea      	bne.n	800eace <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	f003 0304 	and.w	r3, r3, #4
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	f000 8097 	beq.w	800ec34 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800eb06:	2300      	movs	r3, #0
 800eb08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800eb0a:	4b83      	ldr	r3, [pc, #524]	@ (800ed18 <HAL_RCC_OscConfig+0x4ac>)
 800eb0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d10f      	bne.n	800eb36 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800eb16:	2300      	movs	r3, #0
 800eb18:	60bb      	str	r3, [r7, #8]
 800eb1a:	4b7f      	ldr	r3, [pc, #508]	@ (800ed18 <HAL_RCC_OscConfig+0x4ac>)
 800eb1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb1e:	4a7e      	ldr	r2, [pc, #504]	@ (800ed18 <HAL_RCC_OscConfig+0x4ac>)
 800eb20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800eb24:	6413      	str	r3, [r2, #64]	@ 0x40
 800eb26:	4b7c      	ldr	r3, [pc, #496]	@ (800ed18 <HAL_RCC_OscConfig+0x4ac>)
 800eb28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800eb2e:	60bb      	str	r3, [r7, #8]
 800eb30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800eb32:	2301      	movs	r3, #1
 800eb34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800eb36:	4b79      	ldr	r3, [pc, #484]	@ (800ed1c <HAL_RCC_OscConfig+0x4b0>)
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d118      	bne.n	800eb74 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800eb42:	4b76      	ldr	r3, [pc, #472]	@ (800ed1c <HAL_RCC_OscConfig+0x4b0>)
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	4a75      	ldr	r2, [pc, #468]	@ (800ed1c <HAL_RCC_OscConfig+0x4b0>)
 800eb48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800eb4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800eb4e:	f7fe fc55 	bl	800d3fc <HAL_GetTick>
 800eb52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800eb54:	e008      	b.n	800eb68 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800eb56:	f7fe fc51 	bl	800d3fc <HAL_GetTick>
 800eb5a:	4602      	mov	r2, r0
 800eb5c:	693b      	ldr	r3, [r7, #16]
 800eb5e:	1ad3      	subs	r3, r2, r3
 800eb60:	2b02      	cmp	r3, #2
 800eb62:	d901      	bls.n	800eb68 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800eb64:	2303      	movs	r3, #3
 800eb66:	e118      	b.n	800ed9a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800eb68:	4b6c      	ldr	r3, [pc, #432]	@ (800ed1c <HAL_RCC_OscConfig+0x4b0>)
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d0f0      	beq.n	800eb56 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	689b      	ldr	r3, [r3, #8]
 800eb78:	2b01      	cmp	r3, #1
 800eb7a:	d106      	bne.n	800eb8a <HAL_RCC_OscConfig+0x31e>
 800eb7c:	4b66      	ldr	r3, [pc, #408]	@ (800ed18 <HAL_RCC_OscConfig+0x4ac>)
 800eb7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eb80:	4a65      	ldr	r2, [pc, #404]	@ (800ed18 <HAL_RCC_OscConfig+0x4ac>)
 800eb82:	f043 0301 	orr.w	r3, r3, #1
 800eb86:	6713      	str	r3, [r2, #112]	@ 0x70
 800eb88:	e01c      	b.n	800ebc4 <HAL_RCC_OscConfig+0x358>
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	689b      	ldr	r3, [r3, #8]
 800eb8e:	2b05      	cmp	r3, #5
 800eb90:	d10c      	bne.n	800ebac <HAL_RCC_OscConfig+0x340>
 800eb92:	4b61      	ldr	r3, [pc, #388]	@ (800ed18 <HAL_RCC_OscConfig+0x4ac>)
 800eb94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eb96:	4a60      	ldr	r2, [pc, #384]	@ (800ed18 <HAL_RCC_OscConfig+0x4ac>)
 800eb98:	f043 0304 	orr.w	r3, r3, #4
 800eb9c:	6713      	str	r3, [r2, #112]	@ 0x70
 800eb9e:	4b5e      	ldr	r3, [pc, #376]	@ (800ed18 <HAL_RCC_OscConfig+0x4ac>)
 800eba0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eba2:	4a5d      	ldr	r2, [pc, #372]	@ (800ed18 <HAL_RCC_OscConfig+0x4ac>)
 800eba4:	f043 0301 	orr.w	r3, r3, #1
 800eba8:	6713      	str	r3, [r2, #112]	@ 0x70
 800ebaa:	e00b      	b.n	800ebc4 <HAL_RCC_OscConfig+0x358>
 800ebac:	4b5a      	ldr	r3, [pc, #360]	@ (800ed18 <HAL_RCC_OscConfig+0x4ac>)
 800ebae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ebb0:	4a59      	ldr	r2, [pc, #356]	@ (800ed18 <HAL_RCC_OscConfig+0x4ac>)
 800ebb2:	f023 0301 	bic.w	r3, r3, #1
 800ebb6:	6713      	str	r3, [r2, #112]	@ 0x70
 800ebb8:	4b57      	ldr	r3, [pc, #348]	@ (800ed18 <HAL_RCC_OscConfig+0x4ac>)
 800ebba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ebbc:	4a56      	ldr	r2, [pc, #344]	@ (800ed18 <HAL_RCC_OscConfig+0x4ac>)
 800ebbe:	f023 0304 	bic.w	r3, r3, #4
 800ebc2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	689b      	ldr	r3, [r3, #8]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d015      	beq.n	800ebf8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ebcc:	f7fe fc16 	bl	800d3fc <HAL_GetTick>
 800ebd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ebd2:	e00a      	b.n	800ebea <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ebd4:	f7fe fc12 	bl	800d3fc <HAL_GetTick>
 800ebd8:	4602      	mov	r2, r0
 800ebda:	693b      	ldr	r3, [r7, #16]
 800ebdc:	1ad3      	subs	r3, r2, r3
 800ebde:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ebe2:	4293      	cmp	r3, r2
 800ebe4:	d901      	bls.n	800ebea <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800ebe6:	2303      	movs	r3, #3
 800ebe8:	e0d7      	b.n	800ed9a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ebea:	4b4b      	ldr	r3, [pc, #300]	@ (800ed18 <HAL_RCC_OscConfig+0x4ac>)
 800ebec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ebee:	f003 0302 	and.w	r3, r3, #2
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d0ee      	beq.n	800ebd4 <HAL_RCC_OscConfig+0x368>
 800ebf6:	e014      	b.n	800ec22 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ebf8:	f7fe fc00 	bl	800d3fc <HAL_GetTick>
 800ebfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ebfe:	e00a      	b.n	800ec16 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ec00:	f7fe fbfc 	bl	800d3fc <HAL_GetTick>
 800ec04:	4602      	mov	r2, r0
 800ec06:	693b      	ldr	r3, [r7, #16]
 800ec08:	1ad3      	subs	r3, r2, r3
 800ec0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ec0e:	4293      	cmp	r3, r2
 800ec10:	d901      	bls.n	800ec16 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800ec12:	2303      	movs	r3, #3
 800ec14:	e0c1      	b.n	800ed9a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ec16:	4b40      	ldr	r3, [pc, #256]	@ (800ed18 <HAL_RCC_OscConfig+0x4ac>)
 800ec18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ec1a:	f003 0302 	and.w	r3, r3, #2
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d1ee      	bne.n	800ec00 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800ec22:	7dfb      	ldrb	r3, [r7, #23]
 800ec24:	2b01      	cmp	r3, #1
 800ec26:	d105      	bne.n	800ec34 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ec28:	4b3b      	ldr	r3, [pc, #236]	@ (800ed18 <HAL_RCC_OscConfig+0x4ac>)
 800ec2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ec2c:	4a3a      	ldr	r2, [pc, #232]	@ (800ed18 <HAL_RCC_OscConfig+0x4ac>)
 800ec2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ec32:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	699b      	ldr	r3, [r3, #24]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	f000 80ad 	beq.w	800ed98 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ec3e:	4b36      	ldr	r3, [pc, #216]	@ (800ed18 <HAL_RCC_OscConfig+0x4ac>)
 800ec40:	689b      	ldr	r3, [r3, #8]
 800ec42:	f003 030c 	and.w	r3, r3, #12
 800ec46:	2b08      	cmp	r3, #8
 800ec48:	d060      	beq.n	800ed0c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	699b      	ldr	r3, [r3, #24]
 800ec4e:	2b02      	cmp	r3, #2
 800ec50:	d145      	bne.n	800ecde <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ec52:	4b33      	ldr	r3, [pc, #204]	@ (800ed20 <HAL_RCC_OscConfig+0x4b4>)
 800ec54:	2200      	movs	r2, #0
 800ec56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ec58:	f7fe fbd0 	bl	800d3fc <HAL_GetTick>
 800ec5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ec5e:	e008      	b.n	800ec72 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ec60:	f7fe fbcc 	bl	800d3fc <HAL_GetTick>
 800ec64:	4602      	mov	r2, r0
 800ec66:	693b      	ldr	r3, [r7, #16]
 800ec68:	1ad3      	subs	r3, r2, r3
 800ec6a:	2b02      	cmp	r3, #2
 800ec6c:	d901      	bls.n	800ec72 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800ec6e:	2303      	movs	r3, #3
 800ec70:	e093      	b.n	800ed9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ec72:	4b29      	ldr	r3, [pc, #164]	@ (800ed18 <HAL_RCC_OscConfig+0x4ac>)
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d1f0      	bne.n	800ec60 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	69da      	ldr	r2, [r3, #28]
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	6a1b      	ldr	r3, [r3, #32]
 800ec86:	431a      	orrs	r2, r3
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec8c:	019b      	lsls	r3, r3, #6
 800ec8e:	431a      	orrs	r2, r3
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec94:	085b      	lsrs	r3, r3, #1
 800ec96:	3b01      	subs	r3, #1
 800ec98:	041b      	lsls	r3, r3, #16
 800ec9a:	431a      	orrs	r2, r3
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eca0:	061b      	lsls	r3, r3, #24
 800eca2:	431a      	orrs	r2, r3
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eca8:	071b      	lsls	r3, r3, #28
 800ecaa:	491b      	ldr	r1, [pc, #108]	@ (800ed18 <HAL_RCC_OscConfig+0x4ac>)
 800ecac:	4313      	orrs	r3, r2
 800ecae:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ecb0:	4b1b      	ldr	r3, [pc, #108]	@ (800ed20 <HAL_RCC_OscConfig+0x4b4>)
 800ecb2:	2201      	movs	r2, #1
 800ecb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ecb6:	f7fe fba1 	bl	800d3fc <HAL_GetTick>
 800ecba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ecbc:	e008      	b.n	800ecd0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ecbe:	f7fe fb9d 	bl	800d3fc <HAL_GetTick>
 800ecc2:	4602      	mov	r2, r0
 800ecc4:	693b      	ldr	r3, [r7, #16]
 800ecc6:	1ad3      	subs	r3, r2, r3
 800ecc8:	2b02      	cmp	r3, #2
 800ecca:	d901      	bls.n	800ecd0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800eccc:	2303      	movs	r3, #3
 800ecce:	e064      	b.n	800ed9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ecd0:	4b11      	ldr	r3, [pc, #68]	@ (800ed18 <HAL_RCC_OscConfig+0x4ac>)
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d0f0      	beq.n	800ecbe <HAL_RCC_OscConfig+0x452>
 800ecdc:	e05c      	b.n	800ed98 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ecde:	4b10      	ldr	r3, [pc, #64]	@ (800ed20 <HAL_RCC_OscConfig+0x4b4>)
 800ece0:	2200      	movs	r2, #0
 800ece2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ece4:	f7fe fb8a 	bl	800d3fc <HAL_GetTick>
 800ece8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ecea:	e008      	b.n	800ecfe <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ecec:	f7fe fb86 	bl	800d3fc <HAL_GetTick>
 800ecf0:	4602      	mov	r2, r0
 800ecf2:	693b      	ldr	r3, [r7, #16]
 800ecf4:	1ad3      	subs	r3, r2, r3
 800ecf6:	2b02      	cmp	r3, #2
 800ecf8:	d901      	bls.n	800ecfe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800ecfa:	2303      	movs	r3, #3
 800ecfc:	e04d      	b.n	800ed9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ecfe:	4b06      	ldr	r3, [pc, #24]	@ (800ed18 <HAL_RCC_OscConfig+0x4ac>)
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d1f0      	bne.n	800ecec <HAL_RCC_OscConfig+0x480>
 800ed0a:	e045      	b.n	800ed98 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	699b      	ldr	r3, [r3, #24]
 800ed10:	2b01      	cmp	r3, #1
 800ed12:	d107      	bne.n	800ed24 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800ed14:	2301      	movs	r3, #1
 800ed16:	e040      	b.n	800ed9a <HAL_RCC_OscConfig+0x52e>
 800ed18:	40023800 	.word	0x40023800
 800ed1c:	40007000 	.word	0x40007000
 800ed20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800ed24:	4b1f      	ldr	r3, [pc, #124]	@ (800eda4 <HAL_RCC_OscConfig+0x538>)
 800ed26:	685b      	ldr	r3, [r3, #4]
 800ed28:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	699b      	ldr	r3, [r3, #24]
 800ed2e:	2b01      	cmp	r3, #1
 800ed30:	d030      	beq.n	800ed94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ed3c:	429a      	cmp	r2, r3
 800ed3e:	d129      	bne.n	800ed94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ed4a:	429a      	cmp	r2, r3
 800ed4c:	d122      	bne.n	800ed94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ed4e:	68fa      	ldr	r2, [r7, #12]
 800ed50:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800ed54:	4013      	ands	r3, r2
 800ed56:	687a      	ldr	r2, [r7, #4]
 800ed58:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800ed5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ed5c:	4293      	cmp	r3, r2
 800ed5e:	d119      	bne.n	800ed94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ed6a:	085b      	lsrs	r3, r3, #1
 800ed6c:	3b01      	subs	r3, #1
 800ed6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ed70:	429a      	cmp	r2, r3
 800ed72:	d10f      	bne.n	800ed94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ed80:	429a      	cmp	r2, r3
 800ed82:	d107      	bne.n	800ed94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ed8e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ed90:	429a      	cmp	r2, r3
 800ed92:	d001      	beq.n	800ed98 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800ed94:	2301      	movs	r3, #1
 800ed96:	e000      	b.n	800ed9a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800ed98:	2300      	movs	r3, #0
}
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	3718      	adds	r7, #24
 800ed9e:	46bd      	mov	sp, r7
 800eda0:	bd80      	pop	{r7, pc}
 800eda2:	bf00      	nop
 800eda4:	40023800 	.word	0x40023800

0800eda8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b082      	sub	sp, #8
 800edac:	af00      	add	r7, sp, #0
 800edae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d101      	bne.n	800edba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800edb6:	2301      	movs	r3, #1
 800edb8:	e041      	b.n	800ee3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800edc0:	b2db      	uxtb	r3, r3
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d106      	bne.n	800edd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	2200      	movs	r2, #0
 800edca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800edce:	6878      	ldr	r0, [r7, #4]
 800edd0:	f7fb ffb0 	bl	800ad34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	2202      	movs	r2, #2
 800edd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	681a      	ldr	r2, [r3, #0]
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	3304      	adds	r3, #4
 800ede4:	4619      	mov	r1, r3
 800ede6:	4610      	mov	r0, r2
 800ede8:	f000 fa88 	bl	800f2fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	2201      	movs	r2, #1
 800edf0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	2201      	movs	r2, #1
 800edf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	2201      	movs	r2, #1
 800ee00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	2201      	movs	r2, #1
 800ee08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	2201      	movs	r2, #1
 800ee10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	2201      	movs	r2, #1
 800ee18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	2201      	movs	r2, #1
 800ee20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	2201      	movs	r2, #1
 800ee28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	2201      	movs	r2, #1
 800ee30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	2201      	movs	r2, #1
 800ee38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ee3c:	2300      	movs	r3, #0
}
 800ee3e:	4618      	mov	r0, r3
 800ee40:	3708      	adds	r7, #8
 800ee42:	46bd      	mov	sp, r7
 800ee44:	bd80      	pop	{r7, pc}
	...

0800ee48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ee48:	b480      	push	{r7}
 800ee4a:	b085      	sub	sp, #20
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ee56:	b2db      	uxtb	r3, r3
 800ee58:	2b01      	cmp	r3, #1
 800ee5a:	d001      	beq.n	800ee60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ee5c:	2301      	movs	r3, #1
 800ee5e:	e04e      	b.n	800eefe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	2202      	movs	r2, #2
 800ee64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	68da      	ldr	r2, [r3, #12]
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	f042 0201 	orr.w	r2, r2, #1
 800ee76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	4a23      	ldr	r2, [pc, #140]	@ (800ef0c <HAL_TIM_Base_Start_IT+0xc4>)
 800ee7e:	4293      	cmp	r3, r2
 800ee80:	d022      	beq.n	800eec8 <HAL_TIM_Base_Start_IT+0x80>
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ee8a:	d01d      	beq.n	800eec8 <HAL_TIM_Base_Start_IT+0x80>
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	4a1f      	ldr	r2, [pc, #124]	@ (800ef10 <HAL_TIM_Base_Start_IT+0xc8>)
 800ee92:	4293      	cmp	r3, r2
 800ee94:	d018      	beq.n	800eec8 <HAL_TIM_Base_Start_IT+0x80>
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	4a1e      	ldr	r2, [pc, #120]	@ (800ef14 <HAL_TIM_Base_Start_IT+0xcc>)
 800ee9c:	4293      	cmp	r3, r2
 800ee9e:	d013      	beq.n	800eec8 <HAL_TIM_Base_Start_IT+0x80>
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	4a1c      	ldr	r2, [pc, #112]	@ (800ef18 <HAL_TIM_Base_Start_IT+0xd0>)
 800eea6:	4293      	cmp	r3, r2
 800eea8:	d00e      	beq.n	800eec8 <HAL_TIM_Base_Start_IT+0x80>
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	4a1b      	ldr	r2, [pc, #108]	@ (800ef1c <HAL_TIM_Base_Start_IT+0xd4>)
 800eeb0:	4293      	cmp	r3, r2
 800eeb2:	d009      	beq.n	800eec8 <HAL_TIM_Base_Start_IT+0x80>
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	4a19      	ldr	r2, [pc, #100]	@ (800ef20 <HAL_TIM_Base_Start_IT+0xd8>)
 800eeba:	4293      	cmp	r3, r2
 800eebc:	d004      	beq.n	800eec8 <HAL_TIM_Base_Start_IT+0x80>
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	4a18      	ldr	r2, [pc, #96]	@ (800ef24 <HAL_TIM_Base_Start_IT+0xdc>)
 800eec4:	4293      	cmp	r3, r2
 800eec6:	d111      	bne.n	800eeec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	689b      	ldr	r3, [r3, #8]
 800eece:	f003 0307 	and.w	r3, r3, #7
 800eed2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	2b06      	cmp	r3, #6
 800eed8:	d010      	beq.n	800eefc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	681a      	ldr	r2, [r3, #0]
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	f042 0201 	orr.w	r2, r2, #1
 800eee8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eeea:	e007      	b.n	800eefc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	681a      	ldr	r2, [r3, #0]
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	f042 0201 	orr.w	r2, r2, #1
 800eefa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800eefc:	2300      	movs	r3, #0
}
 800eefe:	4618      	mov	r0, r3
 800ef00:	3714      	adds	r7, #20
 800ef02:	46bd      	mov	sp, r7
 800ef04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef08:	4770      	bx	lr
 800ef0a:	bf00      	nop
 800ef0c:	40010000 	.word	0x40010000
 800ef10:	40000400 	.word	0x40000400
 800ef14:	40000800 	.word	0x40000800
 800ef18:	40000c00 	.word	0x40000c00
 800ef1c:	40010400 	.word	0x40010400
 800ef20:	40014000 	.word	0x40014000
 800ef24:	40001800 	.word	0x40001800

0800ef28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b084      	sub	sp, #16
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	68db      	ldr	r3, [r3, #12]
 800ef36:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	691b      	ldr	r3, [r3, #16]
 800ef3e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ef40:	68bb      	ldr	r3, [r7, #8]
 800ef42:	f003 0302 	and.w	r3, r3, #2
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d020      	beq.n	800ef8c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	f003 0302 	and.w	r3, r3, #2
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d01b      	beq.n	800ef8c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	f06f 0202 	mvn.w	r2, #2
 800ef5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	2201      	movs	r2, #1
 800ef62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	699b      	ldr	r3, [r3, #24]
 800ef6a:	f003 0303 	and.w	r3, r3, #3
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d003      	beq.n	800ef7a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ef72:	6878      	ldr	r0, [r7, #4]
 800ef74:	f000 f9a3 	bl	800f2be <HAL_TIM_IC_CaptureCallback>
 800ef78:	e005      	b.n	800ef86 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ef7a:	6878      	ldr	r0, [r7, #4]
 800ef7c:	f000 f995 	bl	800f2aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ef80:	6878      	ldr	r0, [r7, #4]
 800ef82:	f000 f9a6 	bl	800f2d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	2200      	movs	r2, #0
 800ef8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ef8c:	68bb      	ldr	r3, [r7, #8]
 800ef8e:	f003 0304 	and.w	r3, r3, #4
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d020      	beq.n	800efd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	f003 0304 	and.w	r3, r3, #4
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d01b      	beq.n	800efd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	f06f 0204 	mvn.w	r2, #4
 800efa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	2202      	movs	r2, #2
 800efae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	699b      	ldr	r3, [r3, #24]
 800efb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d003      	beq.n	800efc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800efbe:	6878      	ldr	r0, [r7, #4]
 800efc0:	f000 f97d 	bl	800f2be <HAL_TIM_IC_CaptureCallback>
 800efc4:	e005      	b.n	800efd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800efc6:	6878      	ldr	r0, [r7, #4]
 800efc8:	f000 f96f 	bl	800f2aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800efcc:	6878      	ldr	r0, [r7, #4]
 800efce:	f000 f980 	bl	800f2d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	2200      	movs	r2, #0
 800efd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800efd8:	68bb      	ldr	r3, [r7, #8]
 800efda:	f003 0308 	and.w	r3, r3, #8
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d020      	beq.n	800f024 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	f003 0308 	and.w	r3, r3, #8
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d01b      	beq.n	800f024 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	f06f 0208 	mvn.w	r2, #8
 800eff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	2204      	movs	r2, #4
 800effa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	69db      	ldr	r3, [r3, #28]
 800f002:	f003 0303 	and.w	r3, r3, #3
 800f006:	2b00      	cmp	r3, #0
 800f008:	d003      	beq.n	800f012 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f00a:	6878      	ldr	r0, [r7, #4]
 800f00c:	f000 f957 	bl	800f2be <HAL_TIM_IC_CaptureCallback>
 800f010:	e005      	b.n	800f01e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f012:	6878      	ldr	r0, [r7, #4]
 800f014:	f000 f949 	bl	800f2aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f018:	6878      	ldr	r0, [r7, #4]
 800f01a:	f000 f95a 	bl	800f2d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	2200      	movs	r2, #0
 800f022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800f024:	68bb      	ldr	r3, [r7, #8]
 800f026:	f003 0310 	and.w	r3, r3, #16
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d020      	beq.n	800f070 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	f003 0310 	and.w	r3, r3, #16
 800f034:	2b00      	cmp	r3, #0
 800f036:	d01b      	beq.n	800f070 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	f06f 0210 	mvn.w	r2, #16
 800f040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	2208      	movs	r2, #8
 800f046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	69db      	ldr	r3, [r3, #28]
 800f04e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f052:	2b00      	cmp	r3, #0
 800f054:	d003      	beq.n	800f05e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f056:	6878      	ldr	r0, [r7, #4]
 800f058:	f000 f931 	bl	800f2be <HAL_TIM_IC_CaptureCallback>
 800f05c:	e005      	b.n	800f06a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f05e:	6878      	ldr	r0, [r7, #4]
 800f060:	f000 f923 	bl	800f2aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f064:	6878      	ldr	r0, [r7, #4]
 800f066:	f000 f934 	bl	800f2d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	2200      	movs	r2, #0
 800f06e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800f070:	68bb      	ldr	r3, [r7, #8]
 800f072:	f003 0301 	and.w	r3, r3, #1
 800f076:	2b00      	cmp	r3, #0
 800f078:	d00c      	beq.n	800f094 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	f003 0301 	and.w	r3, r3, #1
 800f080:	2b00      	cmp	r3, #0
 800f082:	d007      	beq.n	800f094 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	f06f 0201 	mvn.w	r2, #1
 800f08c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f08e:	6878      	ldr	r0, [r7, #4]
 800f090:	f000 f901 	bl	800f296 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800f094:	68bb      	ldr	r3, [r7, #8]
 800f096:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d00c      	beq.n	800f0b8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d007      	beq.n	800f0b8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800f0b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f0b2:	6878      	ldr	r0, [r7, #4]
 800f0b4:	f000 faee 	bl	800f694 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800f0b8:	68bb      	ldr	r3, [r7, #8]
 800f0ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d00c      	beq.n	800f0dc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d007      	beq.n	800f0dc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800f0d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f0d6:	6878      	ldr	r0, [r7, #4]
 800f0d8:	f000 f905 	bl	800f2e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800f0dc:	68bb      	ldr	r3, [r7, #8]
 800f0de:	f003 0320 	and.w	r3, r3, #32
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d00c      	beq.n	800f100 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	f003 0320 	and.w	r3, r3, #32
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d007      	beq.n	800f100 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	f06f 0220 	mvn.w	r2, #32
 800f0f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f0fa:	6878      	ldr	r0, [r7, #4]
 800f0fc:	f000 fac0 	bl	800f680 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f100:	bf00      	nop
 800f102:	3710      	adds	r7, #16
 800f104:	46bd      	mov	sp, r7
 800f106:	bd80      	pop	{r7, pc}

0800f108 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f108:	b580      	push	{r7, lr}
 800f10a:	b084      	sub	sp, #16
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	6078      	str	r0, [r7, #4]
 800f110:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f112:	2300      	movs	r3, #0
 800f114:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f11c:	2b01      	cmp	r3, #1
 800f11e:	d101      	bne.n	800f124 <HAL_TIM_ConfigClockSource+0x1c>
 800f120:	2302      	movs	r3, #2
 800f122:	e0b4      	b.n	800f28e <HAL_TIM_ConfigClockSource+0x186>
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	2201      	movs	r2, #1
 800f128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	2202      	movs	r2, #2
 800f130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	689b      	ldr	r3, [r3, #8]
 800f13a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f13c:	68bb      	ldr	r3, [r7, #8]
 800f13e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800f142:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f144:	68bb      	ldr	r3, [r7, #8]
 800f146:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f14a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	68ba      	ldr	r2, [r7, #8]
 800f152:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f154:	683b      	ldr	r3, [r7, #0]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f15c:	d03e      	beq.n	800f1dc <HAL_TIM_ConfigClockSource+0xd4>
 800f15e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f162:	f200 8087 	bhi.w	800f274 <HAL_TIM_ConfigClockSource+0x16c>
 800f166:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f16a:	f000 8086 	beq.w	800f27a <HAL_TIM_ConfigClockSource+0x172>
 800f16e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f172:	d87f      	bhi.n	800f274 <HAL_TIM_ConfigClockSource+0x16c>
 800f174:	2b70      	cmp	r3, #112	@ 0x70
 800f176:	d01a      	beq.n	800f1ae <HAL_TIM_ConfigClockSource+0xa6>
 800f178:	2b70      	cmp	r3, #112	@ 0x70
 800f17a:	d87b      	bhi.n	800f274 <HAL_TIM_ConfigClockSource+0x16c>
 800f17c:	2b60      	cmp	r3, #96	@ 0x60
 800f17e:	d050      	beq.n	800f222 <HAL_TIM_ConfigClockSource+0x11a>
 800f180:	2b60      	cmp	r3, #96	@ 0x60
 800f182:	d877      	bhi.n	800f274 <HAL_TIM_ConfigClockSource+0x16c>
 800f184:	2b50      	cmp	r3, #80	@ 0x50
 800f186:	d03c      	beq.n	800f202 <HAL_TIM_ConfigClockSource+0xfa>
 800f188:	2b50      	cmp	r3, #80	@ 0x50
 800f18a:	d873      	bhi.n	800f274 <HAL_TIM_ConfigClockSource+0x16c>
 800f18c:	2b40      	cmp	r3, #64	@ 0x40
 800f18e:	d058      	beq.n	800f242 <HAL_TIM_ConfigClockSource+0x13a>
 800f190:	2b40      	cmp	r3, #64	@ 0x40
 800f192:	d86f      	bhi.n	800f274 <HAL_TIM_ConfigClockSource+0x16c>
 800f194:	2b30      	cmp	r3, #48	@ 0x30
 800f196:	d064      	beq.n	800f262 <HAL_TIM_ConfigClockSource+0x15a>
 800f198:	2b30      	cmp	r3, #48	@ 0x30
 800f19a:	d86b      	bhi.n	800f274 <HAL_TIM_ConfigClockSource+0x16c>
 800f19c:	2b20      	cmp	r3, #32
 800f19e:	d060      	beq.n	800f262 <HAL_TIM_ConfigClockSource+0x15a>
 800f1a0:	2b20      	cmp	r3, #32
 800f1a2:	d867      	bhi.n	800f274 <HAL_TIM_ConfigClockSource+0x16c>
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d05c      	beq.n	800f262 <HAL_TIM_ConfigClockSource+0x15a>
 800f1a8:	2b10      	cmp	r3, #16
 800f1aa:	d05a      	beq.n	800f262 <HAL_TIM_ConfigClockSource+0x15a>
 800f1ac:	e062      	b.n	800f274 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f1b2:	683b      	ldr	r3, [r7, #0]
 800f1b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f1b6:	683b      	ldr	r3, [r7, #0]
 800f1b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f1ba:	683b      	ldr	r3, [r7, #0]
 800f1bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f1be:	f000 f9c3 	bl	800f548 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	689b      	ldr	r3, [r3, #8]
 800f1c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f1ca:	68bb      	ldr	r3, [r7, #8]
 800f1cc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800f1d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	68ba      	ldr	r2, [r7, #8]
 800f1d8:	609a      	str	r2, [r3, #8]
      break;
 800f1da:	e04f      	b.n	800f27c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f1e0:	683b      	ldr	r3, [r7, #0]
 800f1e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f1e4:	683b      	ldr	r3, [r7, #0]
 800f1e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f1e8:	683b      	ldr	r3, [r7, #0]
 800f1ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f1ec:	f000 f9ac 	bl	800f548 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	689a      	ldr	r2, [r3, #8]
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f1fe:	609a      	str	r2, [r3, #8]
      break;
 800f200:	e03c      	b.n	800f27c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f206:	683b      	ldr	r3, [r7, #0]
 800f208:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f20a:	683b      	ldr	r3, [r7, #0]
 800f20c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f20e:	461a      	mov	r2, r3
 800f210:	f000 f920 	bl	800f454 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	2150      	movs	r1, #80	@ 0x50
 800f21a:	4618      	mov	r0, r3
 800f21c:	f000 f979 	bl	800f512 <TIM_ITRx_SetConfig>
      break;
 800f220:	e02c      	b.n	800f27c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f226:	683b      	ldr	r3, [r7, #0]
 800f228:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f22a:	683b      	ldr	r3, [r7, #0]
 800f22c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f22e:	461a      	mov	r2, r3
 800f230:	f000 f93f 	bl	800f4b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	2160      	movs	r1, #96	@ 0x60
 800f23a:	4618      	mov	r0, r3
 800f23c:	f000 f969 	bl	800f512 <TIM_ITRx_SetConfig>
      break;
 800f240:	e01c      	b.n	800f27c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f246:	683b      	ldr	r3, [r7, #0]
 800f248:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f24a:	683b      	ldr	r3, [r7, #0]
 800f24c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f24e:	461a      	mov	r2, r3
 800f250:	f000 f900 	bl	800f454 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	2140      	movs	r1, #64	@ 0x40
 800f25a:	4618      	mov	r0, r3
 800f25c:	f000 f959 	bl	800f512 <TIM_ITRx_SetConfig>
      break;
 800f260:	e00c      	b.n	800f27c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	681a      	ldr	r2, [r3, #0]
 800f266:	683b      	ldr	r3, [r7, #0]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	4619      	mov	r1, r3
 800f26c:	4610      	mov	r0, r2
 800f26e:	f000 f950 	bl	800f512 <TIM_ITRx_SetConfig>
      break;
 800f272:	e003      	b.n	800f27c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800f274:	2301      	movs	r3, #1
 800f276:	73fb      	strb	r3, [r7, #15]
      break;
 800f278:	e000      	b.n	800f27c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800f27a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	2201      	movs	r2, #1
 800f280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	2200      	movs	r2, #0
 800f288:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f28c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f28e:	4618      	mov	r0, r3
 800f290:	3710      	adds	r7, #16
 800f292:	46bd      	mov	sp, r7
 800f294:	bd80      	pop	{r7, pc}

0800f296 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f296:	b480      	push	{r7}
 800f298:	b083      	sub	sp, #12
 800f29a:	af00      	add	r7, sp, #0
 800f29c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800f29e:	bf00      	nop
 800f2a0:	370c      	adds	r7, #12
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a8:	4770      	bx	lr

0800f2aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f2aa:	b480      	push	{r7}
 800f2ac:	b083      	sub	sp, #12
 800f2ae:	af00      	add	r7, sp, #0
 800f2b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f2b2:	bf00      	nop
 800f2b4:	370c      	adds	r7, #12
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2bc:	4770      	bx	lr

0800f2be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f2be:	b480      	push	{r7}
 800f2c0:	b083      	sub	sp, #12
 800f2c2:	af00      	add	r7, sp, #0
 800f2c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f2c6:	bf00      	nop
 800f2c8:	370c      	adds	r7, #12
 800f2ca:	46bd      	mov	sp, r7
 800f2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d0:	4770      	bx	lr

0800f2d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f2d2:	b480      	push	{r7}
 800f2d4:	b083      	sub	sp, #12
 800f2d6:	af00      	add	r7, sp, #0
 800f2d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f2da:	bf00      	nop
 800f2dc:	370c      	adds	r7, #12
 800f2de:	46bd      	mov	sp, r7
 800f2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e4:	4770      	bx	lr

0800f2e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f2e6:	b480      	push	{r7}
 800f2e8:	b083      	sub	sp, #12
 800f2ea:	af00      	add	r7, sp, #0
 800f2ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f2ee:	bf00      	nop
 800f2f0:	370c      	adds	r7, #12
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f8:	4770      	bx	lr
	...

0800f2fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f2fc:	b480      	push	{r7}
 800f2fe:	b085      	sub	sp, #20
 800f300:	af00      	add	r7, sp, #0
 800f302:	6078      	str	r0, [r7, #4]
 800f304:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	4a46      	ldr	r2, [pc, #280]	@ (800f428 <TIM_Base_SetConfig+0x12c>)
 800f310:	4293      	cmp	r3, r2
 800f312:	d013      	beq.n	800f33c <TIM_Base_SetConfig+0x40>
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f31a:	d00f      	beq.n	800f33c <TIM_Base_SetConfig+0x40>
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	4a43      	ldr	r2, [pc, #268]	@ (800f42c <TIM_Base_SetConfig+0x130>)
 800f320:	4293      	cmp	r3, r2
 800f322:	d00b      	beq.n	800f33c <TIM_Base_SetConfig+0x40>
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	4a42      	ldr	r2, [pc, #264]	@ (800f430 <TIM_Base_SetConfig+0x134>)
 800f328:	4293      	cmp	r3, r2
 800f32a:	d007      	beq.n	800f33c <TIM_Base_SetConfig+0x40>
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	4a41      	ldr	r2, [pc, #260]	@ (800f434 <TIM_Base_SetConfig+0x138>)
 800f330:	4293      	cmp	r3, r2
 800f332:	d003      	beq.n	800f33c <TIM_Base_SetConfig+0x40>
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	4a40      	ldr	r2, [pc, #256]	@ (800f438 <TIM_Base_SetConfig+0x13c>)
 800f338:	4293      	cmp	r3, r2
 800f33a:	d108      	bne.n	800f34e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f342:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f344:	683b      	ldr	r3, [r7, #0]
 800f346:	685b      	ldr	r3, [r3, #4]
 800f348:	68fa      	ldr	r2, [r7, #12]
 800f34a:	4313      	orrs	r3, r2
 800f34c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	4a35      	ldr	r2, [pc, #212]	@ (800f428 <TIM_Base_SetConfig+0x12c>)
 800f352:	4293      	cmp	r3, r2
 800f354:	d02b      	beq.n	800f3ae <TIM_Base_SetConfig+0xb2>
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f35c:	d027      	beq.n	800f3ae <TIM_Base_SetConfig+0xb2>
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	4a32      	ldr	r2, [pc, #200]	@ (800f42c <TIM_Base_SetConfig+0x130>)
 800f362:	4293      	cmp	r3, r2
 800f364:	d023      	beq.n	800f3ae <TIM_Base_SetConfig+0xb2>
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	4a31      	ldr	r2, [pc, #196]	@ (800f430 <TIM_Base_SetConfig+0x134>)
 800f36a:	4293      	cmp	r3, r2
 800f36c:	d01f      	beq.n	800f3ae <TIM_Base_SetConfig+0xb2>
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	4a30      	ldr	r2, [pc, #192]	@ (800f434 <TIM_Base_SetConfig+0x138>)
 800f372:	4293      	cmp	r3, r2
 800f374:	d01b      	beq.n	800f3ae <TIM_Base_SetConfig+0xb2>
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	4a2f      	ldr	r2, [pc, #188]	@ (800f438 <TIM_Base_SetConfig+0x13c>)
 800f37a:	4293      	cmp	r3, r2
 800f37c:	d017      	beq.n	800f3ae <TIM_Base_SetConfig+0xb2>
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	4a2e      	ldr	r2, [pc, #184]	@ (800f43c <TIM_Base_SetConfig+0x140>)
 800f382:	4293      	cmp	r3, r2
 800f384:	d013      	beq.n	800f3ae <TIM_Base_SetConfig+0xb2>
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	4a2d      	ldr	r2, [pc, #180]	@ (800f440 <TIM_Base_SetConfig+0x144>)
 800f38a:	4293      	cmp	r3, r2
 800f38c:	d00f      	beq.n	800f3ae <TIM_Base_SetConfig+0xb2>
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	4a2c      	ldr	r2, [pc, #176]	@ (800f444 <TIM_Base_SetConfig+0x148>)
 800f392:	4293      	cmp	r3, r2
 800f394:	d00b      	beq.n	800f3ae <TIM_Base_SetConfig+0xb2>
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	4a2b      	ldr	r2, [pc, #172]	@ (800f448 <TIM_Base_SetConfig+0x14c>)
 800f39a:	4293      	cmp	r3, r2
 800f39c:	d007      	beq.n	800f3ae <TIM_Base_SetConfig+0xb2>
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	4a2a      	ldr	r2, [pc, #168]	@ (800f44c <TIM_Base_SetConfig+0x150>)
 800f3a2:	4293      	cmp	r3, r2
 800f3a4:	d003      	beq.n	800f3ae <TIM_Base_SetConfig+0xb2>
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	4a29      	ldr	r2, [pc, #164]	@ (800f450 <TIM_Base_SetConfig+0x154>)
 800f3aa:	4293      	cmp	r3, r2
 800f3ac:	d108      	bne.n	800f3c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f3b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f3b6:	683b      	ldr	r3, [r7, #0]
 800f3b8:	68db      	ldr	r3, [r3, #12]
 800f3ba:	68fa      	ldr	r2, [r7, #12]
 800f3bc:	4313      	orrs	r3, r2
 800f3be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800f3c6:	683b      	ldr	r3, [r7, #0]
 800f3c8:	695b      	ldr	r3, [r3, #20]
 800f3ca:	4313      	orrs	r3, r2
 800f3cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	68fa      	ldr	r2, [r7, #12]
 800f3d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f3d4:	683b      	ldr	r3, [r7, #0]
 800f3d6:	689a      	ldr	r2, [r3, #8]
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f3dc:	683b      	ldr	r3, [r7, #0]
 800f3de:	681a      	ldr	r2, [r3, #0]
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	4a10      	ldr	r2, [pc, #64]	@ (800f428 <TIM_Base_SetConfig+0x12c>)
 800f3e8:	4293      	cmp	r3, r2
 800f3ea:	d003      	beq.n	800f3f4 <TIM_Base_SetConfig+0xf8>
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	4a12      	ldr	r2, [pc, #72]	@ (800f438 <TIM_Base_SetConfig+0x13c>)
 800f3f0:	4293      	cmp	r3, r2
 800f3f2:	d103      	bne.n	800f3fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f3f4:	683b      	ldr	r3, [r7, #0]
 800f3f6:	691a      	ldr	r2, [r3, #16]
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	2201      	movs	r2, #1
 800f400:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	691b      	ldr	r3, [r3, #16]
 800f406:	f003 0301 	and.w	r3, r3, #1
 800f40a:	2b01      	cmp	r3, #1
 800f40c:	d105      	bne.n	800f41a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	691b      	ldr	r3, [r3, #16]
 800f412:	f023 0201 	bic.w	r2, r3, #1
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	611a      	str	r2, [r3, #16]
  }
}
 800f41a:	bf00      	nop
 800f41c:	3714      	adds	r7, #20
 800f41e:	46bd      	mov	sp, r7
 800f420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f424:	4770      	bx	lr
 800f426:	bf00      	nop
 800f428:	40010000 	.word	0x40010000
 800f42c:	40000400 	.word	0x40000400
 800f430:	40000800 	.word	0x40000800
 800f434:	40000c00 	.word	0x40000c00
 800f438:	40010400 	.word	0x40010400
 800f43c:	40014000 	.word	0x40014000
 800f440:	40014400 	.word	0x40014400
 800f444:	40014800 	.word	0x40014800
 800f448:	40001800 	.word	0x40001800
 800f44c:	40001c00 	.word	0x40001c00
 800f450:	40002000 	.word	0x40002000

0800f454 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f454:	b480      	push	{r7}
 800f456:	b087      	sub	sp, #28
 800f458:	af00      	add	r7, sp, #0
 800f45a:	60f8      	str	r0, [r7, #12]
 800f45c:	60b9      	str	r1, [r7, #8]
 800f45e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	6a1b      	ldr	r3, [r3, #32]
 800f464:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	6a1b      	ldr	r3, [r3, #32]
 800f46a:	f023 0201 	bic.w	r2, r3, #1
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	699b      	ldr	r3, [r3, #24]
 800f476:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f478:	693b      	ldr	r3, [r7, #16]
 800f47a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f47e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	011b      	lsls	r3, r3, #4
 800f484:	693a      	ldr	r2, [r7, #16]
 800f486:	4313      	orrs	r3, r2
 800f488:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f48a:	697b      	ldr	r3, [r7, #20]
 800f48c:	f023 030a 	bic.w	r3, r3, #10
 800f490:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f492:	697a      	ldr	r2, [r7, #20]
 800f494:	68bb      	ldr	r3, [r7, #8]
 800f496:	4313      	orrs	r3, r2
 800f498:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	693a      	ldr	r2, [r7, #16]
 800f49e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	697a      	ldr	r2, [r7, #20]
 800f4a4:	621a      	str	r2, [r3, #32]
}
 800f4a6:	bf00      	nop
 800f4a8:	371c      	adds	r7, #28
 800f4aa:	46bd      	mov	sp, r7
 800f4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b0:	4770      	bx	lr

0800f4b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f4b2:	b480      	push	{r7}
 800f4b4:	b087      	sub	sp, #28
 800f4b6:	af00      	add	r7, sp, #0
 800f4b8:	60f8      	str	r0, [r7, #12]
 800f4ba:	60b9      	str	r1, [r7, #8]
 800f4bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	6a1b      	ldr	r3, [r3, #32]
 800f4c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	6a1b      	ldr	r3, [r3, #32]
 800f4c8:	f023 0210 	bic.w	r2, r3, #16
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	699b      	ldr	r3, [r3, #24]
 800f4d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f4d6:	693b      	ldr	r3, [r7, #16]
 800f4d8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f4dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	031b      	lsls	r3, r3, #12
 800f4e2:	693a      	ldr	r2, [r7, #16]
 800f4e4:	4313      	orrs	r3, r2
 800f4e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f4e8:	697b      	ldr	r3, [r7, #20]
 800f4ea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800f4ee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f4f0:	68bb      	ldr	r3, [r7, #8]
 800f4f2:	011b      	lsls	r3, r3, #4
 800f4f4:	697a      	ldr	r2, [r7, #20]
 800f4f6:	4313      	orrs	r3, r2
 800f4f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	693a      	ldr	r2, [r7, #16]
 800f4fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	697a      	ldr	r2, [r7, #20]
 800f504:	621a      	str	r2, [r3, #32]
}
 800f506:	bf00      	nop
 800f508:	371c      	adds	r7, #28
 800f50a:	46bd      	mov	sp, r7
 800f50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f510:	4770      	bx	lr

0800f512 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f512:	b480      	push	{r7}
 800f514:	b085      	sub	sp, #20
 800f516:	af00      	add	r7, sp, #0
 800f518:	6078      	str	r0, [r7, #4]
 800f51a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	689b      	ldr	r3, [r3, #8]
 800f520:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f528:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f52a:	683a      	ldr	r2, [r7, #0]
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	4313      	orrs	r3, r2
 800f530:	f043 0307 	orr.w	r3, r3, #7
 800f534:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	68fa      	ldr	r2, [r7, #12]
 800f53a:	609a      	str	r2, [r3, #8]
}
 800f53c:	bf00      	nop
 800f53e:	3714      	adds	r7, #20
 800f540:	46bd      	mov	sp, r7
 800f542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f546:	4770      	bx	lr

0800f548 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f548:	b480      	push	{r7}
 800f54a:	b087      	sub	sp, #28
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	60f8      	str	r0, [r7, #12]
 800f550:	60b9      	str	r1, [r7, #8]
 800f552:	607a      	str	r2, [r7, #4]
 800f554:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	689b      	ldr	r3, [r3, #8]
 800f55a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f55c:	697b      	ldr	r3, [r7, #20]
 800f55e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f562:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f564:	683b      	ldr	r3, [r7, #0]
 800f566:	021a      	lsls	r2, r3, #8
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	431a      	orrs	r2, r3
 800f56c:	68bb      	ldr	r3, [r7, #8]
 800f56e:	4313      	orrs	r3, r2
 800f570:	697a      	ldr	r2, [r7, #20]
 800f572:	4313      	orrs	r3, r2
 800f574:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	697a      	ldr	r2, [r7, #20]
 800f57a:	609a      	str	r2, [r3, #8]
}
 800f57c:	bf00      	nop
 800f57e:	371c      	adds	r7, #28
 800f580:	46bd      	mov	sp, r7
 800f582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f586:	4770      	bx	lr

0800f588 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f588:	b480      	push	{r7}
 800f58a:	b085      	sub	sp, #20
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	6078      	str	r0, [r7, #4]
 800f590:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f598:	2b01      	cmp	r3, #1
 800f59a:	d101      	bne.n	800f5a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f59c:	2302      	movs	r3, #2
 800f59e:	e05a      	b.n	800f656 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	2201      	movs	r2, #1
 800f5a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	2202      	movs	r2, #2
 800f5ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	685b      	ldr	r3, [r3, #4]
 800f5b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	689b      	ldr	r3, [r3, #8]
 800f5be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f5c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f5c8:	683b      	ldr	r3, [r7, #0]
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	68fa      	ldr	r2, [r7, #12]
 800f5ce:	4313      	orrs	r3, r2
 800f5d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	68fa      	ldr	r2, [r7, #12]
 800f5d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	4a21      	ldr	r2, [pc, #132]	@ (800f664 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800f5e0:	4293      	cmp	r3, r2
 800f5e2:	d022      	beq.n	800f62a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f5ec:	d01d      	beq.n	800f62a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	4a1d      	ldr	r2, [pc, #116]	@ (800f668 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800f5f4:	4293      	cmp	r3, r2
 800f5f6:	d018      	beq.n	800f62a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	4a1b      	ldr	r2, [pc, #108]	@ (800f66c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800f5fe:	4293      	cmp	r3, r2
 800f600:	d013      	beq.n	800f62a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	4a1a      	ldr	r2, [pc, #104]	@ (800f670 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800f608:	4293      	cmp	r3, r2
 800f60a:	d00e      	beq.n	800f62a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	4a18      	ldr	r2, [pc, #96]	@ (800f674 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800f612:	4293      	cmp	r3, r2
 800f614:	d009      	beq.n	800f62a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	4a17      	ldr	r2, [pc, #92]	@ (800f678 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800f61c:	4293      	cmp	r3, r2
 800f61e:	d004      	beq.n	800f62a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	4a15      	ldr	r2, [pc, #84]	@ (800f67c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800f626:	4293      	cmp	r3, r2
 800f628:	d10c      	bne.n	800f644 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f62a:	68bb      	ldr	r3, [r7, #8]
 800f62c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f630:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f632:	683b      	ldr	r3, [r7, #0]
 800f634:	685b      	ldr	r3, [r3, #4]
 800f636:	68ba      	ldr	r2, [r7, #8]
 800f638:	4313      	orrs	r3, r2
 800f63a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	68ba      	ldr	r2, [r7, #8]
 800f642:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	2201      	movs	r2, #1
 800f648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	2200      	movs	r2, #0
 800f650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f654:	2300      	movs	r3, #0
}
 800f656:	4618      	mov	r0, r3
 800f658:	3714      	adds	r7, #20
 800f65a:	46bd      	mov	sp, r7
 800f65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f660:	4770      	bx	lr
 800f662:	bf00      	nop
 800f664:	40010000 	.word	0x40010000
 800f668:	40000400 	.word	0x40000400
 800f66c:	40000800 	.word	0x40000800
 800f670:	40000c00 	.word	0x40000c00
 800f674:	40010400 	.word	0x40010400
 800f678:	40014000 	.word	0x40014000
 800f67c:	40001800 	.word	0x40001800

0800f680 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f680:	b480      	push	{r7}
 800f682:	b083      	sub	sp, #12
 800f684:	af00      	add	r7, sp, #0
 800f686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f688:	bf00      	nop
 800f68a:	370c      	adds	r7, #12
 800f68c:	46bd      	mov	sp, r7
 800f68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f692:	4770      	bx	lr

0800f694 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f694:	b480      	push	{r7}
 800f696:	b083      	sub	sp, #12
 800f698:	af00      	add	r7, sp, #0
 800f69a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f69c:	bf00      	nop
 800f69e:	370c      	adds	r7, #12
 800f6a0:	46bd      	mov	sp, r7
 800f6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a6:	4770      	bx	lr

0800f6a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f6a8:	b580      	push	{r7, lr}
 800f6aa:	b082      	sub	sp, #8
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d101      	bne.n	800f6ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f6b6:	2301      	movs	r3, #1
 800f6b8:	e042      	b.n	800f740 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f6c0:	b2db      	uxtb	r3, r3
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d106      	bne.n	800f6d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	2200      	movs	r2, #0
 800f6ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f6ce:	6878      	ldr	r0, [r7, #4]
 800f6d0:	f7fb fbc0 	bl	800ae54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	2224      	movs	r2, #36	@ 0x24
 800f6d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	68da      	ldr	r2, [r3, #12]
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800f6ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800f6ec:	6878      	ldr	r0, [r7, #4]
 800f6ee:	f000 fd5f 	bl	80101b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	691a      	ldr	r2, [r3, #16]
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f700:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	695a      	ldr	r2, [r3, #20]
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f710:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	68da      	ldr	r2, [r3, #12]
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800f720:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	2200      	movs	r2, #0
 800f726:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	2220      	movs	r2, #32
 800f72c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	2220      	movs	r2, #32
 800f734:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	2200      	movs	r2, #0
 800f73c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800f73e:	2300      	movs	r3, #0
}
 800f740:	4618      	mov	r0, r3
 800f742:	3708      	adds	r7, #8
 800f744:	46bd      	mov	sp, r7
 800f746:	bd80      	pop	{r7, pc}

0800f748 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f748:	b580      	push	{r7, lr}
 800f74a:	b08a      	sub	sp, #40	@ 0x28
 800f74c:	af02      	add	r7, sp, #8
 800f74e:	60f8      	str	r0, [r7, #12]
 800f750:	60b9      	str	r1, [r7, #8]
 800f752:	603b      	str	r3, [r7, #0]
 800f754:	4613      	mov	r3, r2
 800f756:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800f758:	2300      	movs	r3, #0
 800f75a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f762:	b2db      	uxtb	r3, r3
 800f764:	2b20      	cmp	r3, #32
 800f766:	d175      	bne.n	800f854 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800f768:	68bb      	ldr	r3, [r7, #8]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d002      	beq.n	800f774 <HAL_UART_Transmit+0x2c>
 800f76e:	88fb      	ldrh	r3, [r7, #6]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d101      	bne.n	800f778 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800f774:	2301      	movs	r3, #1
 800f776:	e06e      	b.n	800f856 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	2200      	movs	r2, #0
 800f77c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	2221      	movs	r2, #33	@ 0x21
 800f782:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f786:	f7fd fe39 	bl	800d3fc <HAL_GetTick>
 800f78a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	88fa      	ldrh	r2, [r7, #6]
 800f790:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	88fa      	ldrh	r2, [r7, #6]
 800f796:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	689b      	ldr	r3, [r3, #8]
 800f79c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f7a0:	d108      	bne.n	800f7b4 <HAL_UART_Transmit+0x6c>
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	691b      	ldr	r3, [r3, #16]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d104      	bne.n	800f7b4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f7ae:	68bb      	ldr	r3, [r7, #8]
 800f7b0:	61bb      	str	r3, [r7, #24]
 800f7b2:	e003      	b.n	800f7bc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800f7b4:	68bb      	ldr	r3, [r7, #8]
 800f7b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f7b8:	2300      	movs	r3, #0
 800f7ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800f7bc:	e02e      	b.n	800f81c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f7be:	683b      	ldr	r3, [r7, #0]
 800f7c0:	9300      	str	r3, [sp, #0]
 800f7c2:	697b      	ldr	r3, [r7, #20]
 800f7c4:	2200      	movs	r2, #0
 800f7c6:	2180      	movs	r1, #128	@ 0x80
 800f7c8:	68f8      	ldr	r0, [r7, #12]
 800f7ca:	f000 fafb 	bl	800fdc4 <UART_WaitOnFlagUntilTimeout>
 800f7ce:	4603      	mov	r3, r0
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d005      	beq.n	800f7e0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	2220      	movs	r2, #32
 800f7d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800f7dc:	2303      	movs	r3, #3
 800f7de:	e03a      	b.n	800f856 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800f7e0:	69fb      	ldr	r3, [r7, #28]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d10b      	bne.n	800f7fe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f7e6:	69bb      	ldr	r3, [r7, #24]
 800f7e8:	881b      	ldrh	r3, [r3, #0]
 800f7ea:	461a      	mov	r2, r3
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f7f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800f7f6:	69bb      	ldr	r3, [r7, #24]
 800f7f8:	3302      	adds	r3, #2
 800f7fa:	61bb      	str	r3, [r7, #24]
 800f7fc:	e007      	b.n	800f80e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800f7fe:	69fb      	ldr	r3, [r7, #28]
 800f800:	781a      	ldrb	r2, [r3, #0]
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800f808:	69fb      	ldr	r3, [r7, #28]
 800f80a:	3301      	adds	r3, #1
 800f80c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800f812:	b29b      	uxth	r3, r3
 800f814:	3b01      	subs	r3, #1
 800f816:	b29a      	uxth	r2, r3
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800f820:	b29b      	uxth	r3, r3
 800f822:	2b00      	cmp	r3, #0
 800f824:	d1cb      	bne.n	800f7be <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f826:	683b      	ldr	r3, [r7, #0]
 800f828:	9300      	str	r3, [sp, #0]
 800f82a:	697b      	ldr	r3, [r7, #20]
 800f82c:	2200      	movs	r2, #0
 800f82e:	2140      	movs	r1, #64	@ 0x40
 800f830:	68f8      	ldr	r0, [r7, #12]
 800f832:	f000 fac7 	bl	800fdc4 <UART_WaitOnFlagUntilTimeout>
 800f836:	4603      	mov	r3, r0
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d005      	beq.n	800f848 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	2220      	movs	r2, #32
 800f840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800f844:	2303      	movs	r3, #3
 800f846:	e006      	b.n	800f856 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	2220      	movs	r2, #32
 800f84c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800f850:	2300      	movs	r3, #0
 800f852:	e000      	b.n	800f856 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800f854:	2302      	movs	r3, #2
  }
}
 800f856:	4618      	mov	r0, r3
 800f858:	3720      	adds	r7, #32
 800f85a:	46bd      	mov	sp, r7
 800f85c:	bd80      	pop	{r7, pc}
	...

0800f860 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f860:	b580      	push	{r7, lr}
 800f862:	b0ba      	sub	sp, #232	@ 0xe8
 800f864:	af00      	add	r7, sp, #0
 800f866:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	68db      	ldr	r3, [r3, #12]
 800f878:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	695b      	ldr	r3, [r3, #20]
 800f882:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800f886:	2300      	movs	r3, #0
 800f888:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800f88c:	2300      	movs	r3, #0
 800f88e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800f892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f896:	f003 030f 	and.w	r3, r3, #15
 800f89a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800f89e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d10f      	bne.n	800f8c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800f8a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f8aa:	f003 0320 	and.w	r3, r3, #32
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d009      	beq.n	800f8c6 <HAL_UART_IRQHandler+0x66>
 800f8b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f8b6:	f003 0320 	and.w	r3, r3, #32
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d003      	beq.n	800f8c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800f8be:	6878      	ldr	r0, [r7, #4]
 800f8c0:	f000 fbb8 	bl	8010034 <UART_Receive_IT>
      return;
 800f8c4:	e25b      	b.n	800fd7e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800f8c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	f000 80de 	beq.w	800fa8c <HAL_UART_IRQHandler+0x22c>
 800f8d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f8d4:	f003 0301 	and.w	r3, r3, #1
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d106      	bne.n	800f8ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800f8dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f8e0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	f000 80d1 	beq.w	800fa8c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800f8ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f8ee:	f003 0301 	and.w	r3, r3, #1
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d00b      	beq.n	800f90e <HAL_UART_IRQHandler+0xae>
 800f8f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f8fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d005      	beq.n	800f90e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f906:	f043 0201 	orr.w	r2, r3, #1
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800f90e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f912:	f003 0304 	and.w	r3, r3, #4
 800f916:	2b00      	cmp	r3, #0
 800f918:	d00b      	beq.n	800f932 <HAL_UART_IRQHandler+0xd2>
 800f91a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f91e:	f003 0301 	and.w	r3, r3, #1
 800f922:	2b00      	cmp	r3, #0
 800f924:	d005      	beq.n	800f932 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f92a:	f043 0202 	orr.w	r2, r3, #2
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800f932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f936:	f003 0302 	and.w	r3, r3, #2
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d00b      	beq.n	800f956 <HAL_UART_IRQHandler+0xf6>
 800f93e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f942:	f003 0301 	and.w	r3, r3, #1
 800f946:	2b00      	cmp	r3, #0
 800f948:	d005      	beq.n	800f956 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f94e:	f043 0204 	orr.w	r2, r3, #4
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800f956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f95a:	f003 0308 	and.w	r3, r3, #8
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d011      	beq.n	800f986 <HAL_UART_IRQHandler+0x126>
 800f962:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f966:	f003 0320 	and.w	r3, r3, #32
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d105      	bne.n	800f97a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800f96e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f972:	f003 0301 	and.w	r3, r3, #1
 800f976:	2b00      	cmp	r3, #0
 800f978:	d005      	beq.n	800f986 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f97e:	f043 0208 	orr.w	r2, r3, #8
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	f000 81f2 	beq.w	800fd74 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800f990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f994:	f003 0320 	and.w	r3, r3, #32
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d008      	beq.n	800f9ae <HAL_UART_IRQHandler+0x14e>
 800f99c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f9a0:	f003 0320 	and.w	r3, r3, #32
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d002      	beq.n	800f9ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800f9a8:	6878      	ldr	r0, [r7, #4]
 800f9aa:	f000 fb43 	bl	8010034 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	695b      	ldr	r3, [r3, #20]
 800f9b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f9b8:	2b40      	cmp	r3, #64	@ 0x40
 800f9ba:	bf0c      	ite	eq
 800f9bc:	2301      	moveq	r3, #1
 800f9be:	2300      	movne	r3, #0
 800f9c0:	b2db      	uxtb	r3, r3
 800f9c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f9ca:	f003 0308 	and.w	r3, r3, #8
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d103      	bne.n	800f9da <HAL_UART_IRQHandler+0x17a>
 800f9d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d04f      	beq.n	800fa7a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f9da:	6878      	ldr	r0, [r7, #4]
 800f9dc:	f000 fa4b 	bl	800fe76 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	695b      	ldr	r3, [r3, #20]
 800f9e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f9ea:	2b40      	cmp	r3, #64	@ 0x40
 800f9ec:	d141      	bne.n	800fa72 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	3314      	adds	r3, #20
 800f9f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f9fc:	e853 3f00 	ldrex	r3, [r3]
 800fa00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800fa04:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fa08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fa0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	3314      	adds	r3, #20
 800fa16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800fa1a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800fa1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800fa26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800fa2a:	e841 2300 	strex	r3, r2, [r1]
 800fa2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800fa32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d1d9      	bne.n	800f9ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d013      	beq.n	800fa6a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa46:	4a7e      	ldr	r2, [pc, #504]	@ (800fc40 <HAL_UART_IRQHandler+0x3e0>)
 800fa48:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa4e:	4618      	mov	r0, r3
 800fa50:	f7fd fe85 	bl	800d75e <HAL_DMA_Abort_IT>
 800fa54:	4603      	mov	r3, r0
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d016      	beq.n	800fa88 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fa60:	687a      	ldr	r2, [r7, #4]
 800fa62:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800fa64:	4610      	mov	r0, r2
 800fa66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa68:	e00e      	b.n	800fa88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800fa6a:	6878      	ldr	r0, [r7, #4]
 800fa6c:	f7fb fb0e 	bl	800b08c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa70:	e00a      	b.n	800fa88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fa72:	6878      	ldr	r0, [r7, #4]
 800fa74:	f7fb fb0a 	bl	800b08c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa78:	e006      	b.n	800fa88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800fa7a:	6878      	ldr	r0, [r7, #4]
 800fa7c:	f7fb fb06 	bl	800b08c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	2200      	movs	r2, #0
 800fa84:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800fa86:	e175      	b.n	800fd74 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa88:	bf00      	nop
    return;
 800fa8a:	e173      	b.n	800fd74 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fa90:	2b01      	cmp	r3, #1
 800fa92:	f040 814f 	bne.w	800fd34 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800fa96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fa9a:	f003 0310 	and.w	r3, r3, #16
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	f000 8148 	beq.w	800fd34 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800faa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800faa8:	f003 0310 	and.w	r3, r3, #16
 800faac:	2b00      	cmp	r3, #0
 800faae:	f000 8141 	beq.w	800fd34 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800fab2:	2300      	movs	r3, #0
 800fab4:	60bb      	str	r3, [r7, #8]
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	60bb      	str	r3, [r7, #8]
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	685b      	ldr	r3, [r3, #4]
 800fac4:	60bb      	str	r3, [r7, #8]
 800fac6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	695b      	ldr	r3, [r3, #20]
 800face:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fad2:	2b40      	cmp	r3, #64	@ 0x40
 800fad4:	f040 80b6 	bne.w	800fc44 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	685b      	ldr	r3, [r3, #4]
 800fae0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800fae4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800fae8:	2b00      	cmp	r3, #0
 800faea:	f000 8145 	beq.w	800fd78 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800faf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800faf6:	429a      	cmp	r2, r3
 800faf8:	f080 813e 	bcs.w	800fd78 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800fb02:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fb08:	69db      	ldr	r3, [r3, #28]
 800fb0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fb0e:	f000 8088 	beq.w	800fc22 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	330c      	adds	r3, #12
 800fb18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800fb20:	e853 3f00 	ldrex	r3, [r3]
 800fb24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800fb28:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800fb2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fb30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	330c      	adds	r3, #12
 800fb3a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800fb3e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800fb42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb46:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800fb4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800fb4e:	e841 2300 	strex	r3, r2, [r1]
 800fb52:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800fb56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d1d9      	bne.n	800fb12 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	3314      	adds	r3, #20
 800fb64:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800fb68:	e853 3f00 	ldrex	r3, [r3]
 800fb6c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800fb6e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800fb70:	f023 0301 	bic.w	r3, r3, #1
 800fb74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	3314      	adds	r3, #20
 800fb7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800fb82:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800fb86:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb88:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800fb8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800fb8e:	e841 2300 	strex	r3, r2, [r1]
 800fb92:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800fb94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d1e1      	bne.n	800fb5e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	3314      	adds	r3, #20
 800fba0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fba2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fba4:	e853 3f00 	ldrex	r3, [r3]
 800fba8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800fbaa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fbac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fbb0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	3314      	adds	r3, #20
 800fbba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800fbbe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800fbc0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbc2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800fbc4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800fbc6:	e841 2300 	strex	r3, r2, [r1]
 800fbca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800fbcc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d1e3      	bne.n	800fb9a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	2220      	movs	r2, #32
 800fbd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	2200      	movs	r2, #0
 800fbde:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	330c      	adds	r3, #12
 800fbe6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbe8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fbea:	e853 3f00 	ldrex	r3, [r3]
 800fbee:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800fbf0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fbf2:	f023 0310 	bic.w	r3, r3, #16
 800fbf6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	330c      	adds	r3, #12
 800fc00:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800fc04:	65ba      	str	r2, [r7, #88]	@ 0x58
 800fc06:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc08:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800fc0a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800fc0c:	e841 2300 	strex	r3, r2, [r1]
 800fc10:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800fc12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d1e3      	bne.n	800fbe0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	f7fd fd2e 	bl	800d67e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	2202      	movs	r2, #2
 800fc26:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800fc30:	b29b      	uxth	r3, r3
 800fc32:	1ad3      	subs	r3, r2, r3
 800fc34:	b29b      	uxth	r3, r3
 800fc36:	4619      	mov	r1, r3
 800fc38:	6878      	ldr	r0, [r7, #4]
 800fc3a:	f000 f8b7 	bl	800fdac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800fc3e:	e09b      	b.n	800fd78 <HAL_UART_IRQHandler+0x518>
 800fc40:	0800ff3d 	.word	0x0800ff3d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800fc4c:	b29b      	uxth	r3, r3
 800fc4e:	1ad3      	subs	r3, r2, r3
 800fc50:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800fc58:	b29b      	uxth	r3, r3
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	f000 808e 	beq.w	800fd7c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800fc60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	f000 8089 	beq.w	800fd7c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	330c      	adds	r3, #12
 800fc70:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc74:	e853 3f00 	ldrex	r3, [r3]
 800fc78:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fc7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fc80:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	330c      	adds	r3, #12
 800fc8a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800fc8e:	647a      	str	r2, [r7, #68]	@ 0x44
 800fc90:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc92:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fc94:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fc96:	e841 2300 	strex	r3, r2, [r1]
 800fc9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fc9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d1e3      	bne.n	800fc6a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	3314      	adds	r3, #20
 800fca8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcac:	e853 3f00 	ldrex	r3, [r3]
 800fcb0:	623b      	str	r3, [r7, #32]
   return(result);
 800fcb2:	6a3b      	ldr	r3, [r7, #32]
 800fcb4:	f023 0301 	bic.w	r3, r3, #1
 800fcb8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	3314      	adds	r3, #20
 800fcc2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800fcc6:	633a      	str	r2, [r7, #48]	@ 0x30
 800fcc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fccc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fcce:	e841 2300 	strex	r3, r2, [r1]
 800fcd2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fcd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d1e3      	bne.n	800fca2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	2220      	movs	r2, #32
 800fcde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	2200      	movs	r2, #0
 800fce6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	330c      	adds	r3, #12
 800fcee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcf0:	693b      	ldr	r3, [r7, #16]
 800fcf2:	e853 3f00 	ldrex	r3, [r3]
 800fcf6:	60fb      	str	r3, [r7, #12]
   return(result);
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	f023 0310 	bic.w	r3, r3, #16
 800fcfe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	330c      	adds	r3, #12
 800fd08:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800fd0c:	61fa      	str	r2, [r7, #28]
 800fd0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd10:	69b9      	ldr	r1, [r7, #24]
 800fd12:	69fa      	ldr	r2, [r7, #28]
 800fd14:	e841 2300 	strex	r3, r2, [r1]
 800fd18:	617b      	str	r3, [r7, #20]
   return(result);
 800fd1a:	697b      	ldr	r3, [r7, #20]
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d1e3      	bne.n	800fce8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	2202      	movs	r2, #2
 800fd24:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800fd26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800fd2a:	4619      	mov	r1, r3
 800fd2c:	6878      	ldr	r0, [r7, #4]
 800fd2e:	f000 f83d 	bl	800fdac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800fd32:	e023      	b.n	800fd7c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800fd34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fd38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d009      	beq.n	800fd54 <HAL_UART_IRQHandler+0x4f4>
 800fd40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fd44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d003      	beq.n	800fd54 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800fd4c:	6878      	ldr	r0, [r7, #4]
 800fd4e:	f000 f909 	bl	800ff64 <UART_Transmit_IT>
    return;
 800fd52:	e014      	b.n	800fd7e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800fd54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fd58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d00e      	beq.n	800fd7e <HAL_UART_IRQHandler+0x51e>
 800fd60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fd64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d008      	beq.n	800fd7e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800fd6c:	6878      	ldr	r0, [r7, #4]
 800fd6e:	f000 f949 	bl	8010004 <UART_EndTransmit_IT>
    return;
 800fd72:	e004      	b.n	800fd7e <HAL_UART_IRQHandler+0x51e>
    return;
 800fd74:	bf00      	nop
 800fd76:	e002      	b.n	800fd7e <HAL_UART_IRQHandler+0x51e>
      return;
 800fd78:	bf00      	nop
 800fd7a:	e000      	b.n	800fd7e <HAL_UART_IRQHandler+0x51e>
      return;
 800fd7c:	bf00      	nop
  }
}
 800fd7e:	37e8      	adds	r7, #232	@ 0xe8
 800fd80:	46bd      	mov	sp, r7
 800fd82:	bd80      	pop	{r7, pc}

0800fd84 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800fd84:	b480      	push	{r7}
 800fd86:	b083      	sub	sp, #12
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800fd8c:	bf00      	nop
 800fd8e:	370c      	adds	r7, #12
 800fd90:	46bd      	mov	sp, r7
 800fd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd96:	4770      	bx	lr

0800fd98 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800fd98:	b480      	push	{r7}
 800fd9a:	b083      	sub	sp, #12
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800fda0:	bf00      	nop
 800fda2:	370c      	adds	r7, #12
 800fda4:	46bd      	mov	sp, r7
 800fda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdaa:	4770      	bx	lr

0800fdac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800fdac:	b480      	push	{r7}
 800fdae:	b083      	sub	sp, #12
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	6078      	str	r0, [r7, #4]
 800fdb4:	460b      	mov	r3, r1
 800fdb6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800fdb8:	bf00      	nop
 800fdba:	370c      	adds	r7, #12
 800fdbc:	46bd      	mov	sp, r7
 800fdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc2:	4770      	bx	lr

0800fdc4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800fdc4:	b580      	push	{r7, lr}
 800fdc6:	b086      	sub	sp, #24
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	60f8      	str	r0, [r7, #12]
 800fdcc:	60b9      	str	r1, [r7, #8]
 800fdce:	603b      	str	r3, [r7, #0]
 800fdd0:	4613      	mov	r3, r2
 800fdd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fdd4:	e03b      	b.n	800fe4e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fdd6:	6a3b      	ldr	r3, [r7, #32]
 800fdd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fddc:	d037      	beq.n	800fe4e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fdde:	f7fd fb0d 	bl	800d3fc <HAL_GetTick>
 800fde2:	4602      	mov	r2, r0
 800fde4:	683b      	ldr	r3, [r7, #0]
 800fde6:	1ad3      	subs	r3, r2, r3
 800fde8:	6a3a      	ldr	r2, [r7, #32]
 800fdea:	429a      	cmp	r2, r3
 800fdec:	d302      	bcc.n	800fdf4 <UART_WaitOnFlagUntilTimeout+0x30>
 800fdee:	6a3b      	ldr	r3, [r7, #32]
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d101      	bne.n	800fdf8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800fdf4:	2303      	movs	r3, #3
 800fdf6:	e03a      	b.n	800fe6e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	68db      	ldr	r3, [r3, #12]
 800fdfe:	f003 0304 	and.w	r3, r3, #4
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d023      	beq.n	800fe4e <UART_WaitOnFlagUntilTimeout+0x8a>
 800fe06:	68bb      	ldr	r3, [r7, #8]
 800fe08:	2b80      	cmp	r3, #128	@ 0x80
 800fe0a:	d020      	beq.n	800fe4e <UART_WaitOnFlagUntilTimeout+0x8a>
 800fe0c:	68bb      	ldr	r3, [r7, #8]
 800fe0e:	2b40      	cmp	r3, #64	@ 0x40
 800fe10:	d01d      	beq.n	800fe4e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	f003 0308 	and.w	r3, r3, #8
 800fe1c:	2b08      	cmp	r3, #8
 800fe1e:	d116      	bne.n	800fe4e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800fe20:	2300      	movs	r3, #0
 800fe22:	617b      	str	r3, [r7, #20]
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	617b      	str	r3, [r7, #20]
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	685b      	ldr	r3, [r3, #4]
 800fe32:	617b      	str	r3, [r7, #20]
 800fe34:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fe36:	68f8      	ldr	r0, [r7, #12]
 800fe38:	f000 f81d 	bl	800fe76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	2208      	movs	r2, #8
 800fe40:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	2200      	movs	r2, #0
 800fe46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800fe4a:	2301      	movs	r3, #1
 800fe4c:	e00f      	b.n	800fe6e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	681a      	ldr	r2, [r3, #0]
 800fe54:	68bb      	ldr	r3, [r7, #8]
 800fe56:	4013      	ands	r3, r2
 800fe58:	68ba      	ldr	r2, [r7, #8]
 800fe5a:	429a      	cmp	r2, r3
 800fe5c:	bf0c      	ite	eq
 800fe5e:	2301      	moveq	r3, #1
 800fe60:	2300      	movne	r3, #0
 800fe62:	b2db      	uxtb	r3, r3
 800fe64:	461a      	mov	r2, r3
 800fe66:	79fb      	ldrb	r3, [r7, #7]
 800fe68:	429a      	cmp	r2, r3
 800fe6a:	d0b4      	beq.n	800fdd6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fe6c:	2300      	movs	r3, #0
}
 800fe6e:	4618      	mov	r0, r3
 800fe70:	3718      	adds	r7, #24
 800fe72:	46bd      	mov	sp, r7
 800fe74:	bd80      	pop	{r7, pc}

0800fe76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fe76:	b480      	push	{r7}
 800fe78:	b095      	sub	sp, #84	@ 0x54
 800fe7a:	af00      	add	r7, sp, #0
 800fe7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	330c      	adds	r3, #12
 800fe84:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe88:	e853 3f00 	ldrex	r3, [r3]
 800fe8c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800fe8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fe94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	330c      	adds	r3, #12
 800fe9c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800fe9e:	643a      	str	r2, [r7, #64]	@ 0x40
 800fea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fea2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800fea4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fea6:	e841 2300 	strex	r3, r2, [r1]
 800feaa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800feac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d1e5      	bne.n	800fe7e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	3314      	adds	r3, #20
 800feb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800feba:	6a3b      	ldr	r3, [r7, #32]
 800febc:	e853 3f00 	ldrex	r3, [r3]
 800fec0:	61fb      	str	r3, [r7, #28]
   return(result);
 800fec2:	69fb      	ldr	r3, [r7, #28]
 800fec4:	f023 0301 	bic.w	r3, r3, #1
 800fec8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	3314      	adds	r3, #20
 800fed0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fed2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800fed4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fed6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fed8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800feda:	e841 2300 	strex	r3, r2, [r1]
 800fede:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800fee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d1e5      	bne.n	800feb2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800feea:	2b01      	cmp	r3, #1
 800feec:	d119      	bne.n	800ff22 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	330c      	adds	r3, #12
 800fef4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	e853 3f00 	ldrex	r3, [r3]
 800fefc:	60bb      	str	r3, [r7, #8]
   return(result);
 800fefe:	68bb      	ldr	r3, [r7, #8]
 800ff00:	f023 0310 	bic.w	r3, r3, #16
 800ff04:	647b      	str	r3, [r7, #68]	@ 0x44
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	330c      	adds	r3, #12
 800ff0c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ff0e:	61ba      	str	r2, [r7, #24]
 800ff10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff12:	6979      	ldr	r1, [r7, #20]
 800ff14:	69ba      	ldr	r2, [r7, #24]
 800ff16:	e841 2300 	strex	r3, r2, [r1]
 800ff1a:	613b      	str	r3, [r7, #16]
   return(result);
 800ff1c:	693b      	ldr	r3, [r7, #16]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d1e5      	bne.n	800feee <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	2220      	movs	r2, #32
 800ff26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	2200      	movs	r2, #0
 800ff2e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800ff30:	bf00      	nop
 800ff32:	3754      	adds	r7, #84	@ 0x54
 800ff34:	46bd      	mov	sp, r7
 800ff36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3a:	4770      	bx	lr

0800ff3c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ff3c:	b580      	push	{r7, lr}
 800ff3e:	b084      	sub	sp, #16
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff48:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	2200      	movs	r2, #0
 800ff4e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	2200      	movs	r2, #0
 800ff54:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ff56:	68f8      	ldr	r0, [r7, #12]
 800ff58:	f7fb f898 	bl	800b08c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ff5c:	bf00      	nop
 800ff5e:	3710      	adds	r7, #16
 800ff60:	46bd      	mov	sp, r7
 800ff62:	bd80      	pop	{r7, pc}

0800ff64 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ff64:	b480      	push	{r7}
 800ff66:	b085      	sub	sp, #20
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ff72:	b2db      	uxtb	r3, r3
 800ff74:	2b21      	cmp	r3, #33	@ 0x21
 800ff76:	d13e      	bne.n	800fff6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	689b      	ldr	r3, [r3, #8]
 800ff7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ff80:	d114      	bne.n	800ffac <UART_Transmit_IT+0x48>
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	691b      	ldr	r3, [r3, #16]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d110      	bne.n	800ffac <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	6a1b      	ldr	r3, [r3, #32]
 800ff8e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	881b      	ldrh	r3, [r3, #0]
 800ff94:	461a      	mov	r2, r3
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ff9e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	6a1b      	ldr	r3, [r3, #32]
 800ffa4:	1c9a      	adds	r2, r3, #2
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	621a      	str	r2, [r3, #32]
 800ffaa:	e008      	b.n	800ffbe <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	6a1b      	ldr	r3, [r3, #32]
 800ffb0:	1c59      	adds	r1, r3, #1
 800ffb2:	687a      	ldr	r2, [r7, #4]
 800ffb4:	6211      	str	r1, [r2, #32]
 800ffb6:	781a      	ldrb	r2, [r3, #0]
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800ffc2:	b29b      	uxth	r3, r3
 800ffc4:	3b01      	subs	r3, #1
 800ffc6:	b29b      	uxth	r3, r3
 800ffc8:	687a      	ldr	r2, [r7, #4]
 800ffca:	4619      	mov	r1, r3
 800ffcc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d10f      	bne.n	800fff2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	68da      	ldr	r2, [r3, #12]
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ffe0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	68da      	ldr	r2, [r3, #12]
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fff0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800fff2:	2300      	movs	r3, #0
 800fff4:	e000      	b.n	800fff8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800fff6:	2302      	movs	r3, #2
  }
}
 800fff8:	4618      	mov	r0, r3
 800fffa:	3714      	adds	r7, #20
 800fffc:	46bd      	mov	sp, r7
 800fffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010002:	4770      	bx	lr

08010004 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010004:	b580      	push	{r7, lr}
 8010006:	b082      	sub	sp, #8
 8010008:	af00      	add	r7, sp, #0
 801000a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	68da      	ldr	r2, [r3, #12]
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801001a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	2220      	movs	r2, #32
 8010020:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010024:	6878      	ldr	r0, [r7, #4]
 8010026:	f7ff fead 	bl	800fd84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 801002a:	2300      	movs	r3, #0
}
 801002c:	4618      	mov	r0, r3
 801002e:	3708      	adds	r7, #8
 8010030:	46bd      	mov	sp, r7
 8010032:	bd80      	pop	{r7, pc}

08010034 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8010034:	b580      	push	{r7, lr}
 8010036:	b08c      	sub	sp, #48	@ 0x30
 8010038:	af00      	add	r7, sp, #0
 801003a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010042:	b2db      	uxtb	r3, r3
 8010044:	2b22      	cmp	r3, #34	@ 0x22
 8010046:	f040 80ae 	bne.w	80101a6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	689b      	ldr	r3, [r3, #8]
 801004e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010052:	d117      	bne.n	8010084 <UART_Receive_IT+0x50>
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	691b      	ldr	r3, [r3, #16]
 8010058:	2b00      	cmp	r3, #0
 801005a:	d113      	bne.n	8010084 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 801005c:	2300      	movs	r3, #0
 801005e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010064:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	685b      	ldr	r3, [r3, #4]
 801006c:	b29b      	uxth	r3, r3
 801006e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010072:	b29a      	uxth	r2, r3
 8010074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010076:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801007c:	1c9a      	adds	r2, r3, #2
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	629a      	str	r2, [r3, #40]	@ 0x28
 8010082:	e026      	b.n	80100d2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010088:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 801008a:	2300      	movs	r3, #0
 801008c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	689b      	ldr	r3, [r3, #8]
 8010092:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010096:	d007      	beq.n	80100a8 <UART_Receive_IT+0x74>
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	689b      	ldr	r3, [r3, #8]
 801009c:	2b00      	cmp	r3, #0
 801009e:	d10a      	bne.n	80100b6 <UART_Receive_IT+0x82>
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	691b      	ldr	r3, [r3, #16]
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d106      	bne.n	80100b6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	685b      	ldr	r3, [r3, #4]
 80100ae:	b2da      	uxtb	r2, r3
 80100b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100b2:	701a      	strb	r2, [r3, #0]
 80100b4:	e008      	b.n	80100c8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	685b      	ldr	r3, [r3, #4]
 80100bc:	b2db      	uxtb	r3, r3
 80100be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80100c2:	b2da      	uxtb	r2, r3
 80100c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100c6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80100cc:	1c5a      	adds	r2, r3, #1
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80100d6:	b29b      	uxth	r3, r3
 80100d8:	3b01      	subs	r3, #1
 80100da:	b29b      	uxth	r3, r3
 80100dc:	687a      	ldr	r2, [r7, #4]
 80100de:	4619      	mov	r1, r3
 80100e0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d15d      	bne.n	80101a2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	68da      	ldr	r2, [r3, #12]
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	f022 0220 	bic.w	r2, r2, #32
 80100f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	68da      	ldr	r2, [r3, #12]
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8010104:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	695a      	ldr	r2, [r3, #20]
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	f022 0201 	bic.w	r2, r2, #1
 8010114:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	2220      	movs	r2, #32
 801011a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	2200      	movs	r2, #0
 8010122:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010128:	2b01      	cmp	r3, #1
 801012a:	d135      	bne.n	8010198 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	2200      	movs	r2, #0
 8010130:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	330c      	adds	r3, #12
 8010138:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801013a:	697b      	ldr	r3, [r7, #20]
 801013c:	e853 3f00 	ldrex	r3, [r3]
 8010140:	613b      	str	r3, [r7, #16]
   return(result);
 8010142:	693b      	ldr	r3, [r7, #16]
 8010144:	f023 0310 	bic.w	r3, r3, #16
 8010148:	627b      	str	r3, [r7, #36]	@ 0x24
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	330c      	adds	r3, #12
 8010150:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010152:	623a      	str	r2, [r7, #32]
 8010154:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010156:	69f9      	ldr	r1, [r7, #28]
 8010158:	6a3a      	ldr	r2, [r7, #32]
 801015a:	e841 2300 	strex	r3, r2, [r1]
 801015e:	61bb      	str	r3, [r7, #24]
   return(result);
 8010160:	69bb      	ldr	r3, [r7, #24]
 8010162:	2b00      	cmp	r3, #0
 8010164:	d1e5      	bne.n	8010132 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	f003 0310 	and.w	r3, r3, #16
 8010170:	2b10      	cmp	r3, #16
 8010172:	d10a      	bne.n	801018a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8010174:	2300      	movs	r3, #0
 8010176:	60fb      	str	r3, [r7, #12]
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	60fb      	str	r3, [r7, #12]
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	685b      	ldr	r3, [r3, #4]
 8010186:	60fb      	str	r3, [r7, #12]
 8010188:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801018e:	4619      	mov	r1, r3
 8010190:	6878      	ldr	r0, [r7, #4]
 8010192:	f7ff fe0b 	bl	800fdac <HAL_UARTEx_RxEventCallback>
 8010196:	e002      	b.n	801019e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8010198:	6878      	ldr	r0, [r7, #4]
 801019a:	f7ff fdfd 	bl	800fd98 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 801019e:	2300      	movs	r3, #0
 80101a0:	e002      	b.n	80101a8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80101a2:	2300      	movs	r3, #0
 80101a4:	e000      	b.n	80101a8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80101a6:	2302      	movs	r3, #2
  }
}
 80101a8:	4618      	mov	r0, r3
 80101aa:	3730      	adds	r7, #48	@ 0x30
 80101ac:	46bd      	mov	sp, r7
 80101ae:	bd80      	pop	{r7, pc}

080101b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80101b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80101b4:	b0c0      	sub	sp, #256	@ 0x100
 80101b6:	af00      	add	r7, sp, #0
 80101b8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80101bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	691b      	ldr	r3, [r3, #16]
 80101c4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80101c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80101cc:	68d9      	ldr	r1, [r3, #12]
 80101ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80101d2:	681a      	ldr	r2, [r3, #0]
 80101d4:	ea40 0301 	orr.w	r3, r0, r1
 80101d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80101da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80101de:	689a      	ldr	r2, [r3, #8]
 80101e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80101e4:	691b      	ldr	r3, [r3, #16]
 80101e6:	431a      	orrs	r2, r3
 80101e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80101ec:	695b      	ldr	r3, [r3, #20]
 80101ee:	431a      	orrs	r2, r3
 80101f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80101f4:	69db      	ldr	r3, [r3, #28]
 80101f6:	4313      	orrs	r3, r2
 80101f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80101fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	68db      	ldr	r3, [r3, #12]
 8010204:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8010208:	f021 010c 	bic.w	r1, r1, #12
 801020c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010210:	681a      	ldr	r2, [r3, #0]
 8010212:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8010216:	430b      	orrs	r3, r1
 8010218:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801021a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	695b      	ldr	r3, [r3, #20]
 8010222:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8010226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801022a:	6999      	ldr	r1, [r3, #24]
 801022c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010230:	681a      	ldr	r2, [r3, #0]
 8010232:	ea40 0301 	orr.w	r3, r0, r1
 8010236:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801023c:	681a      	ldr	r2, [r3, #0]
 801023e:	4b8f      	ldr	r3, [pc, #572]	@ (801047c <UART_SetConfig+0x2cc>)
 8010240:	429a      	cmp	r2, r3
 8010242:	d005      	beq.n	8010250 <UART_SetConfig+0xa0>
 8010244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010248:	681a      	ldr	r2, [r3, #0]
 801024a:	4b8d      	ldr	r3, [pc, #564]	@ (8010480 <UART_SetConfig+0x2d0>)
 801024c:	429a      	cmp	r2, r3
 801024e:	d104      	bne.n	801025a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8010250:	f7fe f8c8 	bl	800e3e4 <HAL_RCC_GetPCLK2Freq>
 8010254:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8010258:	e003      	b.n	8010262 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801025a:	f7fe f8af 	bl	800e3bc <HAL_RCC_GetPCLK1Freq>
 801025e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010266:	69db      	ldr	r3, [r3, #28]
 8010268:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801026c:	f040 810c 	bne.w	8010488 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8010270:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010274:	2200      	movs	r2, #0
 8010276:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801027a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 801027e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8010282:	4622      	mov	r2, r4
 8010284:	462b      	mov	r3, r5
 8010286:	1891      	adds	r1, r2, r2
 8010288:	65b9      	str	r1, [r7, #88]	@ 0x58
 801028a:	415b      	adcs	r3, r3
 801028c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801028e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8010292:	4621      	mov	r1, r4
 8010294:	eb12 0801 	adds.w	r8, r2, r1
 8010298:	4629      	mov	r1, r5
 801029a:	eb43 0901 	adc.w	r9, r3, r1
 801029e:	f04f 0200 	mov.w	r2, #0
 80102a2:	f04f 0300 	mov.w	r3, #0
 80102a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80102aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80102ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80102b2:	4690      	mov	r8, r2
 80102b4:	4699      	mov	r9, r3
 80102b6:	4623      	mov	r3, r4
 80102b8:	eb18 0303 	adds.w	r3, r8, r3
 80102bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80102c0:	462b      	mov	r3, r5
 80102c2:	eb49 0303 	adc.w	r3, r9, r3
 80102c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80102ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80102ce:	685b      	ldr	r3, [r3, #4]
 80102d0:	2200      	movs	r2, #0
 80102d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80102d6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80102da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80102de:	460b      	mov	r3, r1
 80102e0:	18db      	adds	r3, r3, r3
 80102e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80102e4:	4613      	mov	r3, r2
 80102e6:	eb42 0303 	adc.w	r3, r2, r3
 80102ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80102ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80102f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80102f4:	f7f8 fbb0 	bl	8008a58 <__aeabi_uldivmod>
 80102f8:	4602      	mov	r2, r0
 80102fa:	460b      	mov	r3, r1
 80102fc:	4b61      	ldr	r3, [pc, #388]	@ (8010484 <UART_SetConfig+0x2d4>)
 80102fe:	fba3 2302 	umull	r2, r3, r3, r2
 8010302:	095b      	lsrs	r3, r3, #5
 8010304:	011c      	lsls	r4, r3, #4
 8010306:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801030a:	2200      	movs	r2, #0
 801030c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8010310:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8010314:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8010318:	4642      	mov	r2, r8
 801031a:	464b      	mov	r3, r9
 801031c:	1891      	adds	r1, r2, r2
 801031e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8010320:	415b      	adcs	r3, r3
 8010322:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010324:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8010328:	4641      	mov	r1, r8
 801032a:	eb12 0a01 	adds.w	sl, r2, r1
 801032e:	4649      	mov	r1, r9
 8010330:	eb43 0b01 	adc.w	fp, r3, r1
 8010334:	f04f 0200 	mov.w	r2, #0
 8010338:	f04f 0300 	mov.w	r3, #0
 801033c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8010340:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8010344:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010348:	4692      	mov	sl, r2
 801034a:	469b      	mov	fp, r3
 801034c:	4643      	mov	r3, r8
 801034e:	eb1a 0303 	adds.w	r3, sl, r3
 8010352:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8010356:	464b      	mov	r3, r9
 8010358:	eb4b 0303 	adc.w	r3, fp, r3
 801035c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8010360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010364:	685b      	ldr	r3, [r3, #4]
 8010366:	2200      	movs	r2, #0
 8010368:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801036c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8010370:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8010374:	460b      	mov	r3, r1
 8010376:	18db      	adds	r3, r3, r3
 8010378:	643b      	str	r3, [r7, #64]	@ 0x40
 801037a:	4613      	mov	r3, r2
 801037c:	eb42 0303 	adc.w	r3, r2, r3
 8010380:	647b      	str	r3, [r7, #68]	@ 0x44
 8010382:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8010386:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 801038a:	f7f8 fb65 	bl	8008a58 <__aeabi_uldivmod>
 801038e:	4602      	mov	r2, r0
 8010390:	460b      	mov	r3, r1
 8010392:	4611      	mov	r1, r2
 8010394:	4b3b      	ldr	r3, [pc, #236]	@ (8010484 <UART_SetConfig+0x2d4>)
 8010396:	fba3 2301 	umull	r2, r3, r3, r1
 801039a:	095b      	lsrs	r3, r3, #5
 801039c:	2264      	movs	r2, #100	@ 0x64
 801039e:	fb02 f303 	mul.w	r3, r2, r3
 80103a2:	1acb      	subs	r3, r1, r3
 80103a4:	00db      	lsls	r3, r3, #3
 80103a6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80103aa:	4b36      	ldr	r3, [pc, #216]	@ (8010484 <UART_SetConfig+0x2d4>)
 80103ac:	fba3 2302 	umull	r2, r3, r3, r2
 80103b0:	095b      	lsrs	r3, r3, #5
 80103b2:	005b      	lsls	r3, r3, #1
 80103b4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80103b8:	441c      	add	r4, r3
 80103ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80103be:	2200      	movs	r2, #0
 80103c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80103c4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80103c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80103cc:	4642      	mov	r2, r8
 80103ce:	464b      	mov	r3, r9
 80103d0:	1891      	adds	r1, r2, r2
 80103d2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80103d4:	415b      	adcs	r3, r3
 80103d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80103d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80103dc:	4641      	mov	r1, r8
 80103de:	1851      	adds	r1, r2, r1
 80103e0:	6339      	str	r1, [r7, #48]	@ 0x30
 80103e2:	4649      	mov	r1, r9
 80103e4:	414b      	adcs	r3, r1
 80103e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80103e8:	f04f 0200 	mov.w	r2, #0
 80103ec:	f04f 0300 	mov.w	r3, #0
 80103f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80103f4:	4659      	mov	r1, fp
 80103f6:	00cb      	lsls	r3, r1, #3
 80103f8:	4651      	mov	r1, sl
 80103fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80103fe:	4651      	mov	r1, sl
 8010400:	00ca      	lsls	r2, r1, #3
 8010402:	4610      	mov	r0, r2
 8010404:	4619      	mov	r1, r3
 8010406:	4603      	mov	r3, r0
 8010408:	4642      	mov	r2, r8
 801040a:	189b      	adds	r3, r3, r2
 801040c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8010410:	464b      	mov	r3, r9
 8010412:	460a      	mov	r2, r1
 8010414:	eb42 0303 	adc.w	r3, r2, r3
 8010418:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801041c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010420:	685b      	ldr	r3, [r3, #4]
 8010422:	2200      	movs	r2, #0
 8010424:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8010428:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 801042c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8010430:	460b      	mov	r3, r1
 8010432:	18db      	adds	r3, r3, r3
 8010434:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010436:	4613      	mov	r3, r2
 8010438:	eb42 0303 	adc.w	r3, r2, r3
 801043c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801043e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8010442:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8010446:	f7f8 fb07 	bl	8008a58 <__aeabi_uldivmod>
 801044a:	4602      	mov	r2, r0
 801044c:	460b      	mov	r3, r1
 801044e:	4b0d      	ldr	r3, [pc, #52]	@ (8010484 <UART_SetConfig+0x2d4>)
 8010450:	fba3 1302 	umull	r1, r3, r3, r2
 8010454:	095b      	lsrs	r3, r3, #5
 8010456:	2164      	movs	r1, #100	@ 0x64
 8010458:	fb01 f303 	mul.w	r3, r1, r3
 801045c:	1ad3      	subs	r3, r2, r3
 801045e:	00db      	lsls	r3, r3, #3
 8010460:	3332      	adds	r3, #50	@ 0x32
 8010462:	4a08      	ldr	r2, [pc, #32]	@ (8010484 <UART_SetConfig+0x2d4>)
 8010464:	fba2 2303 	umull	r2, r3, r2, r3
 8010468:	095b      	lsrs	r3, r3, #5
 801046a:	f003 0207 	and.w	r2, r3, #7
 801046e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	4422      	add	r2, r4
 8010476:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8010478:	e106      	b.n	8010688 <UART_SetConfig+0x4d8>
 801047a:	bf00      	nop
 801047c:	40011000 	.word	0x40011000
 8010480:	40011400 	.word	0x40011400
 8010484:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010488:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801048c:	2200      	movs	r2, #0
 801048e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8010492:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8010496:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 801049a:	4642      	mov	r2, r8
 801049c:	464b      	mov	r3, r9
 801049e:	1891      	adds	r1, r2, r2
 80104a0:	6239      	str	r1, [r7, #32]
 80104a2:	415b      	adcs	r3, r3
 80104a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80104a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80104aa:	4641      	mov	r1, r8
 80104ac:	1854      	adds	r4, r2, r1
 80104ae:	4649      	mov	r1, r9
 80104b0:	eb43 0501 	adc.w	r5, r3, r1
 80104b4:	f04f 0200 	mov.w	r2, #0
 80104b8:	f04f 0300 	mov.w	r3, #0
 80104bc:	00eb      	lsls	r3, r5, #3
 80104be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80104c2:	00e2      	lsls	r2, r4, #3
 80104c4:	4614      	mov	r4, r2
 80104c6:	461d      	mov	r5, r3
 80104c8:	4643      	mov	r3, r8
 80104ca:	18e3      	adds	r3, r4, r3
 80104cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80104d0:	464b      	mov	r3, r9
 80104d2:	eb45 0303 	adc.w	r3, r5, r3
 80104d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80104da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80104de:	685b      	ldr	r3, [r3, #4]
 80104e0:	2200      	movs	r2, #0
 80104e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80104e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80104ea:	f04f 0200 	mov.w	r2, #0
 80104ee:	f04f 0300 	mov.w	r3, #0
 80104f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80104f6:	4629      	mov	r1, r5
 80104f8:	008b      	lsls	r3, r1, #2
 80104fa:	4621      	mov	r1, r4
 80104fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010500:	4621      	mov	r1, r4
 8010502:	008a      	lsls	r2, r1, #2
 8010504:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8010508:	f7f8 faa6 	bl	8008a58 <__aeabi_uldivmod>
 801050c:	4602      	mov	r2, r0
 801050e:	460b      	mov	r3, r1
 8010510:	4b60      	ldr	r3, [pc, #384]	@ (8010694 <UART_SetConfig+0x4e4>)
 8010512:	fba3 2302 	umull	r2, r3, r3, r2
 8010516:	095b      	lsrs	r3, r3, #5
 8010518:	011c      	lsls	r4, r3, #4
 801051a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801051e:	2200      	movs	r2, #0
 8010520:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8010524:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8010528:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 801052c:	4642      	mov	r2, r8
 801052e:	464b      	mov	r3, r9
 8010530:	1891      	adds	r1, r2, r2
 8010532:	61b9      	str	r1, [r7, #24]
 8010534:	415b      	adcs	r3, r3
 8010536:	61fb      	str	r3, [r7, #28]
 8010538:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801053c:	4641      	mov	r1, r8
 801053e:	1851      	adds	r1, r2, r1
 8010540:	6139      	str	r1, [r7, #16]
 8010542:	4649      	mov	r1, r9
 8010544:	414b      	adcs	r3, r1
 8010546:	617b      	str	r3, [r7, #20]
 8010548:	f04f 0200 	mov.w	r2, #0
 801054c:	f04f 0300 	mov.w	r3, #0
 8010550:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8010554:	4659      	mov	r1, fp
 8010556:	00cb      	lsls	r3, r1, #3
 8010558:	4651      	mov	r1, sl
 801055a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801055e:	4651      	mov	r1, sl
 8010560:	00ca      	lsls	r2, r1, #3
 8010562:	4610      	mov	r0, r2
 8010564:	4619      	mov	r1, r3
 8010566:	4603      	mov	r3, r0
 8010568:	4642      	mov	r2, r8
 801056a:	189b      	adds	r3, r3, r2
 801056c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8010570:	464b      	mov	r3, r9
 8010572:	460a      	mov	r2, r1
 8010574:	eb42 0303 	adc.w	r3, r2, r3
 8010578:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801057c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010580:	685b      	ldr	r3, [r3, #4]
 8010582:	2200      	movs	r2, #0
 8010584:	67bb      	str	r3, [r7, #120]	@ 0x78
 8010586:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8010588:	f04f 0200 	mov.w	r2, #0
 801058c:	f04f 0300 	mov.w	r3, #0
 8010590:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8010594:	4649      	mov	r1, r9
 8010596:	008b      	lsls	r3, r1, #2
 8010598:	4641      	mov	r1, r8
 801059a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801059e:	4641      	mov	r1, r8
 80105a0:	008a      	lsls	r2, r1, #2
 80105a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80105a6:	f7f8 fa57 	bl	8008a58 <__aeabi_uldivmod>
 80105aa:	4602      	mov	r2, r0
 80105ac:	460b      	mov	r3, r1
 80105ae:	4611      	mov	r1, r2
 80105b0:	4b38      	ldr	r3, [pc, #224]	@ (8010694 <UART_SetConfig+0x4e4>)
 80105b2:	fba3 2301 	umull	r2, r3, r3, r1
 80105b6:	095b      	lsrs	r3, r3, #5
 80105b8:	2264      	movs	r2, #100	@ 0x64
 80105ba:	fb02 f303 	mul.w	r3, r2, r3
 80105be:	1acb      	subs	r3, r1, r3
 80105c0:	011b      	lsls	r3, r3, #4
 80105c2:	3332      	adds	r3, #50	@ 0x32
 80105c4:	4a33      	ldr	r2, [pc, #204]	@ (8010694 <UART_SetConfig+0x4e4>)
 80105c6:	fba2 2303 	umull	r2, r3, r2, r3
 80105ca:	095b      	lsrs	r3, r3, #5
 80105cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80105d0:	441c      	add	r4, r3
 80105d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80105d6:	2200      	movs	r2, #0
 80105d8:	673b      	str	r3, [r7, #112]	@ 0x70
 80105da:	677a      	str	r2, [r7, #116]	@ 0x74
 80105dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80105e0:	4642      	mov	r2, r8
 80105e2:	464b      	mov	r3, r9
 80105e4:	1891      	adds	r1, r2, r2
 80105e6:	60b9      	str	r1, [r7, #8]
 80105e8:	415b      	adcs	r3, r3
 80105ea:	60fb      	str	r3, [r7, #12]
 80105ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80105f0:	4641      	mov	r1, r8
 80105f2:	1851      	adds	r1, r2, r1
 80105f4:	6039      	str	r1, [r7, #0]
 80105f6:	4649      	mov	r1, r9
 80105f8:	414b      	adcs	r3, r1
 80105fa:	607b      	str	r3, [r7, #4]
 80105fc:	f04f 0200 	mov.w	r2, #0
 8010600:	f04f 0300 	mov.w	r3, #0
 8010604:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8010608:	4659      	mov	r1, fp
 801060a:	00cb      	lsls	r3, r1, #3
 801060c:	4651      	mov	r1, sl
 801060e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010612:	4651      	mov	r1, sl
 8010614:	00ca      	lsls	r2, r1, #3
 8010616:	4610      	mov	r0, r2
 8010618:	4619      	mov	r1, r3
 801061a:	4603      	mov	r3, r0
 801061c:	4642      	mov	r2, r8
 801061e:	189b      	adds	r3, r3, r2
 8010620:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010622:	464b      	mov	r3, r9
 8010624:	460a      	mov	r2, r1
 8010626:	eb42 0303 	adc.w	r3, r2, r3
 801062a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801062c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010630:	685b      	ldr	r3, [r3, #4]
 8010632:	2200      	movs	r2, #0
 8010634:	663b      	str	r3, [r7, #96]	@ 0x60
 8010636:	667a      	str	r2, [r7, #100]	@ 0x64
 8010638:	f04f 0200 	mov.w	r2, #0
 801063c:	f04f 0300 	mov.w	r3, #0
 8010640:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8010644:	4649      	mov	r1, r9
 8010646:	008b      	lsls	r3, r1, #2
 8010648:	4641      	mov	r1, r8
 801064a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801064e:	4641      	mov	r1, r8
 8010650:	008a      	lsls	r2, r1, #2
 8010652:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8010656:	f7f8 f9ff 	bl	8008a58 <__aeabi_uldivmod>
 801065a:	4602      	mov	r2, r0
 801065c:	460b      	mov	r3, r1
 801065e:	4b0d      	ldr	r3, [pc, #52]	@ (8010694 <UART_SetConfig+0x4e4>)
 8010660:	fba3 1302 	umull	r1, r3, r3, r2
 8010664:	095b      	lsrs	r3, r3, #5
 8010666:	2164      	movs	r1, #100	@ 0x64
 8010668:	fb01 f303 	mul.w	r3, r1, r3
 801066c:	1ad3      	subs	r3, r2, r3
 801066e:	011b      	lsls	r3, r3, #4
 8010670:	3332      	adds	r3, #50	@ 0x32
 8010672:	4a08      	ldr	r2, [pc, #32]	@ (8010694 <UART_SetConfig+0x4e4>)
 8010674:	fba2 2303 	umull	r2, r3, r2, r3
 8010678:	095b      	lsrs	r3, r3, #5
 801067a:	f003 020f 	and.w	r2, r3, #15
 801067e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	4422      	add	r2, r4
 8010686:	609a      	str	r2, [r3, #8]
}
 8010688:	bf00      	nop
 801068a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 801068e:	46bd      	mov	sp, r7
 8010690:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010694:	51eb851f 	.word	0x51eb851f

08010698 <__cvt>:
 8010698:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801069c:	ec57 6b10 	vmov	r6, r7, d0
 80106a0:	2f00      	cmp	r7, #0
 80106a2:	460c      	mov	r4, r1
 80106a4:	4619      	mov	r1, r3
 80106a6:	463b      	mov	r3, r7
 80106a8:	bfbb      	ittet	lt
 80106aa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80106ae:	461f      	movlt	r7, r3
 80106b0:	2300      	movge	r3, #0
 80106b2:	232d      	movlt	r3, #45	@ 0x2d
 80106b4:	700b      	strb	r3, [r1, #0]
 80106b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80106b8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80106bc:	4691      	mov	r9, r2
 80106be:	f023 0820 	bic.w	r8, r3, #32
 80106c2:	bfbc      	itt	lt
 80106c4:	4632      	movlt	r2, r6
 80106c6:	4616      	movlt	r6, r2
 80106c8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80106cc:	d005      	beq.n	80106da <__cvt+0x42>
 80106ce:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80106d2:	d100      	bne.n	80106d6 <__cvt+0x3e>
 80106d4:	3401      	adds	r4, #1
 80106d6:	2102      	movs	r1, #2
 80106d8:	e000      	b.n	80106dc <__cvt+0x44>
 80106da:	2103      	movs	r1, #3
 80106dc:	ab03      	add	r3, sp, #12
 80106de:	9301      	str	r3, [sp, #4]
 80106e0:	ab02      	add	r3, sp, #8
 80106e2:	9300      	str	r3, [sp, #0]
 80106e4:	ec47 6b10 	vmov	d0, r6, r7
 80106e8:	4653      	mov	r3, sl
 80106ea:	4622      	mov	r2, r4
 80106ec:	f000 fe98 	bl	8011420 <_dtoa_r>
 80106f0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80106f4:	4605      	mov	r5, r0
 80106f6:	d119      	bne.n	801072c <__cvt+0x94>
 80106f8:	f019 0f01 	tst.w	r9, #1
 80106fc:	d00e      	beq.n	801071c <__cvt+0x84>
 80106fe:	eb00 0904 	add.w	r9, r0, r4
 8010702:	2200      	movs	r2, #0
 8010704:	2300      	movs	r3, #0
 8010706:	4630      	mov	r0, r6
 8010708:	4639      	mov	r1, r7
 801070a:	f7f8 f915 	bl	8008938 <__aeabi_dcmpeq>
 801070e:	b108      	cbz	r0, 8010714 <__cvt+0x7c>
 8010710:	f8cd 900c 	str.w	r9, [sp, #12]
 8010714:	2230      	movs	r2, #48	@ 0x30
 8010716:	9b03      	ldr	r3, [sp, #12]
 8010718:	454b      	cmp	r3, r9
 801071a:	d31e      	bcc.n	801075a <__cvt+0xc2>
 801071c:	9b03      	ldr	r3, [sp, #12]
 801071e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010720:	1b5b      	subs	r3, r3, r5
 8010722:	4628      	mov	r0, r5
 8010724:	6013      	str	r3, [r2, #0]
 8010726:	b004      	add	sp, #16
 8010728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801072c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010730:	eb00 0904 	add.w	r9, r0, r4
 8010734:	d1e5      	bne.n	8010702 <__cvt+0x6a>
 8010736:	7803      	ldrb	r3, [r0, #0]
 8010738:	2b30      	cmp	r3, #48	@ 0x30
 801073a:	d10a      	bne.n	8010752 <__cvt+0xba>
 801073c:	2200      	movs	r2, #0
 801073e:	2300      	movs	r3, #0
 8010740:	4630      	mov	r0, r6
 8010742:	4639      	mov	r1, r7
 8010744:	f7f8 f8f8 	bl	8008938 <__aeabi_dcmpeq>
 8010748:	b918      	cbnz	r0, 8010752 <__cvt+0xba>
 801074a:	f1c4 0401 	rsb	r4, r4, #1
 801074e:	f8ca 4000 	str.w	r4, [sl]
 8010752:	f8da 3000 	ldr.w	r3, [sl]
 8010756:	4499      	add	r9, r3
 8010758:	e7d3      	b.n	8010702 <__cvt+0x6a>
 801075a:	1c59      	adds	r1, r3, #1
 801075c:	9103      	str	r1, [sp, #12]
 801075e:	701a      	strb	r2, [r3, #0]
 8010760:	e7d9      	b.n	8010716 <__cvt+0x7e>

08010762 <__exponent>:
 8010762:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010764:	2900      	cmp	r1, #0
 8010766:	bfba      	itte	lt
 8010768:	4249      	neglt	r1, r1
 801076a:	232d      	movlt	r3, #45	@ 0x2d
 801076c:	232b      	movge	r3, #43	@ 0x2b
 801076e:	2909      	cmp	r1, #9
 8010770:	7002      	strb	r2, [r0, #0]
 8010772:	7043      	strb	r3, [r0, #1]
 8010774:	dd29      	ble.n	80107ca <__exponent+0x68>
 8010776:	f10d 0307 	add.w	r3, sp, #7
 801077a:	461d      	mov	r5, r3
 801077c:	270a      	movs	r7, #10
 801077e:	461a      	mov	r2, r3
 8010780:	fbb1 f6f7 	udiv	r6, r1, r7
 8010784:	fb07 1416 	mls	r4, r7, r6, r1
 8010788:	3430      	adds	r4, #48	@ 0x30
 801078a:	f802 4c01 	strb.w	r4, [r2, #-1]
 801078e:	460c      	mov	r4, r1
 8010790:	2c63      	cmp	r4, #99	@ 0x63
 8010792:	f103 33ff 	add.w	r3, r3, #4294967295
 8010796:	4631      	mov	r1, r6
 8010798:	dcf1      	bgt.n	801077e <__exponent+0x1c>
 801079a:	3130      	adds	r1, #48	@ 0x30
 801079c:	1e94      	subs	r4, r2, #2
 801079e:	f803 1c01 	strb.w	r1, [r3, #-1]
 80107a2:	1c41      	adds	r1, r0, #1
 80107a4:	4623      	mov	r3, r4
 80107a6:	42ab      	cmp	r3, r5
 80107a8:	d30a      	bcc.n	80107c0 <__exponent+0x5e>
 80107aa:	f10d 0309 	add.w	r3, sp, #9
 80107ae:	1a9b      	subs	r3, r3, r2
 80107b0:	42ac      	cmp	r4, r5
 80107b2:	bf88      	it	hi
 80107b4:	2300      	movhi	r3, #0
 80107b6:	3302      	adds	r3, #2
 80107b8:	4403      	add	r3, r0
 80107ba:	1a18      	subs	r0, r3, r0
 80107bc:	b003      	add	sp, #12
 80107be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80107c0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80107c4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80107c8:	e7ed      	b.n	80107a6 <__exponent+0x44>
 80107ca:	2330      	movs	r3, #48	@ 0x30
 80107cc:	3130      	adds	r1, #48	@ 0x30
 80107ce:	7083      	strb	r3, [r0, #2]
 80107d0:	70c1      	strb	r1, [r0, #3]
 80107d2:	1d03      	adds	r3, r0, #4
 80107d4:	e7f1      	b.n	80107ba <__exponent+0x58>
	...

080107d8 <_printf_float>:
 80107d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107dc:	b08d      	sub	sp, #52	@ 0x34
 80107de:	460c      	mov	r4, r1
 80107e0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80107e4:	4616      	mov	r6, r2
 80107e6:	461f      	mov	r7, r3
 80107e8:	4605      	mov	r5, r0
 80107ea:	f000 fd0b 	bl	8011204 <_localeconv_r>
 80107ee:	6803      	ldr	r3, [r0, #0]
 80107f0:	9304      	str	r3, [sp, #16]
 80107f2:	4618      	mov	r0, r3
 80107f4:	f7f7 fc74 	bl	80080e0 <strlen>
 80107f8:	2300      	movs	r3, #0
 80107fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80107fc:	f8d8 3000 	ldr.w	r3, [r8]
 8010800:	9005      	str	r0, [sp, #20]
 8010802:	3307      	adds	r3, #7
 8010804:	f023 0307 	bic.w	r3, r3, #7
 8010808:	f103 0208 	add.w	r2, r3, #8
 801080c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8010810:	f8d4 b000 	ldr.w	fp, [r4]
 8010814:	f8c8 2000 	str.w	r2, [r8]
 8010818:	e9d3 8900 	ldrd	r8, r9, [r3]
 801081c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8010820:	9307      	str	r3, [sp, #28]
 8010822:	f8cd 8018 	str.w	r8, [sp, #24]
 8010826:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801082a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801082e:	4b9c      	ldr	r3, [pc, #624]	@ (8010aa0 <_printf_float+0x2c8>)
 8010830:	f04f 32ff 	mov.w	r2, #4294967295
 8010834:	f7f8 f8b2 	bl	800899c <__aeabi_dcmpun>
 8010838:	bb70      	cbnz	r0, 8010898 <_printf_float+0xc0>
 801083a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801083e:	4b98      	ldr	r3, [pc, #608]	@ (8010aa0 <_printf_float+0x2c8>)
 8010840:	f04f 32ff 	mov.w	r2, #4294967295
 8010844:	f7f8 f88c 	bl	8008960 <__aeabi_dcmple>
 8010848:	bb30      	cbnz	r0, 8010898 <_printf_float+0xc0>
 801084a:	2200      	movs	r2, #0
 801084c:	2300      	movs	r3, #0
 801084e:	4640      	mov	r0, r8
 8010850:	4649      	mov	r1, r9
 8010852:	f7f8 f87b 	bl	800894c <__aeabi_dcmplt>
 8010856:	b110      	cbz	r0, 801085e <_printf_float+0x86>
 8010858:	232d      	movs	r3, #45	@ 0x2d
 801085a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801085e:	4a91      	ldr	r2, [pc, #580]	@ (8010aa4 <_printf_float+0x2cc>)
 8010860:	4b91      	ldr	r3, [pc, #580]	@ (8010aa8 <_printf_float+0x2d0>)
 8010862:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8010866:	bf94      	ite	ls
 8010868:	4690      	movls	r8, r2
 801086a:	4698      	movhi	r8, r3
 801086c:	2303      	movs	r3, #3
 801086e:	6123      	str	r3, [r4, #16]
 8010870:	f02b 0304 	bic.w	r3, fp, #4
 8010874:	6023      	str	r3, [r4, #0]
 8010876:	f04f 0900 	mov.w	r9, #0
 801087a:	9700      	str	r7, [sp, #0]
 801087c:	4633      	mov	r3, r6
 801087e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8010880:	4621      	mov	r1, r4
 8010882:	4628      	mov	r0, r5
 8010884:	f000 f9d2 	bl	8010c2c <_printf_common>
 8010888:	3001      	adds	r0, #1
 801088a:	f040 808d 	bne.w	80109a8 <_printf_float+0x1d0>
 801088e:	f04f 30ff 	mov.w	r0, #4294967295
 8010892:	b00d      	add	sp, #52	@ 0x34
 8010894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010898:	4642      	mov	r2, r8
 801089a:	464b      	mov	r3, r9
 801089c:	4640      	mov	r0, r8
 801089e:	4649      	mov	r1, r9
 80108a0:	f7f8 f87c 	bl	800899c <__aeabi_dcmpun>
 80108a4:	b140      	cbz	r0, 80108b8 <_printf_float+0xe0>
 80108a6:	464b      	mov	r3, r9
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	bfbc      	itt	lt
 80108ac:	232d      	movlt	r3, #45	@ 0x2d
 80108ae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80108b2:	4a7e      	ldr	r2, [pc, #504]	@ (8010aac <_printf_float+0x2d4>)
 80108b4:	4b7e      	ldr	r3, [pc, #504]	@ (8010ab0 <_printf_float+0x2d8>)
 80108b6:	e7d4      	b.n	8010862 <_printf_float+0x8a>
 80108b8:	6863      	ldr	r3, [r4, #4]
 80108ba:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80108be:	9206      	str	r2, [sp, #24]
 80108c0:	1c5a      	adds	r2, r3, #1
 80108c2:	d13b      	bne.n	801093c <_printf_float+0x164>
 80108c4:	2306      	movs	r3, #6
 80108c6:	6063      	str	r3, [r4, #4]
 80108c8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80108cc:	2300      	movs	r3, #0
 80108ce:	6022      	str	r2, [r4, #0]
 80108d0:	9303      	str	r3, [sp, #12]
 80108d2:	ab0a      	add	r3, sp, #40	@ 0x28
 80108d4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80108d8:	ab09      	add	r3, sp, #36	@ 0x24
 80108da:	9300      	str	r3, [sp, #0]
 80108dc:	6861      	ldr	r1, [r4, #4]
 80108de:	ec49 8b10 	vmov	d0, r8, r9
 80108e2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80108e6:	4628      	mov	r0, r5
 80108e8:	f7ff fed6 	bl	8010698 <__cvt>
 80108ec:	9b06      	ldr	r3, [sp, #24]
 80108ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80108f0:	2b47      	cmp	r3, #71	@ 0x47
 80108f2:	4680      	mov	r8, r0
 80108f4:	d129      	bne.n	801094a <_printf_float+0x172>
 80108f6:	1cc8      	adds	r0, r1, #3
 80108f8:	db02      	blt.n	8010900 <_printf_float+0x128>
 80108fa:	6863      	ldr	r3, [r4, #4]
 80108fc:	4299      	cmp	r1, r3
 80108fe:	dd41      	ble.n	8010984 <_printf_float+0x1ac>
 8010900:	f1aa 0a02 	sub.w	sl, sl, #2
 8010904:	fa5f fa8a 	uxtb.w	sl, sl
 8010908:	3901      	subs	r1, #1
 801090a:	4652      	mov	r2, sl
 801090c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8010910:	9109      	str	r1, [sp, #36]	@ 0x24
 8010912:	f7ff ff26 	bl	8010762 <__exponent>
 8010916:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010918:	1813      	adds	r3, r2, r0
 801091a:	2a01      	cmp	r2, #1
 801091c:	4681      	mov	r9, r0
 801091e:	6123      	str	r3, [r4, #16]
 8010920:	dc02      	bgt.n	8010928 <_printf_float+0x150>
 8010922:	6822      	ldr	r2, [r4, #0]
 8010924:	07d2      	lsls	r2, r2, #31
 8010926:	d501      	bpl.n	801092c <_printf_float+0x154>
 8010928:	3301      	adds	r3, #1
 801092a:	6123      	str	r3, [r4, #16]
 801092c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8010930:	2b00      	cmp	r3, #0
 8010932:	d0a2      	beq.n	801087a <_printf_float+0xa2>
 8010934:	232d      	movs	r3, #45	@ 0x2d
 8010936:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801093a:	e79e      	b.n	801087a <_printf_float+0xa2>
 801093c:	9a06      	ldr	r2, [sp, #24]
 801093e:	2a47      	cmp	r2, #71	@ 0x47
 8010940:	d1c2      	bne.n	80108c8 <_printf_float+0xf0>
 8010942:	2b00      	cmp	r3, #0
 8010944:	d1c0      	bne.n	80108c8 <_printf_float+0xf0>
 8010946:	2301      	movs	r3, #1
 8010948:	e7bd      	b.n	80108c6 <_printf_float+0xee>
 801094a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801094e:	d9db      	bls.n	8010908 <_printf_float+0x130>
 8010950:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8010954:	d118      	bne.n	8010988 <_printf_float+0x1b0>
 8010956:	2900      	cmp	r1, #0
 8010958:	6863      	ldr	r3, [r4, #4]
 801095a:	dd0b      	ble.n	8010974 <_printf_float+0x19c>
 801095c:	6121      	str	r1, [r4, #16]
 801095e:	b913      	cbnz	r3, 8010966 <_printf_float+0x18e>
 8010960:	6822      	ldr	r2, [r4, #0]
 8010962:	07d0      	lsls	r0, r2, #31
 8010964:	d502      	bpl.n	801096c <_printf_float+0x194>
 8010966:	3301      	adds	r3, #1
 8010968:	440b      	add	r3, r1
 801096a:	6123      	str	r3, [r4, #16]
 801096c:	65a1      	str	r1, [r4, #88]	@ 0x58
 801096e:	f04f 0900 	mov.w	r9, #0
 8010972:	e7db      	b.n	801092c <_printf_float+0x154>
 8010974:	b913      	cbnz	r3, 801097c <_printf_float+0x1a4>
 8010976:	6822      	ldr	r2, [r4, #0]
 8010978:	07d2      	lsls	r2, r2, #31
 801097a:	d501      	bpl.n	8010980 <_printf_float+0x1a8>
 801097c:	3302      	adds	r3, #2
 801097e:	e7f4      	b.n	801096a <_printf_float+0x192>
 8010980:	2301      	movs	r3, #1
 8010982:	e7f2      	b.n	801096a <_printf_float+0x192>
 8010984:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8010988:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801098a:	4299      	cmp	r1, r3
 801098c:	db05      	blt.n	801099a <_printf_float+0x1c2>
 801098e:	6823      	ldr	r3, [r4, #0]
 8010990:	6121      	str	r1, [r4, #16]
 8010992:	07d8      	lsls	r0, r3, #31
 8010994:	d5ea      	bpl.n	801096c <_printf_float+0x194>
 8010996:	1c4b      	adds	r3, r1, #1
 8010998:	e7e7      	b.n	801096a <_printf_float+0x192>
 801099a:	2900      	cmp	r1, #0
 801099c:	bfd4      	ite	le
 801099e:	f1c1 0202 	rsble	r2, r1, #2
 80109a2:	2201      	movgt	r2, #1
 80109a4:	4413      	add	r3, r2
 80109a6:	e7e0      	b.n	801096a <_printf_float+0x192>
 80109a8:	6823      	ldr	r3, [r4, #0]
 80109aa:	055a      	lsls	r2, r3, #21
 80109ac:	d407      	bmi.n	80109be <_printf_float+0x1e6>
 80109ae:	6923      	ldr	r3, [r4, #16]
 80109b0:	4642      	mov	r2, r8
 80109b2:	4631      	mov	r1, r6
 80109b4:	4628      	mov	r0, r5
 80109b6:	47b8      	blx	r7
 80109b8:	3001      	adds	r0, #1
 80109ba:	d12b      	bne.n	8010a14 <_printf_float+0x23c>
 80109bc:	e767      	b.n	801088e <_printf_float+0xb6>
 80109be:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80109c2:	f240 80dd 	bls.w	8010b80 <_printf_float+0x3a8>
 80109c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80109ca:	2200      	movs	r2, #0
 80109cc:	2300      	movs	r3, #0
 80109ce:	f7f7 ffb3 	bl	8008938 <__aeabi_dcmpeq>
 80109d2:	2800      	cmp	r0, #0
 80109d4:	d033      	beq.n	8010a3e <_printf_float+0x266>
 80109d6:	4a37      	ldr	r2, [pc, #220]	@ (8010ab4 <_printf_float+0x2dc>)
 80109d8:	2301      	movs	r3, #1
 80109da:	4631      	mov	r1, r6
 80109dc:	4628      	mov	r0, r5
 80109de:	47b8      	blx	r7
 80109e0:	3001      	adds	r0, #1
 80109e2:	f43f af54 	beq.w	801088e <_printf_float+0xb6>
 80109e6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80109ea:	4543      	cmp	r3, r8
 80109ec:	db02      	blt.n	80109f4 <_printf_float+0x21c>
 80109ee:	6823      	ldr	r3, [r4, #0]
 80109f0:	07d8      	lsls	r0, r3, #31
 80109f2:	d50f      	bpl.n	8010a14 <_printf_float+0x23c>
 80109f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80109f8:	4631      	mov	r1, r6
 80109fa:	4628      	mov	r0, r5
 80109fc:	47b8      	blx	r7
 80109fe:	3001      	adds	r0, #1
 8010a00:	f43f af45 	beq.w	801088e <_printf_float+0xb6>
 8010a04:	f04f 0900 	mov.w	r9, #0
 8010a08:	f108 38ff 	add.w	r8, r8, #4294967295
 8010a0c:	f104 0a1a 	add.w	sl, r4, #26
 8010a10:	45c8      	cmp	r8, r9
 8010a12:	dc09      	bgt.n	8010a28 <_printf_float+0x250>
 8010a14:	6823      	ldr	r3, [r4, #0]
 8010a16:	079b      	lsls	r3, r3, #30
 8010a18:	f100 8103 	bmi.w	8010c22 <_printf_float+0x44a>
 8010a1c:	68e0      	ldr	r0, [r4, #12]
 8010a1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010a20:	4298      	cmp	r0, r3
 8010a22:	bfb8      	it	lt
 8010a24:	4618      	movlt	r0, r3
 8010a26:	e734      	b.n	8010892 <_printf_float+0xba>
 8010a28:	2301      	movs	r3, #1
 8010a2a:	4652      	mov	r2, sl
 8010a2c:	4631      	mov	r1, r6
 8010a2e:	4628      	mov	r0, r5
 8010a30:	47b8      	blx	r7
 8010a32:	3001      	adds	r0, #1
 8010a34:	f43f af2b 	beq.w	801088e <_printf_float+0xb6>
 8010a38:	f109 0901 	add.w	r9, r9, #1
 8010a3c:	e7e8      	b.n	8010a10 <_printf_float+0x238>
 8010a3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	dc39      	bgt.n	8010ab8 <_printf_float+0x2e0>
 8010a44:	4a1b      	ldr	r2, [pc, #108]	@ (8010ab4 <_printf_float+0x2dc>)
 8010a46:	2301      	movs	r3, #1
 8010a48:	4631      	mov	r1, r6
 8010a4a:	4628      	mov	r0, r5
 8010a4c:	47b8      	blx	r7
 8010a4e:	3001      	adds	r0, #1
 8010a50:	f43f af1d 	beq.w	801088e <_printf_float+0xb6>
 8010a54:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8010a58:	ea59 0303 	orrs.w	r3, r9, r3
 8010a5c:	d102      	bne.n	8010a64 <_printf_float+0x28c>
 8010a5e:	6823      	ldr	r3, [r4, #0]
 8010a60:	07d9      	lsls	r1, r3, #31
 8010a62:	d5d7      	bpl.n	8010a14 <_printf_float+0x23c>
 8010a64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010a68:	4631      	mov	r1, r6
 8010a6a:	4628      	mov	r0, r5
 8010a6c:	47b8      	blx	r7
 8010a6e:	3001      	adds	r0, #1
 8010a70:	f43f af0d 	beq.w	801088e <_printf_float+0xb6>
 8010a74:	f04f 0a00 	mov.w	sl, #0
 8010a78:	f104 0b1a 	add.w	fp, r4, #26
 8010a7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a7e:	425b      	negs	r3, r3
 8010a80:	4553      	cmp	r3, sl
 8010a82:	dc01      	bgt.n	8010a88 <_printf_float+0x2b0>
 8010a84:	464b      	mov	r3, r9
 8010a86:	e793      	b.n	80109b0 <_printf_float+0x1d8>
 8010a88:	2301      	movs	r3, #1
 8010a8a:	465a      	mov	r2, fp
 8010a8c:	4631      	mov	r1, r6
 8010a8e:	4628      	mov	r0, r5
 8010a90:	47b8      	blx	r7
 8010a92:	3001      	adds	r0, #1
 8010a94:	f43f aefb 	beq.w	801088e <_printf_float+0xb6>
 8010a98:	f10a 0a01 	add.w	sl, sl, #1
 8010a9c:	e7ee      	b.n	8010a7c <_printf_float+0x2a4>
 8010a9e:	bf00      	nop
 8010aa0:	7fefffff 	.word	0x7fefffff
 8010aa4:	08013898 	.word	0x08013898
 8010aa8:	0801389c 	.word	0x0801389c
 8010aac:	080138a0 	.word	0x080138a0
 8010ab0:	080138a4 	.word	0x080138a4
 8010ab4:	080138a8 	.word	0x080138a8
 8010ab8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010aba:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010abe:	4553      	cmp	r3, sl
 8010ac0:	bfa8      	it	ge
 8010ac2:	4653      	movge	r3, sl
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	4699      	mov	r9, r3
 8010ac8:	dc36      	bgt.n	8010b38 <_printf_float+0x360>
 8010aca:	f04f 0b00 	mov.w	fp, #0
 8010ace:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010ad2:	f104 021a 	add.w	r2, r4, #26
 8010ad6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010ad8:	9306      	str	r3, [sp, #24]
 8010ada:	eba3 0309 	sub.w	r3, r3, r9
 8010ade:	455b      	cmp	r3, fp
 8010ae0:	dc31      	bgt.n	8010b46 <_printf_float+0x36e>
 8010ae2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ae4:	459a      	cmp	sl, r3
 8010ae6:	dc3a      	bgt.n	8010b5e <_printf_float+0x386>
 8010ae8:	6823      	ldr	r3, [r4, #0]
 8010aea:	07da      	lsls	r2, r3, #31
 8010aec:	d437      	bmi.n	8010b5e <_printf_float+0x386>
 8010aee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010af0:	ebaa 0903 	sub.w	r9, sl, r3
 8010af4:	9b06      	ldr	r3, [sp, #24]
 8010af6:	ebaa 0303 	sub.w	r3, sl, r3
 8010afa:	4599      	cmp	r9, r3
 8010afc:	bfa8      	it	ge
 8010afe:	4699      	movge	r9, r3
 8010b00:	f1b9 0f00 	cmp.w	r9, #0
 8010b04:	dc33      	bgt.n	8010b6e <_printf_float+0x396>
 8010b06:	f04f 0800 	mov.w	r8, #0
 8010b0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010b0e:	f104 0b1a 	add.w	fp, r4, #26
 8010b12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b14:	ebaa 0303 	sub.w	r3, sl, r3
 8010b18:	eba3 0309 	sub.w	r3, r3, r9
 8010b1c:	4543      	cmp	r3, r8
 8010b1e:	f77f af79 	ble.w	8010a14 <_printf_float+0x23c>
 8010b22:	2301      	movs	r3, #1
 8010b24:	465a      	mov	r2, fp
 8010b26:	4631      	mov	r1, r6
 8010b28:	4628      	mov	r0, r5
 8010b2a:	47b8      	blx	r7
 8010b2c:	3001      	adds	r0, #1
 8010b2e:	f43f aeae 	beq.w	801088e <_printf_float+0xb6>
 8010b32:	f108 0801 	add.w	r8, r8, #1
 8010b36:	e7ec      	b.n	8010b12 <_printf_float+0x33a>
 8010b38:	4642      	mov	r2, r8
 8010b3a:	4631      	mov	r1, r6
 8010b3c:	4628      	mov	r0, r5
 8010b3e:	47b8      	blx	r7
 8010b40:	3001      	adds	r0, #1
 8010b42:	d1c2      	bne.n	8010aca <_printf_float+0x2f2>
 8010b44:	e6a3      	b.n	801088e <_printf_float+0xb6>
 8010b46:	2301      	movs	r3, #1
 8010b48:	4631      	mov	r1, r6
 8010b4a:	4628      	mov	r0, r5
 8010b4c:	9206      	str	r2, [sp, #24]
 8010b4e:	47b8      	blx	r7
 8010b50:	3001      	adds	r0, #1
 8010b52:	f43f ae9c 	beq.w	801088e <_printf_float+0xb6>
 8010b56:	9a06      	ldr	r2, [sp, #24]
 8010b58:	f10b 0b01 	add.w	fp, fp, #1
 8010b5c:	e7bb      	b.n	8010ad6 <_printf_float+0x2fe>
 8010b5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010b62:	4631      	mov	r1, r6
 8010b64:	4628      	mov	r0, r5
 8010b66:	47b8      	blx	r7
 8010b68:	3001      	adds	r0, #1
 8010b6a:	d1c0      	bne.n	8010aee <_printf_float+0x316>
 8010b6c:	e68f      	b.n	801088e <_printf_float+0xb6>
 8010b6e:	9a06      	ldr	r2, [sp, #24]
 8010b70:	464b      	mov	r3, r9
 8010b72:	4442      	add	r2, r8
 8010b74:	4631      	mov	r1, r6
 8010b76:	4628      	mov	r0, r5
 8010b78:	47b8      	blx	r7
 8010b7a:	3001      	adds	r0, #1
 8010b7c:	d1c3      	bne.n	8010b06 <_printf_float+0x32e>
 8010b7e:	e686      	b.n	801088e <_printf_float+0xb6>
 8010b80:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010b84:	f1ba 0f01 	cmp.w	sl, #1
 8010b88:	dc01      	bgt.n	8010b8e <_printf_float+0x3b6>
 8010b8a:	07db      	lsls	r3, r3, #31
 8010b8c:	d536      	bpl.n	8010bfc <_printf_float+0x424>
 8010b8e:	2301      	movs	r3, #1
 8010b90:	4642      	mov	r2, r8
 8010b92:	4631      	mov	r1, r6
 8010b94:	4628      	mov	r0, r5
 8010b96:	47b8      	blx	r7
 8010b98:	3001      	adds	r0, #1
 8010b9a:	f43f ae78 	beq.w	801088e <_printf_float+0xb6>
 8010b9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010ba2:	4631      	mov	r1, r6
 8010ba4:	4628      	mov	r0, r5
 8010ba6:	47b8      	blx	r7
 8010ba8:	3001      	adds	r0, #1
 8010baa:	f43f ae70 	beq.w	801088e <_printf_float+0xb6>
 8010bae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010bb2:	2200      	movs	r2, #0
 8010bb4:	2300      	movs	r3, #0
 8010bb6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010bba:	f7f7 febd 	bl	8008938 <__aeabi_dcmpeq>
 8010bbe:	b9c0      	cbnz	r0, 8010bf2 <_printf_float+0x41a>
 8010bc0:	4653      	mov	r3, sl
 8010bc2:	f108 0201 	add.w	r2, r8, #1
 8010bc6:	4631      	mov	r1, r6
 8010bc8:	4628      	mov	r0, r5
 8010bca:	47b8      	blx	r7
 8010bcc:	3001      	adds	r0, #1
 8010bce:	d10c      	bne.n	8010bea <_printf_float+0x412>
 8010bd0:	e65d      	b.n	801088e <_printf_float+0xb6>
 8010bd2:	2301      	movs	r3, #1
 8010bd4:	465a      	mov	r2, fp
 8010bd6:	4631      	mov	r1, r6
 8010bd8:	4628      	mov	r0, r5
 8010bda:	47b8      	blx	r7
 8010bdc:	3001      	adds	r0, #1
 8010bde:	f43f ae56 	beq.w	801088e <_printf_float+0xb6>
 8010be2:	f108 0801 	add.w	r8, r8, #1
 8010be6:	45d0      	cmp	r8, sl
 8010be8:	dbf3      	blt.n	8010bd2 <_printf_float+0x3fa>
 8010bea:	464b      	mov	r3, r9
 8010bec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8010bf0:	e6df      	b.n	80109b2 <_printf_float+0x1da>
 8010bf2:	f04f 0800 	mov.w	r8, #0
 8010bf6:	f104 0b1a 	add.w	fp, r4, #26
 8010bfa:	e7f4      	b.n	8010be6 <_printf_float+0x40e>
 8010bfc:	2301      	movs	r3, #1
 8010bfe:	4642      	mov	r2, r8
 8010c00:	e7e1      	b.n	8010bc6 <_printf_float+0x3ee>
 8010c02:	2301      	movs	r3, #1
 8010c04:	464a      	mov	r2, r9
 8010c06:	4631      	mov	r1, r6
 8010c08:	4628      	mov	r0, r5
 8010c0a:	47b8      	blx	r7
 8010c0c:	3001      	adds	r0, #1
 8010c0e:	f43f ae3e 	beq.w	801088e <_printf_float+0xb6>
 8010c12:	f108 0801 	add.w	r8, r8, #1
 8010c16:	68e3      	ldr	r3, [r4, #12]
 8010c18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010c1a:	1a5b      	subs	r3, r3, r1
 8010c1c:	4543      	cmp	r3, r8
 8010c1e:	dcf0      	bgt.n	8010c02 <_printf_float+0x42a>
 8010c20:	e6fc      	b.n	8010a1c <_printf_float+0x244>
 8010c22:	f04f 0800 	mov.w	r8, #0
 8010c26:	f104 0919 	add.w	r9, r4, #25
 8010c2a:	e7f4      	b.n	8010c16 <_printf_float+0x43e>

08010c2c <_printf_common>:
 8010c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c30:	4616      	mov	r6, r2
 8010c32:	4698      	mov	r8, r3
 8010c34:	688a      	ldr	r2, [r1, #8]
 8010c36:	690b      	ldr	r3, [r1, #16]
 8010c38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010c3c:	4293      	cmp	r3, r2
 8010c3e:	bfb8      	it	lt
 8010c40:	4613      	movlt	r3, r2
 8010c42:	6033      	str	r3, [r6, #0]
 8010c44:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010c48:	4607      	mov	r7, r0
 8010c4a:	460c      	mov	r4, r1
 8010c4c:	b10a      	cbz	r2, 8010c52 <_printf_common+0x26>
 8010c4e:	3301      	adds	r3, #1
 8010c50:	6033      	str	r3, [r6, #0]
 8010c52:	6823      	ldr	r3, [r4, #0]
 8010c54:	0699      	lsls	r1, r3, #26
 8010c56:	bf42      	ittt	mi
 8010c58:	6833      	ldrmi	r3, [r6, #0]
 8010c5a:	3302      	addmi	r3, #2
 8010c5c:	6033      	strmi	r3, [r6, #0]
 8010c5e:	6825      	ldr	r5, [r4, #0]
 8010c60:	f015 0506 	ands.w	r5, r5, #6
 8010c64:	d106      	bne.n	8010c74 <_printf_common+0x48>
 8010c66:	f104 0a19 	add.w	sl, r4, #25
 8010c6a:	68e3      	ldr	r3, [r4, #12]
 8010c6c:	6832      	ldr	r2, [r6, #0]
 8010c6e:	1a9b      	subs	r3, r3, r2
 8010c70:	42ab      	cmp	r3, r5
 8010c72:	dc26      	bgt.n	8010cc2 <_printf_common+0x96>
 8010c74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010c78:	6822      	ldr	r2, [r4, #0]
 8010c7a:	3b00      	subs	r3, #0
 8010c7c:	bf18      	it	ne
 8010c7e:	2301      	movne	r3, #1
 8010c80:	0692      	lsls	r2, r2, #26
 8010c82:	d42b      	bmi.n	8010cdc <_printf_common+0xb0>
 8010c84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010c88:	4641      	mov	r1, r8
 8010c8a:	4638      	mov	r0, r7
 8010c8c:	47c8      	blx	r9
 8010c8e:	3001      	adds	r0, #1
 8010c90:	d01e      	beq.n	8010cd0 <_printf_common+0xa4>
 8010c92:	6823      	ldr	r3, [r4, #0]
 8010c94:	6922      	ldr	r2, [r4, #16]
 8010c96:	f003 0306 	and.w	r3, r3, #6
 8010c9a:	2b04      	cmp	r3, #4
 8010c9c:	bf02      	ittt	eq
 8010c9e:	68e5      	ldreq	r5, [r4, #12]
 8010ca0:	6833      	ldreq	r3, [r6, #0]
 8010ca2:	1aed      	subeq	r5, r5, r3
 8010ca4:	68a3      	ldr	r3, [r4, #8]
 8010ca6:	bf0c      	ite	eq
 8010ca8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010cac:	2500      	movne	r5, #0
 8010cae:	4293      	cmp	r3, r2
 8010cb0:	bfc4      	itt	gt
 8010cb2:	1a9b      	subgt	r3, r3, r2
 8010cb4:	18ed      	addgt	r5, r5, r3
 8010cb6:	2600      	movs	r6, #0
 8010cb8:	341a      	adds	r4, #26
 8010cba:	42b5      	cmp	r5, r6
 8010cbc:	d11a      	bne.n	8010cf4 <_printf_common+0xc8>
 8010cbe:	2000      	movs	r0, #0
 8010cc0:	e008      	b.n	8010cd4 <_printf_common+0xa8>
 8010cc2:	2301      	movs	r3, #1
 8010cc4:	4652      	mov	r2, sl
 8010cc6:	4641      	mov	r1, r8
 8010cc8:	4638      	mov	r0, r7
 8010cca:	47c8      	blx	r9
 8010ccc:	3001      	adds	r0, #1
 8010cce:	d103      	bne.n	8010cd8 <_printf_common+0xac>
 8010cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8010cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010cd8:	3501      	adds	r5, #1
 8010cda:	e7c6      	b.n	8010c6a <_printf_common+0x3e>
 8010cdc:	18e1      	adds	r1, r4, r3
 8010cde:	1c5a      	adds	r2, r3, #1
 8010ce0:	2030      	movs	r0, #48	@ 0x30
 8010ce2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010ce6:	4422      	add	r2, r4
 8010ce8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010cec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010cf0:	3302      	adds	r3, #2
 8010cf2:	e7c7      	b.n	8010c84 <_printf_common+0x58>
 8010cf4:	2301      	movs	r3, #1
 8010cf6:	4622      	mov	r2, r4
 8010cf8:	4641      	mov	r1, r8
 8010cfa:	4638      	mov	r0, r7
 8010cfc:	47c8      	blx	r9
 8010cfe:	3001      	adds	r0, #1
 8010d00:	d0e6      	beq.n	8010cd0 <_printf_common+0xa4>
 8010d02:	3601      	adds	r6, #1
 8010d04:	e7d9      	b.n	8010cba <_printf_common+0x8e>
	...

08010d08 <_printf_i>:
 8010d08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010d0c:	7e0f      	ldrb	r7, [r1, #24]
 8010d0e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010d10:	2f78      	cmp	r7, #120	@ 0x78
 8010d12:	4691      	mov	r9, r2
 8010d14:	4680      	mov	r8, r0
 8010d16:	460c      	mov	r4, r1
 8010d18:	469a      	mov	sl, r3
 8010d1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010d1e:	d807      	bhi.n	8010d30 <_printf_i+0x28>
 8010d20:	2f62      	cmp	r7, #98	@ 0x62
 8010d22:	d80a      	bhi.n	8010d3a <_printf_i+0x32>
 8010d24:	2f00      	cmp	r7, #0
 8010d26:	f000 80d2 	beq.w	8010ece <_printf_i+0x1c6>
 8010d2a:	2f58      	cmp	r7, #88	@ 0x58
 8010d2c:	f000 80b9 	beq.w	8010ea2 <_printf_i+0x19a>
 8010d30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010d34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010d38:	e03a      	b.n	8010db0 <_printf_i+0xa8>
 8010d3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010d3e:	2b15      	cmp	r3, #21
 8010d40:	d8f6      	bhi.n	8010d30 <_printf_i+0x28>
 8010d42:	a101      	add	r1, pc, #4	@ (adr r1, 8010d48 <_printf_i+0x40>)
 8010d44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010d48:	08010da1 	.word	0x08010da1
 8010d4c:	08010db5 	.word	0x08010db5
 8010d50:	08010d31 	.word	0x08010d31
 8010d54:	08010d31 	.word	0x08010d31
 8010d58:	08010d31 	.word	0x08010d31
 8010d5c:	08010d31 	.word	0x08010d31
 8010d60:	08010db5 	.word	0x08010db5
 8010d64:	08010d31 	.word	0x08010d31
 8010d68:	08010d31 	.word	0x08010d31
 8010d6c:	08010d31 	.word	0x08010d31
 8010d70:	08010d31 	.word	0x08010d31
 8010d74:	08010eb5 	.word	0x08010eb5
 8010d78:	08010ddf 	.word	0x08010ddf
 8010d7c:	08010e6f 	.word	0x08010e6f
 8010d80:	08010d31 	.word	0x08010d31
 8010d84:	08010d31 	.word	0x08010d31
 8010d88:	08010ed7 	.word	0x08010ed7
 8010d8c:	08010d31 	.word	0x08010d31
 8010d90:	08010ddf 	.word	0x08010ddf
 8010d94:	08010d31 	.word	0x08010d31
 8010d98:	08010d31 	.word	0x08010d31
 8010d9c:	08010e77 	.word	0x08010e77
 8010da0:	6833      	ldr	r3, [r6, #0]
 8010da2:	1d1a      	adds	r2, r3, #4
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	6032      	str	r2, [r6, #0]
 8010da8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010dac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010db0:	2301      	movs	r3, #1
 8010db2:	e09d      	b.n	8010ef0 <_printf_i+0x1e8>
 8010db4:	6833      	ldr	r3, [r6, #0]
 8010db6:	6820      	ldr	r0, [r4, #0]
 8010db8:	1d19      	adds	r1, r3, #4
 8010dba:	6031      	str	r1, [r6, #0]
 8010dbc:	0606      	lsls	r6, r0, #24
 8010dbe:	d501      	bpl.n	8010dc4 <_printf_i+0xbc>
 8010dc0:	681d      	ldr	r5, [r3, #0]
 8010dc2:	e003      	b.n	8010dcc <_printf_i+0xc4>
 8010dc4:	0645      	lsls	r5, r0, #25
 8010dc6:	d5fb      	bpl.n	8010dc0 <_printf_i+0xb8>
 8010dc8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010dcc:	2d00      	cmp	r5, #0
 8010dce:	da03      	bge.n	8010dd8 <_printf_i+0xd0>
 8010dd0:	232d      	movs	r3, #45	@ 0x2d
 8010dd2:	426d      	negs	r5, r5
 8010dd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010dd8:	4859      	ldr	r0, [pc, #356]	@ (8010f40 <_printf_i+0x238>)
 8010dda:	230a      	movs	r3, #10
 8010ddc:	e011      	b.n	8010e02 <_printf_i+0xfa>
 8010dde:	6821      	ldr	r1, [r4, #0]
 8010de0:	6833      	ldr	r3, [r6, #0]
 8010de2:	0608      	lsls	r0, r1, #24
 8010de4:	f853 5b04 	ldr.w	r5, [r3], #4
 8010de8:	d402      	bmi.n	8010df0 <_printf_i+0xe8>
 8010dea:	0649      	lsls	r1, r1, #25
 8010dec:	bf48      	it	mi
 8010dee:	b2ad      	uxthmi	r5, r5
 8010df0:	2f6f      	cmp	r7, #111	@ 0x6f
 8010df2:	4853      	ldr	r0, [pc, #332]	@ (8010f40 <_printf_i+0x238>)
 8010df4:	6033      	str	r3, [r6, #0]
 8010df6:	bf14      	ite	ne
 8010df8:	230a      	movne	r3, #10
 8010dfa:	2308      	moveq	r3, #8
 8010dfc:	2100      	movs	r1, #0
 8010dfe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010e02:	6866      	ldr	r6, [r4, #4]
 8010e04:	60a6      	str	r6, [r4, #8]
 8010e06:	2e00      	cmp	r6, #0
 8010e08:	bfa2      	ittt	ge
 8010e0a:	6821      	ldrge	r1, [r4, #0]
 8010e0c:	f021 0104 	bicge.w	r1, r1, #4
 8010e10:	6021      	strge	r1, [r4, #0]
 8010e12:	b90d      	cbnz	r5, 8010e18 <_printf_i+0x110>
 8010e14:	2e00      	cmp	r6, #0
 8010e16:	d04b      	beq.n	8010eb0 <_printf_i+0x1a8>
 8010e18:	4616      	mov	r6, r2
 8010e1a:	fbb5 f1f3 	udiv	r1, r5, r3
 8010e1e:	fb03 5711 	mls	r7, r3, r1, r5
 8010e22:	5dc7      	ldrb	r7, [r0, r7]
 8010e24:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010e28:	462f      	mov	r7, r5
 8010e2a:	42bb      	cmp	r3, r7
 8010e2c:	460d      	mov	r5, r1
 8010e2e:	d9f4      	bls.n	8010e1a <_printf_i+0x112>
 8010e30:	2b08      	cmp	r3, #8
 8010e32:	d10b      	bne.n	8010e4c <_printf_i+0x144>
 8010e34:	6823      	ldr	r3, [r4, #0]
 8010e36:	07df      	lsls	r7, r3, #31
 8010e38:	d508      	bpl.n	8010e4c <_printf_i+0x144>
 8010e3a:	6923      	ldr	r3, [r4, #16]
 8010e3c:	6861      	ldr	r1, [r4, #4]
 8010e3e:	4299      	cmp	r1, r3
 8010e40:	bfde      	ittt	le
 8010e42:	2330      	movle	r3, #48	@ 0x30
 8010e44:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010e48:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010e4c:	1b92      	subs	r2, r2, r6
 8010e4e:	6122      	str	r2, [r4, #16]
 8010e50:	f8cd a000 	str.w	sl, [sp]
 8010e54:	464b      	mov	r3, r9
 8010e56:	aa03      	add	r2, sp, #12
 8010e58:	4621      	mov	r1, r4
 8010e5a:	4640      	mov	r0, r8
 8010e5c:	f7ff fee6 	bl	8010c2c <_printf_common>
 8010e60:	3001      	adds	r0, #1
 8010e62:	d14a      	bne.n	8010efa <_printf_i+0x1f2>
 8010e64:	f04f 30ff 	mov.w	r0, #4294967295
 8010e68:	b004      	add	sp, #16
 8010e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e6e:	6823      	ldr	r3, [r4, #0]
 8010e70:	f043 0320 	orr.w	r3, r3, #32
 8010e74:	6023      	str	r3, [r4, #0]
 8010e76:	4833      	ldr	r0, [pc, #204]	@ (8010f44 <_printf_i+0x23c>)
 8010e78:	2778      	movs	r7, #120	@ 0x78
 8010e7a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010e7e:	6823      	ldr	r3, [r4, #0]
 8010e80:	6831      	ldr	r1, [r6, #0]
 8010e82:	061f      	lsls	r7, r3, #24
 8010e84:	f851 5b04 	ldr.w	r5, [r1], #4
 8010e88:	d402      	bmi.n	8010e90 <_printf_i+0x188>
 8010e8a:	065f      	lsls	r7, r3, #25
 8010e8c:	bf48      	it	mi
 8010e8e:	b2ad      	uxthmi	r5, r5
 8010e90:	6031      	str	r1, [r6, #0]
 8010e92:	07d9      	lsls	r1, r3, #31
 8010e94:	bf44      	itt	mi
 8010e96:	f043 0320 	orrmi.w	r3, r3, #32
 8010e9a:	6023      	strmi	r3, [r4, #0]
 8010e9c:	b11d      	cbz	r5, 8010ea6 <_printf_i+0x19e>
 8010e9e:	2310      	movs	r3, #16
 8010ea0:	e7ac      	b.n	8010dfc <_printf_i+0xf4>
 8010ea2:	4827      	ldr	r0, [pc, #156]	@ (8010f40 <_printf_i+0x238>)
 8010ea4:	e7e9      	b.n	8010e7a <_printf_i+0x172>
 8010ea6:	6823      	ldr	r3, [r4, #0]
 8010ea8:	f023 0320 	bic.w	r3, r3, #32
 8010eac:	6023      	str	r3, [r4, #0]
 8010eae:	e7f6      	b.n	8010e9e <_printf_i+0x196>
 8010eb0:	4616      	mov	r6, r2
 8010eb2:	e7bd      	b.n	8010e30 <_printf_i+0x128>
 8010eb4:	6833      	ldr	r3, [r6, #0]
 8010eb6:	6825      	ldr	r5, [r4, #0]
 8010eb8:	6961      	ldr	r1, [r4, #20]
 8010eba:	1d18      	adds	r0, r3, #4
 8010ebc:	6030      	str	r0, [r6, #0]
 8010ebe:	062e      	lsls	r6, r5, #24
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	d501      	bpl.n	8010ec8 <_printf_i+0x1c0>
 8010ec4:	6019      	str	r1, [r3, #0]
 8010ec6:	e002      	b.n	8010ece <_printf_i+0x1c6>
 8010ec8:	0668      	lsls	r0, r5, #25
 8010eca:	d5fb      	bpl.n	8010ec4 <_printf_i+0x1bc>
 8010ecc:	8019      	strh	r1, [r3, #0]
 8010ece:	2300      	movs	r3, #0
 8010ed0:	6123      	str	r3, [r4, #16]
 8010ed2:	4616      	mov	r6, r2
 8010ed4:	e7bc      	b.n	8010e50 <_printf_i+0x148>
 8010ed6:	6833      	ldr	r3, [r6, #0]
 8010ed8:	1d1a      	adds	r2, r3, #4
 8010eda:	6032      	str	r2, [r6, #0]
 8010edc:	681e      	ldr	r6, [r3, #0]
 8010ede:	6862      	ldr	r2, [r4, #4]
 8010ee0:	2100      	movs	r1, #0
 8010ee2:	4630      	mov	r0, r6
 8010ee4:	f7f7 f8ac 	bl	8008040 <memchr>
 8010ee8:	b108      	cbz	r0, 8010eee <_printf_i+0x1e6>
 8010eea:	1b80      	subs	r0, r0, r6
 8010eec:	6060      	str	r0, [r4, #4]
 8010eee:	6863      	ldr	r3, [r4, #4]
 8010ef0:	6123      	str	r3, [r4, #16]
 8010ef2:	2300      	movs	r3, #0
 8010ef4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010ef8:	e7aa      	b.n	8010e50 <_printf_i+0x148>
 8010efa:	6923      	ldr	r3, [r4, #16]
 8010efc:	4632      	mov	r2, r6
 8010efe:	4649      	mov	r1, r9
 8010f00:	4640      	mov	r0, r8
 8010f02:	47d0      	blx	sl
 8010f04:	3001      	adds	r0, #1
 8010f06:	d0ad      	beq.n	8010e64 <_printf_i+0x15c>
 8010f08:	6823      	ldr	r3, [r4, #0]
 8010f0a:	079b      	lsls	r3, r3, #30
 8010f0c:	d413      	bmi.n	8010f36 <_printf_i+0x22e>
 8010f0e:	68e0      	ldr	r0, [r4, #12]
 8010f10:	9b03      	ldr	r3, [sp, #12]
 8010f12:	4298      	cmp	r0, r3
 8010f14:	bfb8      	it	lt
 8010f16:	4618      	movlt	r0, r3
 8010f18:	e7a6      	b.n	8010e68 <_printf_i+0x160>
 8010f1a:	2301      	movs	r3, #1
 8010f1c:	4632      	mov	r2, r6
 8010f1e:	4649      	mov	r1, r9
 8010f20:	4640      	mov	r0, r8
 8010f22:	47d0      	blx	sl
 8010f24:	3001      	adds	r0, #1
 8010f26:	d09d      	beq.n	8010e64 <_printf_i+0x15c>
 8010f28:	3501      	adds	r5, #1
 8010f2a:	68e3      	ldr	r3, [r4, #12]
 8010f2c:	9903      	ldr	r1, [sp, #12]
 8010f2e:	1a5b      	subs	r3, r3, r1
 8010f30:	42ab      	cmp	r3, r5
 8010f32:	dcf2      	bgt.n	8010f1a <_printf_i+0x212>
 8010f34:	e7eb      	b.n	8010f0e <_printf_i+0x206>
 8010f36:	2500      	movs	r5, #0
 8010f38:	f104 0619 	add.w	r6, r4, #25
 8010f3c:	e7f5      	b.n	8010f2a <_printf_i+0x222>
 8010f3e:	bf00      	nop
 8010f40:	080138aa 	.word	0x080138aa
 8010f44:	080138bb 	.word	0x080138bb

08010f48 <std>:
 8010f48:	2300      	movs	r3, #0
 8010f4a:	b510      	push	{r4, lr}
 8010f4c:	4604      	mov	r4, r0
 8010f4e:	e9c0 3300 	strd	r3, r3, [r0]
 8010f52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010f56:	6083      	str	r3, [r0, #8]
 8010f58:	8181      	strh	r1, [r0, #12]
 8010f5a:	6643      	str	r3, [r0, #100]	@ 0x64
 8010f5c:	81c2      	strh	r2, [r0, #14]
 8010f5e:	6183      	str	r3, [r0, #24]
 8010f60:	4619      	mov	r1, r3
 8010f62:	2208      	movs	r2, #8
 8010f64:	305c      	adds	r0, #92	@ 0x5c
 8010f66:	f000 f935 	bl	80111d4 <memset>
 8010f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8010fa0 <std+0x58>)
 8010f6c:	6263      	str	r3, [r4, #36]	@ 0x24
 8010f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8010fa4 <std+0x5c>)
 8010f70:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010f72:	4b0d      	ldr	r3, [pc, #52]	@ (8010fa8 <std+0x60>)
 8010f74:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010f76:	4b0d      	ldr	r3, [pc, #52]	@ (8010fac <std+0x64>)
 8010f78:	6323      	str	r3, [r4, #48]	@ 0x30
 8010f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8010fb0 <std+0x68>)
 8010f7c:	6224      	str	r4, [r4, #32]
 8010f7e:	429c      	cmp	r4, r3
 8010f80:	d006      	beq.n	8010f90 <std+0x48>
 8010f82:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010f86:	4294      	cmp	r4, r2
 8010f88:	d002      	beq.n	8010f90 <std+0x48>
 8010f8a:	33d0      	adds	r3, #208	@ 0xd0
 8010f8c:	429c      	cmp	r4, r3
 8010f8e:	d105      	bne.n	8010f9c <std+0x54>
 8010f90:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010f98:	f000 b9a8 	b.w	80112ec <__retarget_lock_init_recursive>
 8010f9c:	bd10      	pop	{r4, pc}
 8010f9e:	bf00      	nop
 8010fa0:	0801110d 	.word	0x0801110d
 8010fa4:	0801112f 	.word	0x0801112f
 8010fa8:	08011167 	.word	0x08011167
 8010fac:	0801118b 	.word	0x0801118b
 8010fb0:	20000c94 	.word	0x20000c94

08010fb4 <stdio_exit_handler>:
 8010fb4:	4a02      	ldr	r2, [pc, #8]	@ (8010fc0 <stdio_exit_handler+0xc>)
 8010fb6:	4903      	ldr	r1, [pc, #12]	@ (8010fc4 <stdio_exit_handler+0x10>)
 8010fb8:	4803      	ldr	r0, [pc, #12]	@ (8010fc8 <stdio_exit_handler+0x14>)
 8010fba:	f000 b869 	b.w	8011090 <_fwalk_sglue>
 8010fbe:	bf00      	nop
 8010fc0:	20000234 	.word	0x20000234
 8010fc4:	08012c65 	.word	0x08012c65
 8010fc8:	20000244 	.word	0x20000244

08010fcc <cleanup_stdio>:
 8010fcc:	6841      	ldr	r1, [r0, #4]
 8010fce:	4b0c      	ldr	r3, [pc, #48]	@ (8011000 <cleanup_stdio+0x34>)
 8010fd0:	4299      	cmp	r1, r3
 8010fd2:	b510      	push	{r4, lr}
 8010fd4:	4604      	mov	r4, r0
 8010fd6:	d001      	beq.n	8010fdc <cleanup_stdio+0x10>
 8010fd8:	f001 fe44 	bl	8012c64 <_fflush_r>
 8010fdc:	68a1      	ldr	r1, [r4, #8]
 8010fde:	4b09      	ldr	r3, [pc, #36]	@ (8011004 <cleanup_stdio+0x38>)
 8010fe0:	4299      	cmp	r1, r3
 8010fe2:	d002      	beq.n	8010fea <cleanup_stdio+0x1e>
 8010fe4:	4620      	mov	r0, r4
 8010fe6:	f001 fe3d 	bl	8012c64 <_fflush_r>
 8010fea:	68e1      	ldr	r1, [r4, #12]
 8010fec:	4b06      	ldr	r3, [pc, #24]	@ (8011008 <cleanup_stdio+0x3c>)
 8010fee:	4299      	cmp	r1, r3
 8010ff0:	d004      	beq.n	8010ffc <cleanup_stdio+0x30>
 8010ff2:	4620      	mov	r0, r4
 8010ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ff8:	f001 be34 	b.w	8012c64 <_fflush_r>
 8010ffc:	bd10      	pop	{r4, pc}
 8010ffe:	bf00      	nop
 8011000:	20000c94 	.word	0x20000c94
 8011004:	20000cfc 	.word	0x20000cfc
 8011008:	20000d64 	.word	0x20000d64

0801100c <global_stdio_init.part.0>:
 801100c:	b510      	push	{r4, lr}
 801100e:	4b0b      	ldr	r3, [pc, #44]	@ (801103c <global_stdio_init.part.0+0x30>)
 8011010:	4c0b      	ldr	r4, [pc, #44]	@ (8011040 <global_stdio_init.part.0+0x34>)
 8011012:	4a0c      	ldr	r2, [pc, #48]	@ (8011044 <global_stdio_init.part.0+0x38>)
 8011014:	601a      	str	r2, [r3, #0]
 8011016:	4620      	mov	r0, r4
 8011018:	2200      	movs	r2, #0
 801101a:	2104      	movs	r1, #4
 801101c:	f7ff ff94 	bl	8010f48 <std>
 8011020:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011024:	2201      	movs	r2, #1
 8011026:	2109      	movs	r1, #9
 8011028:	f7ff ff8e 	bl	8010f48 <std>
 801102c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011030:	2202      	movs	r2, #2
 8011032:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011036:	2112      	movs	r1, #18
 8011038:	f7ff bf86 	b.w	8010f48 <std>
 801103c:	20000dcc 	.word	0x20000dcc
 8011040:	20000c94 	.word	0x20000c94
 8011044:	08010fb5 	.word	0x08010fb5

08011048 <__sfp_lock_acquire>:
 8011048:	4801      	ldr	r0, [pc, #4]	@ (8011050 <__sfp_lock_acquire+0x8>)
 801104a:	f000 b950 	b.w	80112ee <__retarget_lock_acquire_recursive>
 801104e:	bf00      	nop
 8011050:	20000dd5 	.word	0x20000dd5

08011054 <__sfp_lock_release>:
 8011054:	4801      	ldr	r0, [pc, #4]	@ (801105c <__sfp_lock_release+0x8>)
 8011056:	f000 b94b 	b.w	80112f0 <__retarget_lock_release_recursive>
 801105a:	bf00      	nop
 801105c:	20000dd5 	.word	0x20000dd5

08011060 <__sinit>:
 8011060:	b510      	push	{r4, lr}
 8011062:	4604      	mov	r4, r0
 8011064:	f7ff fff0 	bl	8011048 <__sfp_lock_acquire>
 8011068:	6a23      	ldr	r3, [r4, #32]
 801106a:	b11b      	cbz	r3, 8011074 <__sinit+0x14>
 801106c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011070:	f7ff bff0 	b.w	8011054 <__sfp_lock_release>
 8011074:	4b04      	ldr	r3, [pc, #16]	@ (8011088 <__sinit+0x28>)
 8011076:	6223      	str	r3, [r4, #32]
 8011078:	4b04      	ldr	r3, [pc, #16]	@ (801108c <__sinit+0x2c>)
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	2b00      	cmp	r3, #0
 801107e:	d1f5      	bne.n	801106c <__sinit+0xc>
 8011080:	f7ff ffc4 	bl	801100c <global_stdio_init.part.0>
 8011084:	e7f2      	b.n	801106c <__sinit+0xc>
 8011086:	bf00      	nop
 8011088:	08010fcd 	.word	0x08010fcd
 801108c:	20000dcc 	.word	0x20000dcc

08011090 <_fwalk_sglue>:
 8011090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011094:	4607      	mov	r7, r0
 8011096:	4688      	mov	r8, r1
 8011098:	4614      	mov	r4, r2
 801109a:	2600      	movs	r6, #0
 801109c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80110a0:	f1b9 0901 	subs.w	r9, r9, #1
 80110a4:	d505      	bpl.n	80110b2 <_fwalk_sglue+0x22>
 80110a6:	6824      	ldr	r4, [r4, #0]
 80110a8:	2c00      	cmp	r4, #0
 80110aa:	d1f7      	bne.n	801109c <_fwalk_sglue+0xc>
 80110ac:	4630      	mov	r0, r6
 80110ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80110b2:	89ab      	ldrh	r3, [r5, #12]
 80110b4:	2b01      	cmp	r3, #1
 80110b6:	d907      	bls.n	80110c8 <_fwalk_sglue+0x38>
 80110b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80110bc:	3301      	adds	r3, #1
 80110be:	d003      	beq.n	80110c8 <_fwalk_sglue+0x38>
 80110c0:	4629      	mov	r1, r5
 80110c2:	4638      	mov	r0, r7
 80110c4:	47c0      	blx	r8
 80110c6:	4306      	orrs	r6, r0
 80110c8:	3568      	adds	r5, #104	@ 0x68
 80110ca:	e7e9      	b.n	80110a0 <_fwalk_sglue+0x10>

080110cc <siprintf>:
 80110cc:	b40e      	push	{r1, r2, r3}
 80110ce:	b500      	push	{lr}
 80110d0:	b09c      	sub	sp, #112	@ 0x70
 80110d2:	ab1d      	add	r3, sp, #116	@ 0x74
 80110d4:	9002      	str	r0, [sp, #8]
 80110d6:	9006      	str	r0, [sp, #24]
 80110d8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80110dc:	4809      	ldr	r0, [pc, #36]	@ (8011104 <siprintf+0x38>)
 80110de:	9107      	str	r1, [sp, #28]
 80110e0:	9104      	str	r1, [sp, #16]
 80110e2:	4909      	ldr	r1, [pc, #36]	@ (8011108 <siprintf+0x3c>)
 80110e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80110e8:	9105      	str	r1, [sp, #20]
 80110ea:	6800      	ldr	r0, [r0, #0]
 80110ec:	9301      	str	r3, [sp, #4]
 80110ee:	a902      	add	r1, sp, #8
 80110f0:	f001 fc38 	bl	8012964 <_svfiprintf_r>
 80110f4:	9b02      	ldr	r3, [sp, #8]
 80110f6:	2200      	movs	r2, #0
 80110f8:	701a      	strb	r2, [r3, #0]
 80110fa:	b01c      	add	sp, #112	@ 0x70
 80110fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8011100:	b003      	add	sp, #12
 8011102:	4770      	bx	lr
 8011104:	20000240 	.word	0x20000240
 8011108:	ffff0208 	.word	0xffff0208

0801110c <__sread>:
 801110c:	b510      	push	{r4, lr}
 801110e:	460c      	mov	r4, r1
 8011110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011114:	f000 f89c 	bl	8011250 <_read_r>
 8011118:	2800      	cmp	r0, #0
 801111a:	bfab      	itete	ge
 801111c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801111e:	89a3      	ldrhlt	r3, [r4, #12]
 8011120:	181b      	addge	r3, r3, r0
 8011122:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011126:	bfac      	ite	ge
 8011128:	6563      	strge	r3, [r4, #84]	@ 0x54
 801112a:	81a3      	strhlt	r3, [r4, #12]
 801112c:	bd10      	pop	{r4, pc}

0801112e <__swrite>:
 801112e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011132:	461f      	mov	r7, r3
 8011134:	898b      	ldrh	r3, [r1, #12]
 8011136:	05db      	lsls	r3, r3, #23
 8011138:	4605      	mov	r5, r0
 801113a:	460c      	mov	r4, r1
 801113c:	4616      	mov	r6, r2
 801113e:	d505      	bpl.n	801114c <__swrite+0x1e>
 8011140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011144:	2302      	movs	r3, #2
 8011146:	2200      	movs	r2, #0
 8011148:	f000 f870 	bl	801122c <_lseek_r>
 801114c:	89a3      	ldrh	r3, [r4, #12]
 801114e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011152:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011156:	81a3      	strh	r3, [r4, #12]
 8011158:	4632      	mov	r2, r6
 801115a:	463b      	mov	r3, r7
 801115c:	4628      	mov	r0, r5
 801115e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011162:	f000 b887 	b.w	8011274 <_write_r>

08011166 <__sseek>:
 8011166:	b510      	push	{r4, lr}
 8011168:	460c      	mov	r4, r1
 801116a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801116e:	f000 f85d 	bl	801122c <_lseek_r>
 8011172:	1c43      	adds	r3, r0, #1
 8011174:	89a3      	ldrh	r3, [r4, #12]
 8011176:	bf15      	itete	ne
 8011178:	6560      	strne	r0, [r4, #84]	@ 0x54
 801117a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801117e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011182:	81a3      	strheq	r3, [r4, #12]
 8011184:	bf18      	it	ne
 8011186:	81a3      	strhne	r3, [r4, #12]
 8011188:	bd10      	pop	{r4, pc}

0801118a <__sclose>:
 801118a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801118e:	f000 b83d 	b.w	801120c <_close_r>
	...

08011194 <_vsiprintf_r>:
 8011194:	b500      	push	{lr}
 8011196:	b09b      	sub	sp, #108	@ 0x6c
 8011198:	9100      	str	r1, [sp, #0]
 801119a:	9104      	str	r1, [sp, #16]
 801119c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80111a0:	9105      	str	r1, [sp, #20]
 80111a2:	9102      	str	r1, [sp, #8]
 80111a4:	4905      	ldr	r1, [pc, #20]	@ (80111bc <_vsiprintf_r+0x28>)
 80111a6:	9103      	str	r1, [sp, #12]
 80111a8:	4669      	mov	r1, sp
 80111aa:	f001 fbdb 	bl	8012964 <_svfiprintf_r>
 80111ae:	9b00      	ldr	r3, [sp, #0]
 80111b0:	2200      	movs	r2, #0
 80111b2:	701a      	strb	r2, [r3, #0]
 80111b4:	b01b      	add	sp, #108	@ 0x6c
 80111b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80111ba:	bf00      	nop
 80111bc:	ffff0208 	.word	0xffff0208

080111c0 <vsiprintf>:
 80111c0:	4613      	mov	r3, r2
 80111c2:	460a      	mov	r2, r1
 80111c4:	4601      	mov	r1, r0
 80111c6:	4802      	ldr	r0, [pc, #8]	@ (80111d0 <vsiprintf+0x10>)
 80111c8:	6800      	ldr	r0, [r0, #0]
 80111ca:	f7ff bfe3 	b.w	8011194 <_vsiprintf_r>
 80111ce:	bf00      	nop
 80111d0:	20000240 	.word	0x20000240

080111d4 <memset>:
 80111d4:	4402      	add	r2, r0
 80111d6:	4603      	mov	r3, r0
 80111d8:	4293      	cmp	r3, r2
 80111da:	d100      	bne.n	80111de <memset+0xa>
 80111dc:	4770      	bx	lr
 80111de:	f803 1b01 	strb.w	r1, [r3], #1
 80111e2:	e7f9      	b.n	80111d8 <memset+0x4>

080111e4 <strcat>:
 80111e4:	b510      	push	{r4, lr}
 80111e6:	4602      	mov	r2, r0
 80111e8:	7814      	ldrb	r4, [r2, #0]
 80111ea:	4613      	mov	r3, r2
 80111ec:	3201      	adds	r2, #1
 80111ee:	2c00      	cmp	r4, #0
 80111f0:	d1fa      	bne.n	80111e8 <strcat+0x4>
 80111f2:	3b01      	subs	r3, #1
 80111f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80111f8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80111fc:	2a00      	cmp	r2, #0
 80111fe:	d1f9      	bne.n	80111f4 <strcat+0x10>
 8011200:	bd10      	pop	{r4, pc}
	...

08011204 <_localeconv_r>:
 8011204:	4800      	ldr	r0, [pc, #0]	@ (8011208 <_localeconv_r+0x4>)
 8011206:	4770      	bx	lr
 8011208:	20000380 	.word	0x20000380

0801120c <_close_r>:
 801120c:	b538      	push	{r3, r4, r5, lr}
 801120e:	4d06      	ldr	r5, [pc, #24]	@ (8011228 <_close_r+0x1c>)
 8011210:	2300      	movs	r3, #0
 8011212:	4604      	mov	r4, r0
 8011214:	4608      	mov	r0, r1
 8011216:	602b      	str	r3, [r5, #0]
 8011218:	f7fa f864 	bl	800b2e4 <_close>
 801121c:	1c43      	adds	r3, r0, #1
 801121e:	d102      	bne.n	8011226 <_close_r+0x1a>
 8011220:	682b      	ldr	r3, [r5, #0]
 8011222:	b103      	cbz	r3, 8011226 <_close_r+0x1a>
 8011224:	6023      	str	r3, [r4, #0]
 8011226:	bd38      	pop	{r3, r4, r5, pc}
 8011228:	20000dd0 	.word	0x20000dd0

0801122c <_lseek_r>:
 801122c:	b538      	push	{r3, r4, r5, lr}
 801122e:	4d07      	ldr	r5, [pc, #28]	@ (801124c <_lseek_r+0x20>)
 8011230:	4604      	mov	r4, r0
 8011232:	4608      	mov	r0, r1
 8011234:	4611      	mov	r1, r2
 8011236:	2200      	movs	r2, #0
 8011238:	602a      	str	r2, [r5, #0]
 801123a:	461a      	mov	r2, r3
 801123c:	f7fa f879 	bl	800b332 <_lseek>
 8011240:	1c43      	adds	r3, r0, #1
 8011242:	d102      	bne.n	801124a <_lseek_r+0x1e>
 8011244:	682b      	ldr	r3, [r5, #0]
 8011246:	b103      	cbz	r3, 801124a <_lseek_r+0x1e>
 8011248:	6023      	str	r3, [r4, #0]
 801124a:	bd38      	pop	{r3, r4, r5, pc}
 801124c:	20000dd0 	.word	0x20000dd0

08011250 <_read_r>:
 8011250:	b538      	push	{r3, r4, r5, lr}
 8011252:	4d07      	ldr	r5, [pc, #28]	@ (8011270 <_read_r+0x20>)
 8011254:	4604      	mov	r4, r0
 8011256:	4608      	mov	r0, r1
 8011258:	4611      	mov	r1, r2
 801125a:	2200      	movs	r2, #0
 801125c:	602a      	str	r2, [r5, #0]
 801125e:	461a      	mov	r2, r3
 8011260:	f7fa f807 	bl	800b272 <_read>
 8011264:	1c43      	adds	r3, r0, #1
 8011266:	d102      	bne.n	801126e <_read_r+0x1e>
 8011268:	682b      	ldr	r3, [r5, #0]
 801126a:	b103      	cbz	r3, 801126e <_read_r+0x1e>
 801126c:	6023      	str	r3, [r4, #0]
 801126e:	bd38      	pop	{r3, r4, r5, pc}
 8011270:	20000dd0 	.word	0x20000dd0

08011274 <_write_r>:
 8011274:	b538      	push	{r3, r4, r5, lr}
 8011276:	4d07      	ldr	r5, [pc, #28]	@ (8011294 <_write_r+0x20>)
 8011278:	4604      	mov	r4, r0
 801127a:	4608      	mov	r0, r1
 801127c:	4611      	mov	r1, r2
 801127e:	2200      	movs	r2, #0
 8011280:	602a      	str	r2, [r5, #0]
 8011282:	461a      	mov	r2, r3
 8011284:	f7fa f812 	bl	800b2ac <_write>
 8011288:	1c43      	adds	r3, r0, #1
 801128a:	d102      	bne.n	8011292 <_write_r+0x1e>
 801128c:	682b      	ldr	r3, [r5, #0]
 801128e:	b103      	cbz	r3, 8011292 <_write_r+0x1e>
 8011290:	6023      	str	r3, [r4, #0]
 8011292:	bd38      	pop	{r3, r4, r5, pc}
 8011294:	20000dd0 	.word	0x20000dd0

08011298 <__errno>:
 8011298:	4b01      	ldr	r3, [pc, #4]	@ (80112a0 <__errno+0x8>)
 801129a:	6818      	ldr	r0, [r3, #0]
 801129c:	4770      	bx	lr
 801129e:	bf00      	nop
 80112a0:	20000240 	.word	0x20000240

080112a4 <__libc_init_array>:
 80112a4:	b570      	push	{r4, r5, r6, lr}
 80112a6:	4d0d      	ldr	r5, [pc, #52]	@ (80112dc <__libc_init_array+0x38>)
 80112a8:	4c0d      	ldr	r4, [pc, #52]	@ (80112e0 <__libc_init_array+0x3c>)
 80112aa:	1b64      	subs	r4, r4, r5
 80112ac:	10a4      	asrs	r4, r4, #2
 80112ae:	2600      	movs	r6, #0
 80112b0:	42a6      	cmp	r6, r4
 80112b2:	d109      	bne.n	80112c8 <__libc_init_array+0x24>
 80112b4:	4d0b      	ldr	r5, [pc, #44]	@ (80112e4 <__libc_init_array+0x40>)
 80112b6:	4c0c      	ldr	r4, [pc, #48]	@ (80112e8 <__libc_init_array+0x44>)
 80112b8:	f002 f8e2 	bl	8013480 <_init>
 80112bc:	1b64      	subs	r4, r4, r5
 80112be:	10a4      	asrs	r4, r4, #2
 80112c0:	2600      	movs	r6, #0
 80112c2:	42a6      	cmp	r6, r4
 80112c4:	d105      	bne.n	80112d2 <__libc_init_array+0x2e>
 80112c6:	bd70      	pop	{r4, r5, r6, pc}
 80112c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80112cc:	4798      	blx	r3
 80112ce:	3601      	adds	r6, #1
 80112d0:	e7ee      	b.n	80112b0 <__libc_init_array+0xc>
 80112d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80112d6:	4798      	blx	r3
 80112d8:	3601      	adds	r6, #1
 80112da:	e7f2      	b.n	80112c2 <__libc_init_array+0x1e>
 80112dc:	08013c10 	.word	0x08013c10
 80112e0:	08013c10 	.word	0x08013c10
 80112e4:	08013c10 	.word	0x08013c10
 80112e8:	08013c14 	.word	0x08013c14

080112ec <__retarget_lock_init_recursive>:
 80112ec:	4770      	bx	lr

080112ee <__retarget_lock_acquire_recursive>:
 80112ee:	4770      	bx	lr

080112f0 <__retarget_lock_release_recursive>:
 80112f0:	4770      	bx	lr

080112f2 <memcpy>:
 80112f2:	440a      	add	r2, r1
 80112f4:	4291      	cmp	r1, r2
 80112f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80112fa:	d100      	bne.n	80112fe <memcpy+0xc>
 80112fc:	4770      	bx	lr
 80112fe:	b510      	push	{r4, lr}
 8011300:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011304:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011308:	4291      	cmp	r1, r2
 801130a:	d1f9      	bne.n	8011300 <memcpy+0xe>
 801130c:	bd10      	pop	{r4, pc}

0801130e <quorem>:
 801130e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011312:	6903      	ldr	r3, [r0, #16]
 8011314:	690c      	ldr	r4, [r1, #16]
 8011316:	42a3      	cmp	r3, r4
 8011318:	4607      	mov	r7, r0
 801131a:	db7e      	blt.n	801141a <quorem+0x10c>
 801131c:	3c01      	subs	r4, #1
 801131e:	f101 0814 	add.w	r8, r1, #20
 8011322:	00a3      	lsls	r3, r4, #2
 8011324:	f100 0514 	add.w	r5, r0, #20
 8011328:	9300      	str	r3, [sp, #0]
 801132a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801132e:	9301      	str	r3, [sp, #4]
 8011330:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011334:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011338:	3301      	adds	r3, #1
 801133a:	429a      	cmp	r2, r3
 801133c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011340:	fbb2 f6f3 	udiv	r6, r2, r3
 8011344:	d32e      	bcc.n	80113a4 <quorem+0x96>
 8011346:	f04f 0a00 	mov.w	sl, #0
 801134a:	46c4      	mov	ip, r8
 801134c:	46ae      	mov	lr, r5
 801134e:	46d3      	mov	fp, sl
 8011350:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011354:	b298      	uxth	r0, r3
 8011356:	fb06 a000 	mla	r0, r6, r0, sl
 801135a:	0c02      	lsrs	r2, r0, #16
 801135c:	0c1b      	lsrs	r3, r3, #16
 801135e:	fb06 2303 	mla	r3, r6, r3, r2
 8011362:	f8de 2000 	ldr.w	r2, [lr]
 8011366:	b280      	uxth	r0, r0
 8011368:	b292      	uxth	r2, r2
 801136a:	1a12      	subs	r2, r2, r0
 801136c:	445a      	add	r2, fp
 801136e:	f8de 0000 	ldr.w	r0, [lr]
 8011372:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011376:	b29b      	uxth	r3, r3
 8011378:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801137c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8011380:	b292      	uxth	r2, r2
 8011382:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8011386:	45e1      	cmp	r9, ip
 8011388:	f84e 2b04 	str.w	r2, [lr], #4
 801138c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8011390:	d2de      	bcs.n	8011350 <quorem+0x42>
 8011392:	9b00      	ldr	r3, [sp, #0]
 8011394:	58eb      	ldr	r3, [r5, r3]
 8011396:	b92b      	cbnz	r3, 80113a4 <quorem+0x96>
 8011398:	9b01      	ldr	r3, [sp, #4]
 801139a:	3b04      	subs	r3, #4
 801139c:	429d      	cmp	r5, r3
 801139e:	461a      	mov	r2, r3
 80113a0:	d32f      	bcc.n	8011402 <quorem+0xf4>
 80113a2:	613c      	str	r4, [r7, #16]
 80113a4:	4638      	mov	r0, r7
 80113a6:	f001 f979 	bl	801269c <__mcmp>
 80113aa:	2800      	cmp	r0, #0
 80113ac:	db25      	blt.n	80113fa <quorem+0xec>
 80113ae:	4629      	mov	r1, r5
 80113b0:	2000      	movs	r0, #0
 80113b2:	f858 2b04 	ldr.w	r2, [r8], #4
 80113b6:	f8d1 c000 	ldr.w	ip, [r1]
 80113ba:	fa1f fe82 	uxth.w	lr, r2
 80113be:	fa1f f38c 	uxth.w	r3, ip
 80113c2:	eba3 030e 	sub.w	r3, r3, lr
 80113c6:	4403      	add	r3, r0
 80113c8:	0c12      	lsrs	r2, r2, #16
 80113ca:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80113ce:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80113d2:	b29b      	uxth	r3, r3
 80113d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80113d8:	45c1      	cmp	r9, r8
 80113da:	f841 3b04 	str.w	r3, [r1], #4
 80113de:	ea4f 4022 	mov.w	r0, r2, asr #16
 80113e2:	d2e6      	bcs.n	80113b2 <quorem+0xa4>
 80113e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80113e8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80113ec:	b922      	cbnz	r2, 80113f8 <quorem+0xea>
 80113ee:	3b04      	subs	r3, #4
 80113f0:	429d      	cmp	r5, r3
 80113f2:	461a      	mov	r2, r3
 80113f4:	d30b      	bcc.n	801140e <quorem+0x100>
 80113f6:	613c      	str	r4, [r7, #16]
 80113f8:	3601      	adds	r6, #1
 80113fa:	4630      	mov	r0, r6
 80113fc:	b003      	add	sp, #12
 80113fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011402:	6812      	ldr	r2, [r2, #0]
 8011404:	3b04      	subs	r3, #4
 8011406:	2a00      	cmp	r2, #0
 8011408:	d1cb      	bne.n	80113a2 <quorem+0x94>
 801140a:	3c01      	subs	r4, #1
 801140c:	e7c6      	b.n	801139c <quorem+0x8e>
 801140e:	6812      	ldr	r2, [r2, #0]
 8011410:	3b04      	subs	r3, #4
 8011412:	2a00      	cmp	r2, #0
 8011414:	d1ef      	bne.n	80113f6 <quorem+0xe8>
 8011416:	3c01      	subs	r4, #1
 8011418:	e7ea      	b.n	80113f0 <quorem+0xe2>
 801141a:	2000      	movs	r0, #0
 801141c:	e7ee      	b.n	80113fc <quorem+0xee>
	...

08011420 <_dtoa_r>:
 8011420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011424:	69c7      	ldr	r7, [r0, #28]
 8011426:	b099      	sub	sp, #100	@ 0x64
 8011428:	ed8d 0b02 	vstr	d0, [sp, #8]
 801142c:	ec55 4b10 	vmov	r4, r5, d0
 8011430:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8011432:	9109      	str	r1, [sp, #36]	@ 0x24
 8011434:	4683      	mov	fp, r0
 8011436:	920e      	str	r2, [sp, #56]	@ 0x38
 8011438:	9313      	str	r3, [sp, #76]	@ 0x4c
 801143a:	b97f      	cbnz	r7, 801145c <_dtoa_r+0x3c>
 801143c:	2010      	movs	r0, #16
 801143e:	f000 fdfd 	bl	801203c <malloc>
 8011442:	4602      	mov	r2, r0
 8011444:	f8cb 001c 	str.w	r0, [fp, #28]
 8011448:	b920      	cbnz	r0, 8011454 <_dtoa_r+0x34>
 801144a:	4ba7      	ldr	r3, [pc, #668]	@ (80116e8 <_dtoa_r+0x2c8>)
 801144c:	21ef      	movs	r1, #239	@ 0xef
 801144e:	48a7      	ldr	r0, [pc, #668]	@ (80116ec <_dtoa_r+0x2cc>)
 8011450:	f001 fc5a 	bl	8012d08 <__assert_func>
 8011454:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8011458:	6007      	str	r7, [r0, #0]
 801145a:	60c7      	str	r7, [r0, #12]
 801145c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011460:	6819      	ldr	r1, [r3, #0]
 8011462:	b159      	cbz	r1, 801147c <_dtoa_r+0x5c>
 8011464:	685a      	ldr	r2, [r3, #4]
 8011466:	604a      	str	r2, [r1, #4]
 8011468:	2301      	movs	r3, #1
 801146a:	4093      	lsls	r3, r2
 801146c:	608b      	str	r3, [r1, #8]
 801146e:	4658      	mov	r0, fp
 8011470:	f000 feda 	bl	8012228 <_Bfree>
 8011474:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011478:	2200      	movs	r2, #0
 801147a:	601a      	str	r2, [r3, #0]
 801147c:	1e2b      	subs	r3, r5, #0
 801147e:	bfb9      	ittee	lt
 8011480:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8011484:	9303      	strlt	r3, [sp, #12]
 8011486:	2300      	movge	r3, #0
 8011488:	6033      	strge	r3, [r6, #0]
 801148a:	9f03      	ldr	r7, [sp, #12]
 801148c:	4b98      	ldr	r3, [pc, #608]	@ (80116f0 <_dtoa_r+0x2d0>)
 801148e:	bfbc      	itt	lt
 8011490:	2201      	movlt	r2, #1
 8011492:	6032      	strlt	r2, [r6, #0]
 8011494:	43bb      	bics	r3, r7
 8011496:	d112      	bne.n	80114be <_dtoa_r+0x9e>
 8011498:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801149a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801149e:	6013      	str	r3, [r2, #0]
 80114a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80114a4:	4323      	orrs	r3, r4
 80114a6:	f000 854d 	beq.w	8011f44 <_dtoa_r+0xb24>
 80114aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80114ac:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8011704 <_dtoa_r+0x2e4>
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	f000 854f 	beq.w	8011f54 <_dtoa_r+0xb34>
 80114b6:	f10a 0303 	add.w	r3, sl, #3
 80114ba:	f000 bd49 	b.w	8011f50 <_dtoa_r+0xb30>
 80114be:	ed9d 7b02 	vldr	d7, [sp, #8]
 80114c2:	2200      	movs	r2, #0
 80114c4:	ec51 0b17 	vmov	r0, r1, d7
 80114c8:	2300      	movs	r3, #0
 80114ca:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80114ce:	f7f7 fa33 	bl	8008938 <__aeabi_dcmpeq>
 80114d2:	4680      	mov	r8, r0
 80114d4:	b158      	cbz	r0, 80114ee <_dtoa_r+0xce>
 80114d6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80114d8:	2301      	movs	r3, #1
 80114da:	6013      	str	r3, [r2, #0]
 80114dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80114de:	b113      	cbz	r3, 80114e6 <_dtoa_r+0xc6>
 80114e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80114e2:	4b84      	ldr	r3, [pc, #528]	@ (80116f4 <_dtoa_r+0x2d4>)
 80114e4:	6013      	str	r3, [r2, #0]
 80114e6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8011708 <_dtoa_r+0x2e8>
 80114ea:	f000 bd33 	b.w	8011f54 <_dtoa_r+0xb34>
 80114ee:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80114f2:	aa16      	add	r2, sp, #88	@ 0x58
 80114f4:	a917      	add	r1, sp, #92	@ 0x5c
 80114f6:	4658      	mov	r0, fp
 80114f8:	f001 f980 	bl	80127fc <__d2b>
 80114fc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8011500:	4681      	mov	r9, r0
 8011502:	2e00      	cmp	r6, #0
 8011504:	d077      	beq.n	80115f6 <_dtoa_r+0x1d6>
 8011506:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011508:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801150c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011510:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011514:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8011518:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801151c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8011520:	4619      	mov	r1, r3
 8011522:	2200      	movs	r2, #0
 8011524:	4b74      	ldr	r3, [pc, #464]	@ (80116f8 <_dtoa_r+0x2d8>)
 8011526:	f7f6 fde7 	bl	80080f8 <__aeabi_dsub>
 801152a:	a369      	add	r3, pc, #420	@ (adr r3, 80116d0 <_dtoa_r+0x2b0>)
 801152c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011530:	f7f6 ff9a 	bl	8008468 <__aeabi_dmul>
 8011534:	a368      	add	r3, pc, #416	@ (adr r3, 80116d8 <_dtoa_r+0x2b8>)
 8011536:	e9d3 2300 	ldrd	r2, r3, [r3]
 801153a:	f7f6 fddf 	bl	80080fc <__adddf3>
 801153e:	4604      	mov	r4, r0
 8011540:	4630      	mov	r0, r6
 8011542:	460d      	mov	r5, r1
 8011544:	f7f6 ff26 	bl	8008394 <__aeabi_i2d>
 8011548:	a365      	add	r3, pc, #404	@ (adr r3, 80116e0 <_dtoa_r+0x2c0>)
 801154a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801154e:	f7f6 ff8b 	bl	8008468 <__aeabi_dmul>
 8011552:	4602      	mov	r2, r0
 8011554:	460b      	mov	r3, r1
 8011556:	4620      	mov	r0, r4
 8011558:	4629      	mov	r1, r5
 801155a:	f7f6 fdcf 	bl	80080fc <__adddf3>
 801155e:	4604      	mov	r4, r0
 8011560:	460d      	mov	r5, r1
 8011562:	f7f7 fa31 	bl	80089c8 <__aeabi_d2iz>
 8011566:	2200      	movs	r2, #0
 8011568:	4607      	mov	r7, r0
 801156a:	2300      	movs	r3, #0
 801156c:	4620      	mov	r0, r4
 801156e:	4629      	mov	r1, r5
 8011570:	f7f7 f9ec 	bl	800894c <__aeabi_dcmplt>
 8011574:	b140      	cbz	r0, 8011588 <_dtoa_r+0x168>
 8011576:	4638      	mov	r0, r7
 8011578:	f7f6 ff0c 	bl	8008394 <__aeabi_i2d>
 801157c:	4622      	mov	r2, r4
 801157e:	462b      	mov	r3, r5
 8011580:	f7f7 f9da 	bl	8008938 <__aeabi_dcmpeq>
 8011584:	b900      	cbnz	r0, 8011588 <_dtoa_r+0x168>
 8011586:	3f01      	subs	r7, #1
 8011588:	2f16      	cmp	r7, #22
 801158a:	d851      	bhi.n	8011630 <_dtoa_r+0x210>
 801158c:	4b5b      	ldr	r3, [pc, #364]	@ (80116fc <_dtoa_r+0x2dc>)
 801158e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011596:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801159a:	f7f7 f9d7 	bl	800894c <__aeabi_dcmplt>
 801159e:	2800      	cmp	r0, #0
 80115a0:	d048      	beq.n	8011634 <_dtoa_r+0x214>
 80115a2:	3f01      	subs	r7, #1
 80115a4:	2300      	movs	r3, #0
 80115a6:	9312      	str	r3, [sp, #72]	@ 0x48
 80115a8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80115aa:	1b9b      	subs	r3, r3, r6
 80115ac:	1e5a      	subs	r2, r3, #1
 80115ae:	bf44      	itt	mi
 80115b0:	f1c3 0801 	rsbmi	r8, r3, #1
 80115b4:	2300      	movmi	r3, #0
 80115b6:	9208      	str	r2, [sp, #32]
 80115b8:	bf54      	ite	pl
 80115ba:	f04f 0800 	movpl.w	r8, #0
 80115be:	9308      	strmi	r3, [sp, #32]
 80115c0:	2f00      	cmp	r7, #0
 80115c2:	db39      	blt.n	8011638 <_dtoa_r+0x218>
 80115c4:	9b08      	ldr	r3, [sp, #32]
 80115c6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80115c8:	443b      	add	r3, r7
 80115ca:	9308      	str	r3, [sp, #32]
 80115cc:	2300      	movs	r3, #0
 80115ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80115d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80115d2:	2b09      	cmp	r3, #9
 80115d4:	d864      	bhi.n	80116a0 <_dtoa_r+0x280>
 80115d6:	2b05      	cmp	r3, #5
 80115d8:	bfc4      	itt	gt
 80115da:	3b04      	subgt	r3, #4
 80115dc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80115de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80115e0:	f1a3 0302 	sub.w	r3, r3, #2
 80115e4:	bfcc      	ite	gt
 80115e6:	2400      	movgt	r4, #0
 80115e8:	2401      	movle	r4, #1
 80115ea:	2b03      	cmp	r3, #3
 80115ec:	d863      	bhi.n	80116b6 <_dtoa_r+0x296>
 80115ee:	e8df f003 	tbb	[pc, r3]
 80115f2:	372a      	.short	0x372a
 80115f4:	5535      	.short	0x5535
 80115f6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80115fa:	441e      	add	r6, r3
 80115fc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8011600:	2b20      	cmp	r3, #32
 8011602:	bfc1      	itttt	gt
 8011604:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8011608:	409f      	lslgt	r7, r3
 801160a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801160e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8011612:	bfd6      	itet	le
 8011614:	f1c3 0320 	rsble	r3, r3, #32
 8011618:	ea47 0003 	orrgt.w	r0, r7, r3
 801161c:	fa04 f003 	lslle.w	r0, r4, r3
 8011620:	f7f6 fea8 	bl	8008374 <__aeabi_ui2d>
 8011624:	2201      	movs	r2, #1
 8011626:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801162a:	3e01      	subs	r6, #1
 801162c:	9214      	str	r2, [sp, #80]	@ 0x50
 801162e:	e777      	b.n	8011520 <_dtoa_r+0x100>
 8011630:	2301      	movs	r3, #1
 8011632:	e7b8      	b.n	80115a6 <_dtoa_r+0x186>
 8011634:	9012      	str	r0, [sp, #72]	@ 0x48
 8011636:	e7b7      	b.n	80115a8 <_dtoa_r+0x188>
 8011638:	427b      	negs	r3, r7
 801163a:	930a      	str	r3, [sp, #40]	@ 0x28
 801163c:	2300      	movs	r3, #0
 801163e:	eba8 0807 	sub.w	r8, r8, r7
 8011642:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011644:	e7c4      	b.n	80115d0 <_dtoa_r+0x1b0>
 8011646:	2300      	movs	r3, #0
 8011648:	930b      	str	r3, [sp, #44]	@ 0x2c
 801164a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801164c:	2b00      	cmp	r3, #0
 801164e:	dc35      	bgt.n	80116bc <_dtoa_r+0x29c>
 8011650:	2301      	movs	r3, #1
 8011652:	9300      	str	r3, [sp, #0]
 8011654:	9307      	str	r3, [sp, #28]
 8011656:	461a      	mov	r2, r3
 8011658:	920e      	str	r2, [sp, #56]	@ 0x38
 801165a:	e00b      	b.n	8011674 <_dtoa_r+0x254>
 801165c:	2301      	movs	r3, #1
 801165e:	e7f3      	b.n	8011648 <_dtoa_r+0x228>
 8011660:	2300      	movs	r3, #0
 8011662:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011664:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011666:	18fb      	adds	r3, r7, r3
 8011668:	9300      	str	r3, [sp, #0]
 801166a:	3301      	adds	r3, #1
 801166c:	2b01      	cmp	r3, #1
 801166e:	9307      	str	r3, [sp, #28]
 8011670:	bfb8      	it	lt
 8011672:	2301      	movlt	r3, #1
 8011674:	f8db 001c 	ldr.w	r0, [fp, #28]
 8011678:	2100      	movs	r1, #0
 801167a:	2204      	movs	r2, #4
 801167c:	f102 0514 	add.w	r5, r2, #20
 8011680:	429d      	cmp	r5, r3
 8011682:	d91f      	bls.n	80116c4 <_dtoa_r+0x2a4>
 8011684:	6041      	str	r1, [r0, #4]
 8011686:	4658      	mov	r0, fp
 8011688:	f000 fd8e 	bl	80121a8 <_Balloc>
 801168c:	4682      	mov	sl, r0
 801168e:	2800      	cmp	r0, #0
 8011690:	d13c      	bne.n	801170c <_dtoa_r+0x2ec>
 8011692:	4b1b      	ldr	r3, [pc, #108]	@ (8011700 <_dtoa_r+0x2e0>)
 8011694:	4602      	mov	r2, r0
 8011696:	f240 11af 	movw	r1, #431	@ 0x1af
 801169a:	e6d8      	b.n	801144e <_dtoa_r+0x2e>
 801169c:	2301      	movs	r3, #1
 801169e:	e7e0      	b.n	8011662 <_dtoa_r+0x242>
 80116a0:	2401      	movs	r4, #1
 80116a2:	2300      	movs	r3, #0
 80116a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80116a6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80116a8:	f04f 33ff 	mov.w	r3, #4294967295
 80116ac:	9300      	str	r3, [sp, #0]
 80116ae:	9307      	str	r3, [sp, #28]
 80116b0:	2200      	movs	r2, #0
 80116b2:	2312      	movs	r3, #18
 80116b4:	e7d0      	b.n	8011658 <_dtoa_r+0x238>
 80116b6:	2301      	movs	r3, #1
 80116b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80116ba:	e7f5      	b.n	80116a8 <_dtoa_r+0x288>
 80116bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80116be:	9300      	str	r3, [sp, #0]
 80116c0:	9307      	str	r3, [sp, #28]
 80116c2:	e7d7      	b.n	8011674 <_dtoa_r+0x254>
 80116c4:	3101      	adds	r1, #1
 80116c6:	0052      	lsls	r2, r2, #1
 80116c8:	e7d8      	b.n	801167c <_dtoa_r+0x25c>
 80116ca:	bf00      	nop
 80116cc:	f3af 8000 	nop.w
 80116d0:	636f4361 	.word	0x636f4361
 80116d4:	3fd287a7 	.word	0x3fd287a7
 80116d8:	8b60c8b3 	.word	0x8b60c8b3
 80116dc:	3fc68a28 	.word	0x3fc68a28
 80116e0:	509f79fb 	.word	0x509f79fb
 80116e4:	3fd34413 	.word	0x3fd34413
 80116e8:	080138d9 	.word	0x080138d9
 80116ec:	080138f0 	.word	0x080138f0
 80116f0:	7ff00000 	.word	0x7ff00000
 80116f4:	080138a9 	.word	0x080138a9
 80116f8:	3ff80000 	.word	0x3ff80000
 80116fc:	080139e8 	.word	0x080139e8
 8011700:	08013948 	.word	0x08013948
 8011704:	080138d5 	.word	0x080138d5
 8011708:	080138a8 	.word	0x080138a8
 801170c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011710:	6018      	str	r0, [r3, #0]
 8011712:	9b07      	ldr	r3, [sp, #28]
 8011714:	2b0e      	cmp	r3, #14
 8011716:	f200 80a4 	bhi.w	8011862 <_dtoa_r+0x442>
 801171a:	2c00      	cmp	r4, #0
 801171c:	f000 80a1 	beq.w	8011862 <_dtoa_r+0x442>
 8011720:	2f00      	cmp	r7, #0
 8011722:	dd33      	ble.n	801178c <_dtoa_r+0x36c>
 8011724:	4bad      	ldr	r3, [pc, #692]	@ (80119dc <_dtoa_r+0x5bc>)
 8011726:	f007 020f 	and.w	r2, r7, #15
 801172a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801172e:	ed93 7b00 	vldr	d7, [r3]
 8011732:	05f8      	lsls	r0, r7, #23
 8011734:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011738:	ea4f 1427 	mov.w	r4, r7, asr #4
 801173c:	d516      	bpl.n	801176c <_dtoa_r+0x34c>
 801173e:	4ba8      	ldr	r3, [pc, #672]	@ (80119e0 <_dtoa_r+0x5c0>)
 8011740:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011744:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011748:	f7f6 ffb8 	bl	80086bc <__aeabi_ddiv>
 801174c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011750:	f004 040f 	and.w	r4, r4, #15
 8011754:	2603      	movs	r6, #3
 8011756:	4da2      	ldr	r5, [pc, #648]	@ (80119e0 <_dtoa_r+0x5c0>)
 8011758:	b954      	cbnz	r4, 8011770 <_dtoa_r+0x350>
 801175a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801175e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011762:	f7f6 ffab 	bl	80086bc <__aeabi_ddiv>
 8011766:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801176a:	e028      	b.n	80117be <_dtoa_r+0x39e>
 801176c:	2602      	movs	r6, #2
 801176e:	e7f2      	b.n	8011756 <_dtoa_r+0x336>
 8011770:	07e1      	lsls	r1, r4, #31
 8011772:	d508      	bpl.n	8011786 <_dtoa_r+0x366>
 8011774:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011778:	e9d5 2300 	ldrd	r2, r3, [r5]
 801177c:	f7f6 fe74 	bl	8008468 <__aeabi_dmul>
 8011780:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011784:	3601      	adds	r6, #1
 8011786:	1064      	asrs	r4, r4, #1
 8011788:	3508      	adds	r5, #8
 801178a:	e7e5      	b.n	8011758 <_dtoa_r+0x338>
 801178c:	f000 80d2 	beq.w	8011934 <_dtoa_r+0x514>
 8011790:	427c      	negs	r4, r7
 8011792:	4b92      	ldr	r3, [pc, #584]	@ (80119dc <_dtoa_r+0x5bc>)
 8011794:	4d92      	ldr	r5, [pc, #584]	@ (80119e0 <_dtoa_r+0x5c0>)
 8011796:	f004 020f 	and.w	r2, r4, #15
 801179a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801179e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80117a6:	f7f6 fe5f 	bl	8008468 <__aeabi_dmul>
 80117aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80117ae:	1124      	asrs	r4, r4, #4
 80117b0:	2300      	movs	r3, #0
 80117b2:	2602      	movs	r6, #2
 80117b4:	2c00      	cmp	r4, #0
 80117b6:	f040 80b2 	bne.w	801191e <_dtoa_r+0x4fe>
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d1d3      	bne.n	8011766 <_dtoa_r+0x346>
 80117be:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80117c0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	f000 80b7 	beq.w	8011938 <_dtoa_r+0x518>
 80117ca:	4b86      	ldr	r3, [pc, #536]	@ (80119e4 <_dtoa_r+0x5c4>)
 80117cc:	2200      	movs	r2, #0
 80117ce:	4620      	mov	r0, r4
 80117d0:	4629      	mov	r1, r5
 80117d2:	f7f7 f8bb 	bl	800894c <__aeabi_dcmplt>
 80117d6:	2800      	cmp	r0, #0
 80117d8:	f000 80ae 	beq.w	8011938 <_dtoa_r+0x518>
 80117dc:	9b07      	ldr	r3, [sp, #28]
 80117de:	2b00      	cmp	r3, #0
 80117e0:	f000 80aa 	beq.w	8011938 <_dtoa_r+0x518>
 80117e4:	9b00      	ldr	r3, [sp, #0]
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	dd37      	ble.n	801185a <_dtoa_r+0x43a>
 80117ea:	1e7b      	subs	r3, r7, #1
 80117ec:	9304      	str	r3, [sp, #16]
 80117ee:	4620      	mov	r0, r4
 80117f0:	4b7d      	ldr	r3, [pc, #500]	@ (80119e8 <_dtoa_r+0x5c8>)
 80117f2:	2200      	movs	r2, #0
 80117f4:	4629      	mov	r1, r5
 80117f6:	f7f6 fe37 	bl	8008468 <__aeabi_dmul>
 80117fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80117fe:	9c00      	ldr	r4, [sp, #0]
 8011800:	3601      	adds	r6, #1
 8011802:	4630      	mov	r0, r6
 8011804:	f7f6 fdc6 	bl	8008394 <__aeabi_i2d>
 8011808:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801180c:	f7f6 fe2c 	bl	8008468 <__aeabi_dmul>
 8011810:	4b76      	ldr	r3, [pc, #472]	@ (80119ec <_dtoa_r+0x5cc>)
 8011812:	2200      	movs	r2, #0
 8011814:	f7f6 fc72 	bl	80080fc <__adddf3>
 8011818:	4605      	mov	r5, r0
 801181a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801181e:	2c00      	cmp	r4, #0
 8011820:	f040 808d 	bne.w	801193e <_dtoa_r+0x51e>
 8011824:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011828:	4b71      	ldr	r3, [pc, #452]	@ (80119f0 <_dtoa_r+0x5d0>)
 801182a:	2200      	movs	r2, #0
 801182c:	f7f6 fc64 	bl	80080f8 <__aeabi_dsub>
 8011830:	4602      	mov	r2, r0
 8011832:	460b      	mov	r3, r1
 8011834:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011838:	462a      	mov	r2, r5
 801183a:	4633      	mov	r3, r6
 801183c:	f7f7 f8a4 	bl	8008988 <__aeabi_dcmpgt>
 8011840:	2800      	cmp	r0, #0
 8011842:	f040 828b 	bne.w	8011d5c <_dtoa_r+0x93c>
 8011846:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801184a:	462a      	mov	r2, r5
 801184c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8011850:	f7f7 f87c 	bl	800894c <__aeabi_dcmplt>
 8011854:	2800      	cmp	r0, #0
 8011856:	f040 8128 	bne.w	8011aaa <_dtoa_r+0x68a>
 801185a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801185e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8011862:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011864:	2b00      	cmp	r3, #0
 8011866:	f2c0 815a 	blt.w	8011b1e <_dtoa_r+0x6fe>
 801186a:	2f0e      	cmp	r7, #14
 801186c:	f300 8157 	bgt.w	8011b1e <_dtoa_r+0x6fe>
 8011870:	4b5a      	ldr	r3, [pc, #360]	@ (80119dc <_dtoa_r+0x5bc>)
 8011872:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011876:	ed93 7b00 	vldr	d7, [r3]
 801187a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801187c:	2b00      	cmp	r3, #0
 801187e:	ed8d 7b00 	vstr	d7, [sp]
 8011882:	da03      	bge.n	801188c <_dtoa_r+0x46c>
 8011884:	9b07      	ldr	r3, [sp, #28]
 8011886:	2b00      	cmp	r3, #0
 8011888:	f340 8101 	ble.w	8011a8e <_dtoa_r+0x66e>
 801188c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8011890:	4656      	mov	r6, sl
 8011892:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011896:	4620      	mov	r0, r4
 8011898:	4629      	mov	r1, r5
 801189a:	f7f6 ff0f 	bl	80086bc <__aeabi_ddiv>
 801189e:	f7f7 f893 	bl	80089c8 <__aeabi_d2iz>
 80118a2:	4680      	mov	r8, r0
 80118a4:	f7f6 fd76 	bl	8008394 <__aeabi_i2d>
 80118a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80118ac:	f7f6 fddc 	bl	8008468 <__aeabi_dmul>
 80118b0:	4602      	mov	r2, r0
 80118b2:	460b      	mov	r3, r1
 80118b4:	4620      	mov	r0, r4
 80118b6:	4629      	mov	r1, r5
 80118b8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80118bc:	f7f6 fc1c 	bl	80080f8 <__aeabi_dsub>
 80118c0:	f806 4b01 	strb.w	r4, [r6], #1
 80118c4:	9d07      	ldr	r5, [sp, #28]
 80118c6:	eba6 040a 	sub.w	r4, r6, sl
 80118ca:	42a5      	cmp	r5, r4
 80118cc:	4602      	mov	r2, r0
 80118ce:	460b      	mov	r3, r1
 80118d0:	f040 8117 	bne.w	8011b02 <_dtoa_r+0x6e2>
 80118d4:	f7f6 fc12 	bl	80080fc <__adddf3>
 80118d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80118dc:	4604      	mov	r4, r0
 80118de:	460d      	mov	r5, r1
 80118e0:	f7f7 f852 	bl	8008988 <__aeabi_dcmpgt>
 80118e4:	2800      	cmp	r0, #0
 80118e6:	f040 80f9 	bne.w	8011adc <_dtoa_r+0x6bc>
 80118ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80118ee:	4620      	mov	r0, r4
 80118f0:	4629      	mov	r1, r5
 80118f2:	f7f7 f821 	bl	8008938 <__aeabi_dcmpeq>
 80118f6:	b118      	cbz	r0, 8011900 <_dtoa_r+0x4e0>
 80118f8:	f018 0f01 	tst.w	r8, #1
 80118fc:	f040 80ee 	bne.w	8011adc <_dtoa_r+0x6bc>
 8011900:	4649      	mov	r1, r9
 8011902:	4658      	mov	r0, fp
 8011904:	f000 fc90 	bl	8012228 <_Bfree>
 8011908:	2300      	movs	r3, #0
 801190a:	7033      	strb	r3, [r6, #0]
 801190c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801190e:	3701      	adds	r7, #1
 8011910:	601f      	str	r7, [r3, #0]
 8011912:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011914:	2b00      	cmp	r3, #0
 8011916:	f000 831d 	beq.w	8011f54 <_dtoa_r+0xb34>
 801191a:	601e      	str	r6, [r3, #0]
 801191c:	e31a      	b.n	8011f54 <_dtoa_r+0xb34>
 801191e:	07e2      	lsls	r2, r4, #31
 8011920:	d505      	bpl.n	801192e <_dtoa_r+0x50e>
 8011922:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011926:	f7f6 fd9f 	bl	8008468 <__aeabi_dmul>
 801192a:	3601      	adds	r6, #1
 801192c:	2301      	movs	r3, #1
 801192e:	1064      	asrs	r4, r4, #1
 8011930:	3508      	adds	r5, #8
 8011932:	e73f      	b.n	80117b4 <_dtoa_r+0x394>
 8011934:	2602      	movs	r6, #2
 8011936:	e742      	b.n	80117be <_dtoa_r+0x39e>
 8011938:	9c07      	ldr	r4, [sp, #28]
 801193a:	9704      	str	r7, [sp, #16]
 801193c:	e761      	b.n	8011802 <_dtoa_r+0x3e2>
 801193e:	4b27      	ldr	r3, [pc, #156]	@ (80119dc <_dtoa_r+0x5bc>)
 8011940:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011942:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011946:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801194a:	4454      	add	r4, sl
 801194c:	2900      	cmp	r1, #0
 801194e:	d053      	beq.n	80119f8 <_dtoa_r+0x5d8>
 8011950:	4928      	ldr	r1, [pc, #160]	@ (80119f4 <_dtoa_r+0x5d4>)
 8011952:	2000      	movs	r0, #0
 8011954:	f7f6 feb2 	bl	80086bc <__aeabi_ddiv>
 8011958:	4633      	mov	r3, r6
 801195a:	462a      	mov	r2, r5
 801195c:	f7f6 fbcc 	bl	80080f8 <__aeabi_dsub>
 8011960:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011964:	4656      	mov	r6, sl
 8011966:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801196a:	f7f7 f82d 	bl	80089c8 <__aeabi_d2iz>
 801196e:	4605      	mov	r5, r0
 8011970:	f7f6 fd10 	bl	8008394 <__aeabi_i2d>
 8011974:	4602      	mov	r2, r0
 8011976:	460b      	mov	r3, r1
 8011978:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801197c:	f7f6 fbbc 	bl	80080f8 <__aeabi_dsub>
 8011980:	3530      	adds	r5, #48	@ 0x30
 8011982:	4602      	mov	r2, r0
 8011984:	460b      	mov	r3, r1
 8011986:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801198a:	f806 5b01 	strb.w	r5, [r6], #1
 801198e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011992:	f7f6 ffdb 	bl	800894c <__aeabi_dcmplt>
 8011996:	2800      	cmp	r0, #0
 8011998:	d171      	bne.n	8011a7e <_dtoa_r+0x65e>
 801199a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801199e:	4911      	ldr	r1, [pc, #68]	@ (80119e4 <_dtoa_r+0x5c4>)
 80119a0:	2000      	movs	r0, #0
 80119a2:	f7f6 fba9 	bl	80080f8 <__aeabi_dsub>
 80119a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80119aa:	f7f6 ffcf 	bl	800894c <__aeabi_dcmplt>
 80119ae:	2800      	cmp	r0, #0
 80119b0:	f040 8095 	bne.w	8011ade <_dtoa_r+0x6be>
 80119b4:	42a6      	cmp	r6, r4
 80119b6:	f43f af50 	beq.w	801185a <_dtoa_r+0x43a>
 80119ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80119be:	4b0a      	ldr	r3, [pc, #40]	@ (80119e8 <_dtoa_r+0x5c8>)
 80119c0:	2200      	movs	r2, #0
 80119c2:	f7f6 fd51 	bl	8008468 <__aeabi_dmul>
 80119c6:	4b08      	ldr	r3, [pc, #32]	@ (80119e8 <_dtoa_r+0x5c8>)
 80119c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80119cc:	2200      	movs	r2, #0
 80119ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80119d2:	f7f6 fd49 	bl	8008468 <__aeabi_dmul>
 80119d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80119da:	e7c4      	b.n	8011966 <_dtoa_r+0x546>
 80119dc:	080139e8 	.word	0x080139e8
 80119e0:	080139c0 	.word	0x080139c0
 80119e4:	3ff00000 	.word	0x3ff00000
 80119e8:	40240000 	.word	0x40240000
 80119ec:	401c0000 	.word	0x401c0000
 80119f0:	40140000 	.word	0x40140000
 80119f4:	3fe00000 	.word	0x3fe00000
 80119f8:	4631      	mov	r1, r6
 80119fa:	4628      	mov	r0, r5
 80119fc:	f7f6 fd34 	bl	8008468 <__aeabi_dmul>
 8011a00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011a04:	9415      	str	r4, [sp, #84]	@ 0x54
 8011a06:	4656      	mov	r6, sl
 8011a08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011a0c:	f7f6 ffdc 	bl	80089c8 <__aeabi_d2iz>
 8011a10:	4605      	mov	r5, r0
 8011a12:	f7f6 fcbf 	bl	8008394 <__aeabi_i2d>
 8011a16:	4602      	mov	r2, r0
 8011a18:	460b      	mov	r3, r1
 8011a1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011a1e:	f7f6 fb6b 	bl	80080f8 <__aeabi_dsub>
 8011a22:	3530      	adds	r5, #48	@ 0x30
 8011a24:	f806 5b01 	strb.w	r5, [r6], #1
 8011a28:	4602      	mov	r2, r0
 8011a2a:	460b      	mov	r3, r1
 8011a2c:	42a6      	cmp	r6, r4
 8011a2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011a32:	f04f 0200 	mov.w	r2, #0
 8011a36:	d124      	bne.n	8011a82 <_dtoa_r+0x662>
 8011a38:	4bac      	ldr	r3, [pc, #688]	@ (8011cec <_dtoa_r+0x8cc>)
 8011a3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8011a3e:	f7f6 fb5d 	bl	80080fc <__adddf3>
 8011a42:	4602      	mov	r2, r0
 8011a44:	460b      	mov	r3, r1
 8011a46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011a4a:	f7f6 ff9d 	bl	8008988 <__aeabi_dcmpgt>
 8011a4e:	2800      	cmp	r0, #0
 8011a50:	d145      	bne.n	8011ade <_dtoa_r+0x6be>
 8011a52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011a56:	49a5      	ldr	r1, [pc, #660]	@ (8011cec <_dtoa_r+0x8cc>)
 8011a58:	2000      	movs	r0, #0
 8011a5a:	f7f6 fb4d 	bl	80080f8 <__aeabi_dsub>
 8011a5e:	4602      	mov	r2, r0
 8011a60:	460b      	mov	r3, r1
 8011a62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011a66:	f7f6 ff71 	bl	800894c <__aeabi_dcmplt>
 8011a6a:	2800      	cmp	r0, #0
 8011a6c:	f43f aef5 	beq.w	801185a <_dtoa_r+0x43a>
 8011a70:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8011a72:	1e73      	subs	r3, r6, #1
 8011a74:	9315      	str	r3, [sp, #84]	@ 0x54
 8011a76:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011a7a:	2b30      	cmp	r3, #48	@ 0x30
 8011a7c:	d0f8      	beq.n	8011a70 <_dtoa_r+0x650>
 8011a7e:	9f04      	ldr	r7, [sp, #16]
 8011a80:	e73e      	b.n	8011900 <_dtoa_r+0x4e0>
 8011a82:	4b9b      	ldr	r3, [pc, #620]	@ (8011cf0 <_dtoa_r+0x8d0>)
 8011a84:	f7f6 fcf0 	bl	8008468 <__aeabi_dmul>
 8011a88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011a8c:	e7bc      	b.n	8011a08 <_dtoa_r+0x5e8>
 8011a8e:	d10c      	bne.n	8011aaa <_dtoa_r+0x68a>
 8011a90:	4b98      	ldr	r3, [pc, #608]	@ (8011cf4 <_dtoa_r+0x8d4>)
 8011a92:	2200      	movs	r2, #0
 8011a94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011a98:	f7f6 fce6 	bl	8008468 <__aeabi_dmul>
 8011a9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011aa0:	f7f6 ff68 	bl	8008974 <__aeabi_dcmpge>
 8011aa4:	2800      	cmp	r0, #0
 8011aa6:	f000 8157 	beq.w	8011d58 <_dtoa_r+0x938>
 8011aaa:	2400      	movs	r4, #0
 8011aac:	4625      	mov	r5, r4
 8011aae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011ab0:	43db      	mvns	r3, r3
 8011ab2:	9304      	str	r3, [sp, #16]
 8011ab4:	4656      	mov	r6, sl
 8011ab6:	2700      	movs	r7, #0
 8011ab8:	4621      	mov	r1, r4
 8011aba:	4658      	mov	r0, fp
 8011abc:	f000 fbb4 	bl	8012228 <_Bfree>
 8011ac0:	2d00      	cmp	r5, #0
 8011ac2:	d0dc      	beq.n	8011a7e <_dtoa_r+0x65e>
 8011ac4:	b12f      	cbz	r7, 8011ad2 <_dtoa_r+0x6b2>
 8011ac6:	42af      	cmp	r7, r5
 8011ac8:	d003      	beq.n	8011ad2 <_dtoa_r+0x6b2>
 8011aca:	4639      	mov	r1, r7
 8011acc:	4658      	mov	r0, fp
 8011ace:	f000 fbab 	bl	8012228 <_Bfree>
 8011ad2:	4629      	mov	r1, r5
 8011ad4:	4658      	mov	r0, fp
 8011ad6:	f000 fba7 	bl	8012228 <_Bfree>
 8011ada:	e7d0      	b.n	8011a7e <_dtoa_r+0x65e>
 8011adc:	9704      	str	r7, [sp, #16]
 8011ade:	4633      	mov	r3, r6
 8011ae0:	461e      	mov	r6, r3
 8011ae2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011ae6:	2a39      	cmp	r2, #57	@ 0x39
 8011ae8:	d107      	bne.n	8011afa <_dtoa_r+0x6da>
 8011aea:	459a      	cmp	sl, r3
 8011aec:	d1f8      	bne.n	8011ae0 <_dtoa_r+0x6c0>
 8011aee:	9a04      	ldr	r2, [sp, #16]
 8011af0:	3201      	adds	r2, #1
 8011af2:	9204      	str	r2, [sp, #16]
 8011af4:	2230      	movs	r2, #48	@ 0x30
 8011af6:	f88a 2000 	strb.w	r2, [sl]
 8011afa:	781a      	ldrb	r2, [r3, #0]
 8011afc:	3201      	adds	r2, #1
 8011afe:	701a      	strb	r2, [r3, #0]
 8011b00:	e7bd      	b.n	8011a7e <_dtoa_r+0x65e>
 8011b02:	4b7b      	ldr	r3, [pc, #492]	@ (8011cf0 <_dtoa_r+0x8d0>)
 8011b04:	2200      	movs	r2, #0
 8011b06:	f7f6 fcaf 	bl	8008468 <__aeabi_dmul>
 8011b0a:	2200      	movs	r2, #0
 8011b0c:	2300      	movs	r3, #0
 8011b0e:	4604      	mov	r4, r0
 8011b10:	460d      	mov	r5, r1
 8011b12:	f7f6 ff11 	bl	8008938 <__aeabi_dcmpeq>
 8011b16:	2800      	cmp	r0, #0
 8011b18:	f43f aebb 	beq.w	8011892 <_dtoa_r+0x472>
 8011b1c:	e6f0      	b.n	8011900 <_dtoa_r+0x4e0>
 8011b1e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011b20:	2a00      	cmp	r2, #0
 8011b22:	f000 80db 	beq.w	8011cdc <_dtoa_r+0x8bc>
 8011b26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011b28:	2a01      	cmp	r2, #1
 8011b2a:	f300 80bf 	bgt.w	8011cac <_dtoa_r+0x88c>
 8011b2e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8011b30:	2a00      	cmp	r2, #0
 8011b32:	f000 80b7 	beq.w	8011ca4 <_dtoa_r+0x884>
 8011b36:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8011b3a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8011b3c:	4646      	mov	r6, r8
 8011b3e:	9a08      	ldr	r2, [sp, #32]
 8011b40:	2101      	movs	r1, #1
 8011b42:	441a      	add	r2, r3
 8011b44:	4658      	mov	r0, fp
 8011b46:	4498      	add	r8, r3
 8011b48:	9208      	str	r2, [sp, #32]
 8011b4a:	f000 fc21 	bl	8012390 <__i2b>
 8011b4e:	4605      	mov	r5, r0
 8011b50:	b15e      	cbz	r6, 8011b6a <_dtoa_r+0x74a>
 8011b52:	9b08      	ldr	r3, [sp, #32]
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	dd08      	ble.n	8011b6a <_dtoa_r+0x74a>
 8011b58:	42b3      	cmp	r3, r6
 8011b5a:	9a08      	ldr	r2, [sp, #32]
 8011b5c:	bfa8      	it	ge
 8011b5e:	4633      	movge	r3, r6
 8011b60:	eba8 0803 	sub.w	r8, r8, r3
 8011b64:	1af6      	subs	r6, r6, r3
 8011b66:	1ad3      	subs	r3, r2, r3
 8011b68:	9308      	str	r3, [sp, #32]
 8011b6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011b6c:	b1f3      	cbz	r3, 8011bac <_dtoa_r+0x78c>
 8011b6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	f000 80b7 	beq.w	8011ce4 <_dtoa_r+0x8c4>
 8011b76:	b18c      	cbz	r4, 8011b9c <_dtoa_r+0x77c>
 8011b78:	4629      	mov	r1, r5
 8011b7a:	4622      	mov	r2, r4
 8011b7c:	4658      	mov	r0, fp
 8011b7e:	f000 fcc7 	bl	8012510 <__pow5mult>
 8011b82:	464a      	mov	r2, r9
 8011b84:	4601      	mov	r1, r0
 8011b86:	4605      	mov	r5, r0
 8011b88:	4658      	mov	r0, fp
 8011b8a:	f000 fc17 	bl	80123bc <__multiply>
 8011b8e:	4649      	mov	r1, r9
 8011b90:	9004      	str	r0, [sp, #16]
 8011b92:	4658      	mov	r0, fp
 8011b94:	f000 fb48 	bl	8012228 <_Bfree>
 8011b98:	9b04      	ldr	r3, [sp, #16]
 8011b9a:	4699      	mov	r9, r3
 8011b9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011b9e:	1b1a      	subs	r2, r3, r4
 8011ba0:	d004      	beq.n	8011bac <_dtoa_r+0x78c>
 8011ba2:	4649      	mov	r1, r9
 8011ba4:	4658      	mov	r0, fp
 8011ba6:	f000 fcb3 	bl	8012510 <__pow5mult>
 8011baa:	4681      	mov	r9, r0
 8011bac:	2101      	movs	r1, #1
 8011bae:	4658      	mov	r0, fp
 8011bb0:	f000 fbee 	bl	8012390 <__i2b>
 8011bb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011bb6:	4604      	mov	r4, r0
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	f000 81cf 	beq.w	8011f5c <_dtoa_r+0xb3c>
 8011bbe:	461a      	mov	r2, r3
 8011bc0:	4601      	mov	r1, r0
 8011bc2:	4658      	mov	r0, fp
 8011bc4:	f000 fca4 	bl	8012510 <__pow5mult>
 8011bc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011bca:	2b01      	cmp	r3, #1
 8011bcc:	4604      	mov	r4, r0
 8011bce:	f300 8095 	bgt.w	8011cfc <_dtoa_r+0x8dc>
 8011bd2:	9b02      	ldr	r3, [sp, #8]
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	f040 8087 	bne.w	8011ce8 <_dtoa_r+0x8c8>
 8011bda:	9b03      	ldr	r3, [sp, #12]
 8011bdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	f040 8089 	bne.w	8011cf8 <_dtoa_r+0x8d8>
 8011be6:	9b03      	ldr	r3, [sp, #12]
 8011be8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011bec:	0d1b      	lsrs	r3, r3, #20
 8011bee:	051b      	lsls	r3, r3, #20
 8011bf0:	b12b      	cbz	r3, 8011bfe <_dtoa_r+0x7de>
 8011bf2:	9b08      	ldr	r3, [sp, #32]
 8011bf4:	3301      	adds	r3, #1
 8011bf6:	9308      	str	r3, [sp, #32]
 8011bf8:	f108 0801 	add.w	r8, r8, #1
 8011bfc:	2301      	movs	r3, #1
 8011bfe:	930a      	str	r3, [sp, #40]	@ 0x28
 8011c00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	f000 81b0 	beq.w	8011f68 <_dtoa_r+0xb48>
 8011c08:	6923      	ldr	r3, [r4, #16]
 8011c0a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011c0e:	6918      	ldr	r0, [r3, #16]
 8011c10:	f000 fb72 	bl	80122f8 <__hi0bits>
 8011c14:	f1c0 0020 	rsb	r0, r0, #32
 8011c18:	9b08      	ldr	r3, [sp, #32]
 8011c1a:	4418      	add	r0, r3
 8011c1c:	f010 001f 	ands.w	r0, r0, #31
 8011c20:	d077      	beq.n	8011d12 <_dtoa_r+0x8f2>
 8011c22:	f1c0 0320 	rsb	r3, r0, #32
 8011c26:	2b04      	cmp	r3, #4
 8011c28:	dd6b      	ble.n	8011d02 <_dtoa_r+0x8e2>
 8011c2a:	9b08      	ldr	r3, [sp, #32]
 8011c2c:	f1c0 001c 	rsb	r0, r0, #28
 8011c30:	4403      	add	r3, r0
 8011c32:	4480      	add	r8, r0
 8011c34:	4406      	add	r6, r0
 8011c36:	9308      	str	r3, [sp, #32]
 8011c38:	f1b8 0f00 	cmp.w	r8, #0
 8011c3c:	dd05      	ble.n	8011c4a <_dtoa_r+0x82a>
 8011c3e:	4649      	mov	r1, r9
 8011c40:	4642      	mov	r2, r8
 8011c42:	4658      	mov	r0, fp
 8011c44:	f000 fcbe 	bl	80125c4 <__lshift>
 8011c48:	4681      	mov	r9, r0
 8011c4a:	9b08      	ldr	r3, [sp, #32]
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	dd05      	ble.n	8011c5c <_dtoa_r+0x83c>
 8011c50:	4621      	mov	r1, r4
 8011c52:	461a      	mov	r2, r3
 8011c54:	4658      	mov	r0, fp
 8011c56:	f000 fcb5 	bl	80125c4 <__lshift>
 8011c5a:	4604      	mov	r4, r0
 8011c5c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d059      	beq.n	8011d16 <_dtoa_r+0x8f6>
 8011c62:	4621      	mov	r1, r4
 8011c64:	4648      	mov	r0, r9
 8011c66:	f000 fd19 	bl	801269c <__mcmp>
 8011c6a:	2800      	cmp	r0, #0
 8011c6c:	da53      	bge.n	8011d16 <_dtoa_r+0x8f6>
 8011c6e:	1e7b      	subs	r3, r7, #1
 8011c70:	9304      	str	r3, [sp, #16]
 8011c72:	4649      	mov	r1, r9
 8011c74:	2300      	movs	r3, #0
 8011c76:	220a      	movs	r2, #10
 8011c78:	4658      	mov	r0, fp
 8011c7a:	f000 faf7 	bl	801226c <__multadd>
 8011c7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011c80:	4681      	mov	r9, r0
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	f000 8172 	beq.w	8011f6c <_dtoa_r+0xb4c>
 8011c88:	2300      	movs	r3, #0
 8011c8a:	4629      	mov	r1, r5
 8011c8c:	220a      	movs	r2, #10
 8011c8e:	4658      	mov	r0, fp
 8011c90:	f000 faec 	bl	801226c <__multadd>
 8011c94:	9b00      	ldr	r3, [sp, #0]
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	4605      	mov	r5, r0
 8011c9a:	dc67      	bgt.n	8011d6c <_dtoa_r+0x94c>
 8011c9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c9e:	2b02      	cmp	r3, #2
 8011ca0:	dc41      	bgt.n	8011d26 <_dtoa_r+0x906>
 8011ca2:	e063      	b.n	8011d6c <_dtoa_r+0x94c>
 8011ca4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011ca6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8011caa:	e746      	b.n	8011b3a <_dtoa_r+0x71a>
 8011cac:	9b07      	ldr	r3, [sp, #28]
 8011cae:	1e5c      	subs	r4, r3, #1
 8011cb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011cb2:	42a3      	cmp	r3, r4
 8011cb4:	bfbf      	itttt	lt
 8011cb6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8011cb8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8011cba:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8011cbc:	1ae3      	sublt	r3, r4, r3
 8011cbe:	bfb4      	ite	lt
 8011cc0:	18d2      	addlt	r2, r2, r3
 8011cc2:	1b1c      	subge	r4, r3, r4
 8011cc4:	9b07      	ldr	r3, [sp, #28]
 8011cc6:	bfbc      	itt	lt
 8011cc8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8011cca:	2400      	movlt	r4, #0
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	bfb5      	itete	lt
 8011cd0:	eba8 0603 	sublt.w	r6, r8, r3
 8011cd4:	9b07      	ldrge	r3, [sp, #28]
 8011cd6:	2300      	movlt	r3, #0
 8011cd8:	4646      	movge	r6, r8
 8011cda:	e730      	b.n	8011b3e <_dtoa_r+0x71e>
 8011cdc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8011cde:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8011ce0:	4646      	mov	r6, r8
 8011ce2:	e735      	b.n	8011b50 <_dtoa_r+0x730>
 8011ce4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011ce6:	e75c      	b.n	8011ba2 <_dtoa_r+0x782>
 8011ce8:	2300      	movs	r3, #0
 8011cea:	e788      	b.n	8011bfe <_dtoa_r+0x7de>
 8011cec:	3fe00000 	.word	0x3fe00000
 8011cf0:	40240000 	.word	0x40240000
 8011cf4:	40140000 	.word	0x40140000
 8011cf8:	9b02      	ldr	r3, [sp, #8]
 8011cfa:	e780      	b.n	8011bfe <_dtoa_r+0x7de>
 8011cfc:	2300      	movs	r3, #0
 8011cfe:	930a      	str	r3, [sp, #40]	@ 0x28
 8011d00:	e782      	b.n	8011c08 <_dtoa_r+0x7e8>
 8011d02:	d099      	beq.n	8011c38 <_dtoa_r+0x818>
 8011d04:	9a08      	ldr	r2, [sp, #32]
 8011d06:	331c      	adds	r3, #28
 8011d08:	441a      	add	r2, r3
 8011d0a:	4498      	add	r8, r3
 8011d0c:	441e      	add	r6, r3
 8011d0e:	9208      	str	r2, [sp, #32]
 8011d10:	e792      	b.n	8011c38 <_dtoa_r+0x818>
 8011d12:	4603      	mov	r3, r0
 8011d14:	e7f6      	b.n	8011d04 <_dtoa_r+0x8e4>
 8011d16:	9b07      	ldr	r3, [sp, #28]
 8011d18:	9704      	str	r7, [sp, #16]
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	dc20      	bgt.n	8011d60 <_dtoa_r+0x940>
 8011d1e:	9300      	str	r3, [sp, #0]
 8011d20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011d22:	2b02      	cmp	r3, #2
 8011d24:	dd1e      	ble.n	8011d64 <_dtoa_r+0x944>
 8011d26:	9b00      	ldr	r3, [sp, #0]
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	f47f aec0 	bne.w	8011aae <_dtoa_r+0x68e>
 8011d2e:	4621      	mov	r1, r4
 8011d30:	2205      	movs	r2, #5
 8011d32:	4658      	mov	r0, fp
 8011d34:	f000 fa9a 	bl	801226c <__multadd>
 8011d38:	4601      	mov	r1, r0
 8011d3a:	4604      	mov	r4, r0
 8011d3c:	4648      	mov	r0, r9
 8011d3e:	f000 fcad 	bl	801269c <__mcmp>
 8011d42:	2800      	cmp	r0, #0
 8011d44:	f77f aeb3 	ble.w	8011aae <_dtoa_r+0x68e>
 8011d48:	4656      	mov	r6, sl
 8011d4a:	2331      	movs	r3, #49	@ 0x31
 8011d4c:	f806 3b01 	strb.w	r3, [r6], #1
 8011d50:	9b04      	ldr	r3, [sp, #16]
 8011d52:	3301      	adds	r3, #1
 8011d54:	9304      	str	r3, [sp, #16]
 8011d56:	e6ae      	b.n	8011ab6 <_dtoa_r+0x696>
 8011d58:	9c07      	ldr	r4, [sp, #28]
 8011d5a:	9704      	str	r7, [sp, #16]
 8011d5c:	4625      	mov	r5, r4
 8011d5e:	e7f3      	b.n	8011d48 <_dtoa_r+0x928>
 8011d60:	9b07      	ldr	r3, [sp, #28]
 8011d62:	9300      	str	r3, [sp, #0]
 8011d64:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	f000 8104 	beq.w	8011f74 <_dtoa_r+0xb54>
 8011d6c:	2e00      	cmp	r6, #0
 8011d6e:	dd05      	ble.n	8011d7c <_dtoa_r+0x95c>
 8011d70:	4629      	mov	r1, r5
 8011d72:	4632      	mov	r2, r6
 8011d74:	4658      	mov	r0, fp
 8011d76:	f000 fc25 	bl	80125c4 <__lshift>
 8011d7a:	4605      	mov	r5, r0
 8011d7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d05a      	beq.n	8011e38 <_dtoa_r+0xa18>
 8011d82:	6869      	ldr	r1, [r5, #4]
 8011d84:	4658      	mov	r0, fp
 8011d86:	f000 fa0f 	bl	80121a8 <_Balloc>
 8011d8a:	4606      	mov	r6, r0
 8011d8c:	b928      	cbnz	r0, 8011d9a <_dtoa_r+0x97a>
 8011d8e:	4b84      	ldr	r3, [pc, #528]	@ (8011fa0 <_dtoa_r+0xb80>)
 8011d90:	4602      	mov	r2, r0
 8011d92:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8011d96:	f7ff bb5a 	b.w	801144e <_dtoa_r+0x2e>
 8011d9a:	692a      	ldr	r2, [r5, #16]
 8011d9c:	3202      	adds	r2, #2
 8011d9e:	0092      	lsls	r2, r2, #2
 8011da0:	f105 010c 	add.w	r1, r5, #12
 8011da4:	300c      	adds	r0, #12
 8011da6:	f7ff faa4 	bl	80112f2 <memcpy>
 8011daa:	2201      	movs	r2, #1
 8011dac:	4631      	mov	r1, r6
 8011dae:	4658      	mov	r0, fp
 8011db0:	f000 fc08 	bl	80125c4 <__lshift>
 8011db4:	f10a 0301 	add.w	r3, sl, #1
 8011db8:	9307      	str	r3, [sp, #28]
 8011dba:	9b00      	ldr	r3, [sp, #0]
 8011dbc:	4453      	add	r3, sl
 8011dbe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011dc0:	9b02      	ldr	r3, [sp, #8]
 8011dc2:	f003 0301 	and.w	r3, r3, #1
 8011dc6:	462f      	mov	r7, r5
 8011dc8:	930a      	str	r3, [sp, #40]	@ 0x28
 8011dca:	4605      	mov	r5, r0
 8011dcc:	9b07      	ldr	r3, [sp, #28]
 8011dce:	4621      	mov	r1, r4
 8011dd0:	3b01      	subs	r3, #1
 8011dd2:	4648      	mov	r0, r9
 8011dd4:	9300      	str	r3, [sp, #0]
 8011dd6:	f7ff fa9a 	bl	801130e <quorem>
 8011dda:	4639      	mov	r1, r7
 8011ddc:	9002      	str	r0, [sp, #8]
 8011dde:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8011de2:	4648      	mov	r0, r9
 8011de4:	f000 fc5a 	bl	801269c <__mcmp>
 8011de8:	462a      	mov	r2, r5
 8011dea:	9008      	str	r0, [sp, #32]
 8011dec:	4621      	mov	r1, r4
 8011dee:	4658      	mov	r0, fp
 8011df0:	f000 fc70 	bl	80126d4 <__mdiff>
 8011df4:	68c2      	ldr	r2, [r0, #12]
 8011df6:	4606      	mov	r6, r0
 8011df8:	bb02      	cbnz	r2, 8011e3c <_dtoa_r+0xa1c>
 8011dfa:	4601      	mov	r1, r0
 8011dfc:	4648      	mov	r0, r9
 8011dfe:	f000 fc4d 	bl	801269c <__mcmp>
 8011e02:	4602      	mov	r2, r0
 8011e04:	4631      	mov	r1, r6
 8011e06:	4658      	mov	r0, fp
 8011e08:	920e      	str	r2, [sp, #56]	@ 0x38
 8011e0a:	f000 fa0d 	bl	8012228 <_Bfree>
 8011e0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e10:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011e12:	9e07      	ldr	r6, [sp, #28]
 8011e14:	ea43 0102 	orr.w	r1, r3, r2
 8011e18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011e1a:	4319      	orrs	r1, r3
 8011e1c:	d110      	bne.n	8011e40 <_dtoa_r+0xa20>
 8011e1e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011e22:	d029      	beq.n	8011e78 <_dtoa_r+0xa58>
 8011e24:	9b08      	ldr	r3, [sp, #32]
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	dd02      	ble.n	8011e30 <_dtoa_r+0xa10>
 8011e2a:	9b02      	ldr	r3, [sp, #8]
 8011e2c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8011e30:	9b00      	ldr	r3, [sp, #0]
 8011e32:	f883 8000 	strb.w	r8, [r3]
 8011e36:	e63f      	b.n	8011ab8 <_dtoa_r+0x698>
 8011e38:	4628      	mov	r0, r5
 8011e3a:	e7bb      	b.n	8011db4 <_dtoa_r+0x994>
 8011e3c:	2201      	movs	r2, #1
 8011e3e:	e7e1      	b.n	8011e04 <_dtoa_r+0x9e4>
 8011e40:	9b08      	ldr	r3, [sp, #32]
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	db04      	blt.n	8011e50 <_dtoa_r+0xa30>
 8011e46:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011e48:	430b      	orrs	r3, r1
 8011e4a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011e4c:	430b      	orrs	r3, r1
 8011e4e:	d120      	bne.n	8011e92 <_dtoa_r+0xa72>
 8011e50:	2a00      	cmp	r2, #0
 8011e52:	dded      	ble.n	8011e30 <_dtoa_r+0xa10>
 8011e54:	4649      	mov	r1, r9
 8011e56:	2201      	movs	r2, #1
 8011e58:	4658      	mov	r0, fp
 8011e5a:	f000 fbb3 	bl	80125c4 <__lshift>
 8011e5e:	4621      	mov	r1, r4
 8011e60:	4681      	mov	r9, r0
 8011e62:	f000 fc1b 	bl	801269c <__mcmp>
 8011e66:	2800      	cmp	r0, #0
 8011e68:	dc03      	bgt.n	8011e72 <_dtoa_r+0xa52>
 8011e6a:	d1e1      	bne.n	8011e30 <_dtoa_r+0xa10>
 8011e6c:	f018 0f01 	tst.w	r8, #1
 8011e70:	d0de      	beq.n	8011e30 <_dtoa_r+0xa10>
 8011e72:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011e76:	d1d8      	bne.n	8011e2a <_dtoa_r+0xa0a>
 8011e78:	9a00      	ldr	r2, [sp, #0]
 8011e7a:	2339      	movs	r3, #57	@ 0x39
 8011e7c:	7013      	strb	r3, [r2, #0]
 8011e7e:	4633      	mov	r3, r6
 8011e80:	461e      	mov	r6, r3
 8011e82:	3b01      	subs	r3, #1
 8011e84:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011e88:	2a39      	cmp	r2, #57	@ 0x39
 8011e8a:	d052      	beq.n	8011f32 <_dtoa_r+0xb12>
 8011e8c:	3201      	adds	r2, #1
 8011e8e:	701a      	strb	r2, [r3, #0]
 8011e90:	e612      	b.n	8011ab8 <_dtoa_r+0x698>
 8011e92:	2a00      	cmp	r2, #0
 8011e94:	dd07      	ble.n	8011ea6 <_dtoa_r+0xa86>
 8011e96:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011e9a:	d0ed      	beq.n	8011e78 <_dtoa_r+0xa58>
 8011e9c:	9a00      	ldr	r2, [sp, #0]
 8011e9e:	f108 0301 	add.w	r3, r8, #1
 8011ea2:	7013      	strb	r3, [r2, #0]
 8011ea4:	e608      	b.n	8011ab8 <_dtoa_r+0x698>
 8011ea6:	9b07      	ldr	r3, [sp, #28]
 8011ea8:	9a07      	ldr	r2, [sp, #28]
 8011eaa:	f803 8c01 	strb.w	r8, [r3, #-1]
 8011eae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011eb0:	4293      	cmp	r3, r2
 8011eb2:	d028      	beq.n	8011f06 <_dtoa_r+0xae6>
 8011eb4:	4649      	mov	r1, r9
 8011eb6:	2300      	movs	r3, #0
 8011eb8:	220a      	movs	r2, #10
 8011eba:	4658      	mov	r0, fp
 8011ebc:	f000 f9d6 	bl	801226c <__multadd>
 8011ec0:	42af      	cmp	r7, r5
 8011ec2:	4681      	mov	r9, r0
 8011ec4:	f04f 0300 	mov.w	r3, #0
 8011ec8:	f04f 020a 	mov.w	r2, #10
 8011ecc:	4639      	mov	r1, r7
 8011ece:	4658      	mov	r0, fp
 8011ed0:	d107      	bne.n	8011ee2 <_dtoa_r+0xac2>
 8011ed2:	f000 f9cb 	bl	801226c <__multadd>
 8011ed6:	4607      	mov	r7, r0
 8011ed8:	4605      	mov	r5, r0
 8011eda:	9b07      	ldr	r3, [sp, #28]
 8011edc:	3301      	adds	r3, #1
 8011ede:	9307      	str	r3, [sp, #28]
 8011ee0:	e774      	b.n	8011dcc <_dtoa_r+0x9ac>
 8011ee2:	f000 f9c3 	bl	801226c <__multadd>
 8011ee6:	4629      	mov	r1, r5
 8011ee8:	4607      	mov	r7, r0
 8011eea:	2300      	movs	r3, #0
 8011eec:	220a      	movs	r2, #10
 8011eee:	4658      	mov	r0, fp
 8011ef0:	f000 f9bc 	bl	801226c <__multadd>
 8011ef4:	4605      	mov	r5, r0
 8011ef6:	e7f0      	b.n	8011eda <_dtoa_r+0xaba>
 8011ef8:	9b00      	ldr	r3, [sp, #0]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	bfcc      	ite	gt
 8011efe:	461e      	movgt	r6, r3
 8011f00:	2601      	movle	r6, #1
 8011f02:	4456      	add	r6, sl
 8011f04:	2700      	movs	r7, #0
 8011f06:	4649      	mov	r1, r9
 8011f08:	2201      	movs	r2, #1
 8011f0a:	4658      	mov	r0, fp
 8011f0c:	f000 fb5a 	bl	80125c4 <__lshift>
 8011f10:	4621      	mov	r1, r4
 8011f12:	4681      	mov	r9, r0
 8011f14:	f000 fbc2 	bl	801269c <__mcmp>
 8011f18:	2800      	cmp	r0, #0
 8011f1a:	dcb0      	bgt.n	8011e7e <_dtoa_r+0xa5e>
 8011f1c:	d102      	bne.n	8011f24 <_dtoa_r+0xb04>
 8011f1e:	f018 0f01 	tst.w	r8, #1
 8011f22:	d1ac      	bne.n	8011e7e <_dtoa_r+0xa5e>
 8011f24:	4633      	mov	r3, r6
 8011f26:	461e      	mov	r6, r3
 8011f28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011f2c:	2a30      	cmp	r2, #48	@ 0x30
 8011f2e:	d0fa      	beq.n	8011f26 <_dtoa_r+0xb06>
 8011f30:	e5c2      	b.n	8011ab8 <_dtoa_r+0x698>
 8011f32:	459a      	cmp	sl, r3
 8011f34:	d1a4      	bne.n	8011e80 <_dtoa_r+0xa60>
 8011f36:	9b04      	ldr	r3, [sp, #16]
 8011f38:	3301      	adds	r3, #1
 8011f3a:	9304      	str	r3, [sp, #16]
 8011f3c:	2331      	movs	r3, #49	@ 0x31
 8011f3e:	f88a 3000 	strb.w	r3, [sl]
 8011f42:	e5b9      	b.n	8011ab8 <_dtoa_r+0x698>
 8011f44:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011f46:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8011fa4 <_dtoa_r+0xb84>
 8011f4a:	b11b      	cbz	r3, 8011f54 <_dtoa_r+0xb34>
 8011f4c:	f10a 0308 	add.w	r3, sl, #8
 8011f50:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8011f52:	6013      	str	r3, [r2, #0]
 8011f54:	4650      	mov	r0, sl
 8011f56:	b019      	add	sp, #100	@ 0x64
 8011f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011f5e:	2b01      	cmp	r3, #1
 8011f60:	f77f ae37 	ble.w	8011bd2 <_dtoa_r+0x7b2>
 8011f64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011f66:	930a      	str	r3, [sp, #40]	@ 0x28
 8011f68:	2001      	movs	r0, #1
 8011f6a:	e655      	b.n	8011c18 <_dtoa_r+0x7f8>
 8011f6c:	9b00      	ldr	r3, [sp, #0]
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	f77f aed6 	ble.w	8011d20 <_dtoa_r+0x900>
 8011f74:	4656      	mov	r6, sl
 8011f76:	4621      	mov	r1, r4
 8011f78:	4648      	mov	r0, r9
 8011f7a:	f7ff f9c8 	bl	801130e <quorem>
 8011f7e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8011f82:	f806 8b01 	strb.w	r8, [r6], #1
 8011f86:	9b00      	ldr	r3, [sp, #0]
 8011f88:	eba6 020a 	sub.w	r2, r6, sl
 8011f8c:	4293      	cmp	r3, r2
 8011f8e:	ddb3      	ble.n	8011ef8 <_dtoa_r+0xad8>
 8011f90:	4649      	mov	r1, r9
 8011f92:	2300      	movs	r3, #0
 8011f94:	220a      	movs	r2, #10
 8011f96:	4658      	mov	r0, fp
 8011f98:	f000 f968 	bl	801226c <__multadd>
 8011f9c:	4681      	mov	r9, r0
 8011f9e:	e7ea      	b.n	8011f76 <_dtoa_r+0xb56>
 8011fa0:	08013948 	.word	0x08013948
 8011fa4:	080138cc 	.word	0x080138cc

08011fa8 <_free_r>:
 8011fa8:	b538      	push	{r3, r4, r5, lr}
 8011faa:	4605      	mov	r5, r0
 8011fac:	2900      	cmp	r1, #0
 8011fae:	d041      	beq.n	8012034 <_free_r+0x8c>
 8011fb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011fb4:	1f0c      	subs	r4, r1, #4
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	bfb8      	it	lt
 8011fba:	18e4      	addlt	r4, r4, r3
 8011fbc:	f000 f8e8 	bl	8012190 <__malloc_lock>
 8011fc0:	4a1d      	ldr	r2, [pc, #116]	@ (8012038 <_free_r+0x90>)
 8011fc2:	6813      	ldr	r3, [r2, #0]
 8011fc4:	b933      	cbnz	r3, 8011fd4 <_free_r+0x2c>
 8011fc6:	6063      	str	r3, [r4, #4]
 8011fc8:	6014      	str	r4, [r2, #0]
 8011fca:	4628      	mov	r0, r5
 8011fcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011fd0:	f000 b8e4 	b.w	801219c <__malloc_unlock>
 8011fd4:	42a3      	cmp	r3, r4
 8011fd6:	d908      	bls.n	8011fea <_free_r+0x42>
 8011fd8:	6820      	ldr	r0, [r4, #0]
 8011fda:	1821      	adds	r1, r4, r0
 8011fdc:	428b      	cmp	r3, r1
 8011fde:	bf01      	itttt	eq
 8011fe0:	6819      	ldreq	r1, [r3, #0]
 8011fe2:	685b      	ldreq	r3, [r3, #4]
 8011fe4:	1809      	addeq	r1, r1, r0
 8011fe6:	6021      	streq	r1, [r4, #0]
 8011fe8:	e7ed      	b.n	8011fc6 <_free_r+0x1e>
 8011fea:	461a      	mov	r2, r3
 8011fec:	685b      	ldr	r3, [r3, #4]
 8011fee:	b10b      	cbz	r3, 8011ff4 <_free_r+0x4c>
 8011ff0:	42a3      	cmp	r3, r4
 8011ff2:	d9fa      	bls.n	8011fea <_free_r+0x42>
 8011ff4:	6811      	ldr	r1, [r2, #0]
 8011ff6:	1850      	adds	r0, r2, r1
 8011ff8:	42a0      	cmp	r0, r4
 8011ffa:	d10b      	bne.n	8012014 <_free_r+0x6c>
 8011ffc:	6820      	ldr	r0, [r4, #0]
 8011ffe:	4401      	add	r1, r0
 8012000:	1850      	adds	r0, r2, r1
 8012002:	4283      	cmp	r3, r0
 8012004:	6011      	str	r1, [r2, #0]
 8012006:	d1e0      	bne.n	8011fca <_free_r+0x22>
 8012008:	6818      	ldr	r0, [r3, #0]
 801200a:	685b      	ldr	r3, [r3, #4]
 801200c:	6053      	str	r3, [r2, #4]
 801200e:	4408      	add	r0, r1
 8012010:	6010      	str	r0, [r2, #0]
 8012012:	e7da      	b.n	8011fca <_free_r+0x22>
 8012014:	d902      	bls.n	801201c <_free_r+0x74>
 8012016:	230c      	movs	r3, #12
 8012018:	602b      	str	r3, [r5, #0]
 801201a:	e7d6      	b.n	8011fca <_free_r+0x22>
 801201c:	6820      	ldr	r0, [r4, #0]
 801201e:	1821      	adds	r1, r4, r0
 8012020:	428b      	cmp	r3, r1
 8012022:	bf04      	itt	eq
 8012024:	6819      	ldreq	r1, [r3, #0]
 8012026:	685b      	ldreq	r3, [r3, #4]
 8012028:	6063      	str	r3, [r4, #4]
 801202a:	bf04      	itt	eq
 801202c:	1809      	addeq	r1, r1, r0
 801202e:	6021      	streq	r1, [r4, #0]
 8012030:	6054      	str	r4, [r2, #4]
 8012032:	e7ca      	b.n	8011fca <_free_r+0x22>
 8012034:	bd38      	pop	{r3, r4, r5, pc}
 8012036:	bf00      	nop
 8012038:	20000ddc 	.word	0x20000ddc

0801203c <malloc>:
 801203c:	4b02      	ldr	r3, [pc, #8]	@ (8012048 <malloc+0xc>)
 801203e:	4601      	mov	r1, r0
 8012040:	6818      	ldr	r0, [r3, #0]
 8012042:	f000 b825 	b.w	8012090 <_malloc_r>
 8012046:	bf00      	nop
 8012048:	20000240 	.word	0x20000240

0801204c <sbrk_aligned>:
 801204c:	b570      	push	{r4, r5, r6, lr}
 801204e:	4e0f      	ldr	r6, [pc, #60]	@ (801208c <sbrk_aligned+0x40>)
 8012050:	460c      	mov	r4, r1
 8012052:	6831      	ldr	r1, [r6, #0]
 8012054:	4605      	mov	r5, r0
 8012056:	b911      	cbnz	r1, 801205e <sbrk_aligned+0x12>
 8012058:	f000 fe46 	bl	8012ce8 <_sbrk_r>
 801205c:	6030      	str	r0, [r6, #0]
 801205e:	4621      	mov	r1, r4
 8012060:	4628      	mov	r0, r5
 8012062:	f000 fe41 	bl	8012ce8 <_sbrk_r>
 8012066:	1c43      	adds	r3, r0, #1
 8012068:	d103      	bne.n	8012072 <sbrk_aligned+0x26>
 801206a:	f04f 34ff 	mov.w	r4, #4294967295
 801206e:	4620      	mov	r0, r4
 8012070:	bd70      	pop	{r4, r5, r6, pc}
 8012072:	1cc4      	adds	r4, r0, #3
 8012074:	f024 0403 	bic.w	r4, r4, #3
 8012078:	42a0      	cmp	r0, r4
 801207a:	d0f8      	beq.n	801206e <sbrk_aligned+0x22>
 801207c:	1a21      	subs	r1, r4, r0
 801207e:	4628      	mov	r0, r5
 8012080:	f000 fe32 	bl	8012ce8 <_sbrk_r>
 8012084:	3001      	adds	r0, #1
 8012086:	d1f2      	bne.n	801206e <sbrk_aligned+0x22>
 8012088:	e7ef      	b.n	801206a <sbrk_aligned+0x1e>
 801208a:	bf00      	nop
 801208c:	20000dd8 	.word	0x20000dd8

08012090 <_malloc_r>:
 8012090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012094:	1ccd      	adds	r5, r1, #3
 8012096:	f025 0503 	bic.w	r5, r5, #3
 801209a:	3508      	adds	r5, #8
 801209c:	2d0c      	cmp	r5, #12
 801209e:	bf38      	it	cc
 80120a0:	250c      	movcc	r5, #12
 80120a2:	2d00      	cmp	r5, #0
 80120a4:	4606      	mov	r6, r0
 80120a6:	db01      	blt.n	80120ac <_malloc_r+0x1c>
 80120a8:	42a9      	cmp	r1, r5
 80120aa:	d904      	bls.n	80120b6 <_malloc_r+0x26>
 80120ac:	230c      	movs	r3, #12
 80120ae:	6033      	str	r3, [r6, #0]
 80120b0:	2000      	movs	r0, #0
 80120b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80120b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801218c <_malloc_r+0xfc>
 80120ba:	f000 f869 	bl	8012190 <__malloc_lock>
 80120be:	f8d8 3000 	ldr.w	r3, [r8]
 80120c2:	461c      	mov	r4, r3
 80120c4:	bb44      	cbnz	r4, 8012118 <_malloc_r+0x88>
 80120c6:	4629      	mov	r1, r5
 80120c8:	4630      	mov	r0, r6
 80120ca:	f7ff ffbf 	bl	801204c <sbrk_aligned>
 80120ce:	1c43      	adds	r3, r0, #1
 80120d0:	4604      	mov	r4, r0
 80120d2:	d158      	bne.n	8012186 <_malloc_r+0xf6>
 80120d4:	f8d8 4000 	ldr.w	r4, [r8]
 80120d8:	4627      	mov	r7, r4
 80120da:	2f00      	cmp	r7, #0
 80120dc:	d143      	bne.n	8012166 <_malloc_r+0xd6>
 80120de:	2c00      	cmp	r4, #0
 80120e0:	d04b      	beq.n	801217a <_malloc_r+0xea>
 80120e2:	6823      	ldr	r3, [r4, #0]
 80120e4:	4639      	mov	r1, r7
 80120e6:	4630      	mov	r0, r6
 80120e8:	eb04 0903 	add.w	r9, r4, r3
 80120ec:	f000 fdfc 	bl	8012ce8 <_sbrk_r>
 80120f0:	4581      	cmp	r9, r0
 80120f2:	d142      	bne.n	801217a <_malloc_r+0xea>
 80120f4:	6821      	ldr	r1, [r4, #0]
 80120f6:	1a6d      	subs	r5, r5, r1
 80120f8:	4629      	mov	r1, r5
 80120fa:	4630      	mov	r0, r6
 80120fc:	f7ff ffa6 	bl	801204c <sbrk_aligned>
 8012100:	3001      	adds	r0, #1
 8012102:	d03a      	beq.n	801217a <_malloc_r+0xea>
 8012104:	6823      	ldr	r3, [r4, #0]
 8012106:	442b      	add	r3, r5
 8012108:	6023      	str	r3, [r4, #0]
 801210a:	f8d8 3000 	ldr.w	r3, [r8]
 801210e:	685a      	ldr	r2, [r3, #4]
 8012110:	bb62      	cbnz	r2, 801216c <_malloc_r+0xdc>
 8012112:	f8c8 7000 	str.w	r7, [r8]
 8012116:	e00f      	b.n	8012138 <_malloc_r+0xa8>
 8012118:	6822      	ldr	r2, [r4, #0]
 801211a:	1b52      	subs	r2, r2, r5
 801211c:	d420      	bmi.n	8012160 <_malloc_r+0xd0>
 801211e:	2a0b      	cmp	r2, #11
 8012120:	d917      	bls.n	8012152 <_malloc_r+0xc2>
 8012122:	1961      	adds	r1, r4, r5
 8012124:	42a3      	cmp	r3, r4
 8012126:	6025      	str	r5, [r4, #0]
 8012128:	bf18      	it	ne
 801212a:	6059      	strne	r1, [r3, #4]
 801212c:	6863      	ldr	r3, [r4, #4]
 801212e:	bf08      	it	eq
 8012130:	f8c8 1000 	streq.w	r1, [r8]
 8012134:	5162      	str	r2, [r4, r5]
 8012136:	604b      	str	r3, [r1, #4]
 8012138:	4630      	mov	r0, r6
 801213a:	f000 f82f 	bl	801219c <__malloc_unlock>
 801213e:	f104 000b 	add.w	r0, r4, #11
 8012142:	1d23      	adds	r3, r4, #4
 8012144:	f020 0007 	bic.w	r0, r0, #7
 8012148:	1ac2      	subs	r2, r0, r3
 801214a:	bf1c      	itt	ne
 801214c:	1a1b      	subne	r3, r3, r0
 801214e:	50a3      	strne	r3, [r4, r2]
 8012150:	e7af      	b.n	80120b2 <_malloc_r+0x22>
 8012152:	6862      	ldr	r2, [r4, #4]
 8012154:	42a3      	cmp	r3, r4
 8012156:	bf0c      	ite	eq
 8012158:	f8c8 2000 	streq.w	r2, [r8]
 801215c:	605a      	strne	r2, [r3, #4]
 801215e:	e7eb      	b.n	8012138 <_malloc_r+0xa8>
 8012160:	4623      	mov	r3, r4
 8012162:	6864      	ldr	r4, [r4, #4]
 8012164:	e7ae      	b.n	80120c4 <_malloc_r+0x34>
 8012166:	463c      	mov	r4, r7
 8012168:	687f      	ldr	r7, [r7, #4]
 801216a:	e7b6      	b.n	80120da <_malloc_r+0x4a>
 801216c:	461a      	mov	r2, r3
 801216e:	685b      	ldr	r3, [r3, #4]
 8012170:	42a3      	cmp	r3, r4
 8012172:	d1fb      	bne.n	801216c <_malloc_r+0xdc>
 8012174:	2300      	movs	r3, #0
 8012176:	6053      	str	r3, [r2, #4]
 8012178:	e7de      	b.n	8012138 <_malloc_r+0xa8>
 801217a:	230c      	movs	r3, #12
 801217c:	6033      	str	r3, [r6, #0]
 801217e:	4630      	mov	r0, r6
 8012180:	f000 f80c 	bl	801219c <__malloc_unlock>
 8012184:	e794      	b.n	80120b0 <_malloc_r+0x20>
 8012186:	6005      	str	r5, [r0, #0]
 8012188:	e7d6      	b.n	8012138 <_malloc_r+0xa8>
 801218a:	bf00      	nop
 801218c:	20000ddc 	.word	0x20000ddc

08012190 <__malloc_lock>:
 8012190:	4801      	ldr	r0, [pc, #4]	@ (8012198 <__malloc_lock+0x8>)
 8012192:	f7ff b8ac 	b.w	80112ee <__retarget_lock_acquire_recursive>
 8012196:	bf00      	nop
 8012198:	20000dd4 	.word	0x20000dd4

0801219c <__malloc_unlock>:
 801219c:	4801      	ldr	r0, [pc, #4]	@ (80121a4 <__malloc_unlock+0x8>)
 801219e:	f7ff b8a7 	b.w	80112f0 <__retarget_lock_release_recursive>
 80121a2:	bf00      	nop
 80121a4:	20000dd4 	.word	0x20000dd4

080121a8 <_Balloc>:
 80121a8:	b570      	push	{r4, r5, r6, lr}
 80121aa:	69c6      	ldr	r6, [r0, #28]
 80121ac:	4604      	mov	r4, r0
 80121ae:	460d      	mov	r5, r1
 80121b0:	b976      	cbnz	r6, 80121d0 <_Balloc+0x28>
 80121b2:	2010      	movs	r0, #16
 80121b4:	f7ff ff42 	bl	801203c <malloc>
 80121b8:	4602      	mov	r2, r0
 80121ba:	61e0      	str	r0, [r4, #28]
 80121bc:	b920      	cbnz	r0, 80121c8 <_Balloc+0x20>
 80121be:	4b18      	ldr	r3, [pc, #96]	@ (8012220 <_Balloc+0x78>)
 80121c0:	4818      	ldr	r0, [pc, #96]	@ (8012224 <_Balloc+0x7c>)
 80121c2:	216b      	movs	r1, #107	@ 0x6b
 80121c4:	f000 fda0 	bl	8012d08 <__assert_func>
 80121c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80121cc:	6006      	str	r6, [r0, #0]
 80121ce:	60c6      	str	r6, [r0, #12]
 80121d0:	69e6      	ldr	r6, [r4, #28]
 80121d2:	68f3      	ldr	r3, [r6, #12]
 80121d4:	b183      	cbz	r3, 80121f8 <_Balloc+0x50>
 80121d6:	69e3      	ldr	r3, [r4, #28]
 80121d8:	68db      	ldr	r3, [r3, #12]
 80121da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80121de:	b9b8      	cbnz	r0, 8012210 <_Balloc+0x68>
 80121e0:	2101      	movs	r1, #1
 80121e2:	fa01 f605 	lsl.w	r6, r1, r5
 80121e6:	1d72      	adds	r2, r6, #5
 80121e8:	0092      	lsls	r2, r2, #2
 80121ea:	4620      	mov	r0, r4
 80121ec:	f000 fdaa 	bl	8012d44 <_calloc_r>
 80121f0:	b160      	cbz	r0, 801220c <_Balloc+0x64>
 80121f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80121f6:	e00e      	b.n	8012216 <_Balloc+0x6e>
 80121f8:	2221      	movs	r2, #33	@ 0x21
 80121fa:	2104      	movs	r1, #4
 80121fc:	4620      	mov	r0, r4
 80121fe:	f000 fda1 	bl	8012d44 <_calloc_r>
 8012202:	69e3      	ldr	r3, [r4, #28]
 8012204:	60f0      	str	r0, [r6, #12]
 8012206:	68db      	ldr	r3, [r3, #12]
 8012208:	2b00      	cmp	r3, #0
 801220a:	d1e4      	bne.n	80121d6 <_Balloc+0x2e>
 801220c:	2000      	movs	r0, #0
 801220e:	bd70      	pop	{r4, r5, r6, pc}
 8012210:	6802      	ldr	r2, [r0, #0]
 8012212:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012216:	2300      	movs	r3, #0
 8012218:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801221c:	e7f7      	b.n	801220e <_Balloc+0x66>
 801221e:	bf00      	nop
 8012220:	080138d9 	.word	0x080138d9
 8012224:	08013959 	.word	0x08013959

08012228 <_Bfree>:
 8012228:	b570      	push	{r4, r5, r6, lr}
 801222a:	69c6      	ldr	r6, [r0, #28]
 801222c:	4605      	mov	r5, r0
 801222e:	460c      	mov	r4, r1
 8012230:	b976      	cbnz	r6, 8012250 <_Bfree+0x28>
 8012232:	2010      	movs	r0, #16
 8012234:	f7ff ff02 	bl	801203c <malloc>
 8012238:	4602      	mov	r2, r0
 801223a:	61e8      	str	r0, [r5, #28]
 801223c:	b920      	cbnz	r0, 8012248 <_Bfree+0x20>
 801223e:	4b09      	ldr	r3, [pc, #36]	@ (8012264 <_Bfree+0x3c>)
 8012240:	4809      	ldr	r0, [pc, #36]	@ (8012268 <_Bfree+0x40>)
 8012242:	218f      	movs	r1, #143	@ 0x8f
 8012244:	f000 fd60 	bl	8012d08 <__assert_func>
 8012248:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801224c:	6006      	str	r6, [r0, #0]
 801224e:	60c6      	str	r6, [r0, #12]
 8012250:	b13c      	cbz	r4, 8012262 <_Bfree+0x3a>
 8012252:	69eb      	ldr	r3, [r5, #28]
 8012254:	6862      	ldr	r2, [r4, #4]
 8012256:	68db      	ldr	r3, [r3, #12]
 8012258:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801225c:	6021      	str	r1, [r4, #0]
 801225e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012262:	bd70      	pop	{r4, r5, r6, pc}
 8012264:	080138d9 	.word	0x080138d9
 8012268:	08013959 	.word	0x08013959

0801226c <__multadd>:
 801226c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012270:	690d      	ldr	r5, [r1, #16]
 8012272:	4607      	mov	r7, r0
 8012274:	460c      	mov	r4, r1
 8012276:	461e      	mov	r6, r3
 8012278:	f101 0c14 	add.w	ip, r1, #20
 801227c:	2000      	movs	r0, #0
 801227e:	f8dc 3000 	ldr.w	r3, [ip]
 8012282:	b299      	uxth	r1, r3
 8012284:	fb02 6101 	mla	r1, r2, r1, r6
 8012288:	0c1e      	lsrs	r6, r3, #16
 801228a:	0c0b      	lsrs	r3, r1, #16
 801228c:	fb02 3306 	mla	r3, r2, r6, r3
 8012290:	b289      	uxth	r1, r1
 8012292:	3001      	adds	r0, #1
 8012294:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012298:	4285      	cmp	r5, r0
 801229a:	f84c 1b04 	str.w	r1, [ip], #4
 801229e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80122a2:	dcec      	bgt.n	801227e <__multadd+0x12>
 80122a4:	b30e      	cbz	r6, 80122ea <__multadd+0x7e>
 80122a6:	68a3      	ldr	r3, [r4, #8]
 80122a8:	42ab      	cmp	r3, r5
 80122aa:	dc19      	bgt.n	80122e0 <__multadd+0x74>
 80122ac:	6861      	ldr	r1, [r4, #4]
 80122ae:	4638      	mov	r0, r7
 80122b0:	3101      	adds	r1, #1
 80122b2:	f7ff ff79 	bl	80121a8 <_Balloc>
 80122b6:	4680      	mov	r8, r0
 80122b8:	b928      	cbnz	r0, 80122c6 <__multadd+0x5a>
 80122ba:	4602      	mov	r2, r0
 80122bc:	4b0c      	ldr	r3, [pc, #48]	@ (80122f0 <__multadd+0x84>)
 80122be:	480d      	ldr	r0, [pc, #52]	@ (80122f4 <__multadd+0x88>)
 80122c0:	21ba      	movs	r1, #186	@ 0xba
 80122c2:	f000 fd21 	bl	8012d08 <__assert_func>
 80122c6:	6922      	ldr	r2, [r4, #16]
 80122c8:	3202      	adds	r2, #2
 80122ca:	f104 010c 	add.w	r1, r4, #12
 80122ce:	0092      	lsls	r2, r2, #2
 80122d0:	300c      	adds	r0, #12
 80122d2:	f7ff f80e 	bl	80112f2 <memcpy>
 80122d6:	4621      	mov	r1, r4
 80122d8:	4638      	mov	r0, r7
 80122da:	f7ff ffa5 	bl	8012228 <_Bfree>
 80122de:	4644      	mov	r4, r8
 80122e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80122e4:	3501      	adds	r5, #1
 80122e6:	615e      	str	r6, [r3, #20]
 80122e8:	6125      	str	r5, [r4, #16]
 80122ea:	4620      	mov	r0, r4
 80122ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122f0:	08013948 	.word	0x08013948
 80122f4:	08013959 	.word	0x08013959

080122f8 <__hi0bits>:
 80122f8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80122fc:	4603      	mov	r3, r0
 80122fe:	bf36      	itet	cc
 8012300:	0403      	lslcc	r3, r0, #16
 8012302:	2000      	movcs	r0, #0
 8012304:	2010      	movcc	r0, #16
 8012306:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801230a:	bf3c      	itt	cc
 801230c:	021b      	lslcc	r3, r3, #8
 801230e:	3008      	addcc	r0, #8
 8012310:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012314:	bf3c      	itt	cc
 8012316:	011b      	lslcc	r3, r3, #4
 8012318:	3004      	addcc	r0, #4
 801231a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801231e:	bf3c      	itt	cc
 8012320:	009b      	lslcc	r3, r3, #2
 8012322:	3002      	addcc	r0, #2
 8012324:	2b00      	cmp	r3, #0
 8012326:	db05      	blt.n	8012334 <__hi0bits+0x3c>
 8012328:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801232c:	f100 0001 	add.w	r0, r0, #1
 8012330:	bf08      	it	eq
 8012332:	2020      	moveq	r0, #32
 8012334:	4770      	bx	lr

08012336 <__lo0bits>:
 8012336:	6803      	ldr	r3, [r0, #0]
 8012338:	4602      	mov	r2, r0
 801233a:	f013 0007 	ands.w	r0, r3, #7
 801233e:	d00b      	beq.n	8012358 <__lo0bits+0x22>
 8012340:	07d9      	lsls	r1, r3, #31
 8012342:	d421      	bmi.n	8012388 <__lo0bits+0x52>
 8012344:	0798      	lsls	r0, r3, #30
 8012346:	bf49      	itett	mi
 8012348:	085b      	lsrmi	r3, r3, #1
 801234a:	089b      	lsrpl	r3, r3, #2
 801234c:	2001      	movmi	r0, #1
 801234e:	6013      	strmi	r3, [r2, #0]
 8012350:	bf5c      	itt	pl
 8012352:	6013      	strpl	r3, [r2, #0]
 8012354:	2002      	movpl	r0, #2
 8012356:	4770      	bx	lr
 8012358:	b299      	uxth	r1, r3
 801235a:	b909      	cbnz	r1, 8012360 <__lo0bits+0x2a>
 801235c:	0c1b      	lsrs	r3, r3, #16
 801235e:	2010      	movs	r0, #16
 8012360:	b2d9      	uxtb	r1, r3
 8012362:	b909      	cbnz	r1, 8012368 <__lo0bits+0x32>
 8012364:	3008      	adds	r0, #8
 8012366:	0a1b      	lsrs	r3, r3, #8
 8012368:	0719      	lsls	r1, r3, #28
 801236a:	bf04      	itt	eq
 801236c:	091b      	lsreq	r3, r3, #4
 801236e:	3004      	addeq	r0, #4
 8012370:	0799      	lsls	r1, r3, #30
 8012372:	bf04      	itt	eq
 8012374:	089b      	lsreq	r3, r3, #2
 8012376:	3002      	addeq	r0, #2
 8012378:	07d9      	lsls	r1, r3, #31
 801237a:	d403      	bmi.n	8012384 <__lo0bits+0x4e>
 801237c:	085b      	lsrs	r3, r3, #1
 801237e:	f100 0001 	add.w	r0, r0, #1
 8012382:	d003      	beq.n	801238c <__lo0bits+0x56>
 8012384:	6013      	str	r3, [r2, #0]
 8012386:	4770      	bx	lr
 8012388:	2000      	movs	r0, #0
 801238a:	4770      	bx	lr
 801238c:	2020      	movs	r0, #32
 801238e:	4770      	bx	lr

08012390 <__i2b>:
 8012390:	b510      	push	{r4, lr}
 8012392:	460c      	mov	r4, r1
 8012394:	2101      	movs	r1, #1
 8012396:	f7ff ff07 	bl	80121a8 <_Balloc>
 801239a:	4602      	mov	r2, r0
 801239c:	b928      	cbnz	r0, 80123aa <__i2b+0x1a>
 801239e:	4b05      	ldr	r3, [pc, #20]	@ (80123b4 <__i2b+0x24>)
 80123a0:	4805      	ldr	r0, [pc, #20]	@ (80123b8 <__i2b+0x28>)
 80123a2:	f240 1145 	movw	r1, #325	@ 0x145
 80123a6:	f000 fcaf 	bl	8012d08 <__assert_func>
 80123aa:	2301      	movs	r3, #1
 80123ac:	6144      	str	r4, [r0, #20]
 80123ae:	6103      	str	r3, [r0, #16]
 80123b0:	bd10      	pop	{r4, pc}
 80123b2:	bf00      	nop
 80123b4:	08013948 	.word	0x08013948
 80123b8:	08013959 	.word	0x08013959

080123bc <__multiply>:
 80123bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123c0:	4614      	mov	r4, r2
 80123c2:	690a      	ldr	r2, [r1, #16]
 80123c4:	6923      	ldr	r3, [r4, #16]
 80123c6:	429a      	cmp	r2, r3
 80123c8:	bfa8      	it	ge
 80123ca:	4623      	movge	r3, r4
 80123cc:	460f      	mov	r7, r1
 80123ce:	bfa4      	itt	ge
 80123d0:	460c      	movge	r4, r1
 80123d2:	461f      	movge	r7, r3
 80123d4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80123d8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80123dc:	68a3      	ldr	r3, [r4, #8]
 80123de:	6861      	ldr	r1, [r4, #4]
 80123e0:	eb0a 0609 	add.w	r6, sl, r9
 80123e4:	42b3      	cmp	r3, r6
 80123e6:	b085      	sub	sp, #20
 80123e8:	bfb8      	it	lt
 80123ea:	3101      	addlt	r1, #1
 80123ec:	f7ff fedc 	bl	80121a8 <_Balloc>
 80123f0:	b930      	cbnz	r0, 8012400 <__multiply+0x44>
 80123f2:	4602      	mov	r2, r0
 80123f4:	4b44      	ldr	r3, [pc, #272]	@ (8012508 <__multiply+0x14c>)
 80123f6:	4845      	ldr	r0, [pc, #276]	@ (801250c <__multiply+0x150>)
 80123f8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80123fc:	f000 fc84 	bl	8012d08 <__assert_func>
 8012400:	f100 0514 	add.w	r5, r0, #20
 8012404:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012408:	462b      	mov	r3, r5
 801240a:	2200      	movs	r2, #0
 801240c:	4543      	cmp	r3, r8
 801240e:	d321      	bcc.n	8012454 <__multiply+0x98>
 8012410:	f107 0114 	add.w	r1, r7, #20
 8012414:	f104 0214 	add.w	r2, r4, #20
 8012418:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801241c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8012420:	9302      	str	r3, [sp, #8]
 8012422:	1b13      	subs	r3, r2, r4
 8012424:	3b15      	subs	r3, #21
 8012426:	f023 0303 	bic.w	r3, r3, #3
 801242a:	3304      	adds	r3, #4
 801242c:	f104 0715 	add.w	r7, r4, #21
 8012430:	42ba      	cmp	r2, r7
 8012432:	bf38      	it	cc
 8012434:	2304      	movcc	r3, #4
 8012436:	9301      	str	r3, [sp, #4]
 8012438:	9b02      	ldr	r3, [sp, #8]
 801243a:	9103      	str	r1, [sp, #12]
 801243c:	428b      	cmp	r3, r1
 801243e:	d80c      	bhi.n	801245a <__multiply+0x9e>
 8012440:	2e00      	cmp	r6, #0
 8012442:	dd03      	ble.n	801244c <__multiply+0x90>
 8012444:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012448:	2b00      	cmp	r3, #0
 801244a:	d05b      	beq.n	8012504 <__multiply+0x148>
 801244c:	6106      	str	r6, [r0, #16]
 801244e:	b005      	add	sp, #20
 8012450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012454:	f843 2b04 	str.w	r2, [r3], #4
 8012458:	e7d8      	b.n	801240c <__multiply+0x50>
 801245a:	f8b1 a000 	ldrh.w	sl, [r1]
 801245e:	f1ba 0f00 	cmp.w	sl, #0
 8012462:	d024      	beq.n	80124ae <__multiply+0xf2>
 8012464:	f104 0e14 	add.w	lr, r4, #20
 8012468:	46a9      	mov	r9, r5
 801246a:	f04f 0c00 	mov.w	ip, #0
 801246e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012472:	f8d9 3000 	ldr.w	r3, [r9]
 8012476:	fa1f fb87 	uxth.w	fp, r7
 801247a:	b29b      	uxth	r3, r3
 801247c:	fb0a 330b 	mla	r3, sl, fp, r3
 8012480:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8012484:	f8d9 7000 	ldr.w	r7, [r9]
 8012488:	4463      	add	r3, ip
 801248a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801248e:	fb0a c70b 	mla	r7, sl, fp, ip
 8012492:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8012496:	b29b      	uxth	r3, r3
 8012498:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801249c:	4572      	cmp	r2, lr
 801249e:	f849 3b04 	str.w	r3, [r9], #4
 80124a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80124a6:	d8e2      	bhi.n	801246e <__multiply+0xb2>
 80124a8:	9b01      	ldr	r3, [sp, #4]
 80124aa:	f845 c003 	str.w	ip, [r5, r3]
 80124ae:	9b03      	ldr	r3, [sp, #12]
 80124b0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80124b4:	3104      	adds	r1, #4
 80124b6:	f1b9 0f00 	cmp.w	r9, #0
 80124ba:	d021      	beq.n	8012500 <__multiply+0x144>
 80124bc:	682b      	ldr	r3, [r5, #0]
 80124be:	f104 0c14 	add.w	ip, r4, #20
 80124c2:	46ae      	mov	lr, r5
 80124c4:	f04f 0a00 	mov.w	sl, #0
 80124c8:	f8bc b000 	ldrh.w	fp, [ip]
 80124cc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80124d0:	fb09 770b 	mla	r7, r9, fp, r7
 80124d4:	4457      	add	r7, sl
 80124d6:	b29b      	uxth	r3, r3
 80124d8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80124dc:	f84e 3b04 	str.w	r3, [lr], #4
 80124e0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80124e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80124e8:	f8be 3000 	ldrh.w	r3, [lr]
 80124ec:	fb09 330a 	mla	r3, r9, sl, r3
 80124f0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80124f4:	4562      	cmp	r2, ip
 80124f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80124fa:	d8e5      	bhi.n	80124c8 <__multiply+0x10c>
 80124fc:	9f01      	ldr	r7, [sp, #4]
 80124fe:	51eb      	str	r3, [r5, r7]
 8012500:	3504      	adds	r5, #4
 8012502:	e799      	b.n	8012438 <__multiply+0x7c>
 8012504:	3e01      	subs	r6, #1
 8012506:	e79b      	b.n	8012440 <__multiply+0x84>
 8012508:	08013948 	.word	0x08013948
 801250c:	08013959 	.word	0x08013959

08012510 <__pow5mult>:
 8012510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012514:	4615      	mov	r5, r2
 8012516:	f012 0203 	ands.w	r2, r2, #3
 801251a:	4607      	mov	r7, r0
 801251c:	460e      	mov	r6, r1
 801251e:	d007      	beq.n	8012530 <__pow5mult+0x20>
 8012520:	4c25      	ldr	r4, [pc, #148]	@ (80125b8 <__pow5mult+0xa8>)
 8012522:	3a01      	subs	r2, #1
 8012524:	2300      	movs	r3, #0
 8012526:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801252a:	f7ff fe9f 	bl	801226c <__multadd>
 801252e:	4606      	mov	r6, r0
 8012530:	10ad      	asrs	r5, r5, #2
 8012532:	d03d      	beq.n	80125b0 <__pow5mult+0xa0>
 8012534:	69fc      	ldr	r4, [r7, #28]
 8012536:	b97c      	cbnz	r4, 8012558 <__pow5mult+0x48>
 8012538:	2010      	movs	r0, #16
 801253a:	f7ff fd7f 	bl	801203c <malloc>
 801253e:	4602      	mov	r2, r0
 8012540:	61f8      	str	r0, [r7, #28]
 8012542:	b928      	cbnz	r0, 8012550 <__pow5mult+0x40>
 8012544:	4b1d      	ldr	r3, [pc, #116]	@ (80125bc <__pow5mult+0xac>)
 8012546:	481e      	ldr	r0, [pc, #120]	@ (80125c0 <__pow5mult+0xb0>)
 8012548:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801254c:	f000 fbdc 	bl	8012d08 <__assert_func>
 8012550:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012554:	6004      	str	r4, [r0, #0]
 8012556:	60c4      	str	r4, [r0, #12]
 8012558:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801255c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012560:	b94c      	cbnz	r4, 8012576 <__pow5mult+0x66>
 8012562:	f240 2171 	movw	r1, #625	@ 0x271
 8012566:	4638      	mov	r0, r7
 8012568:	f7ff ff12 	bl	8012390 <__i2b>
 801256c:	2300      	movs	r3, #0
 801256e:	f8c8 0008 	str.w	r0, [r8, #8]
 8012572:	4604      	mov	r4, r0
 8012574:	6003      	str	r3, [r0, #0]
 8012576:	f04f 0900 	mov.w	r9, #0
 801257a:	07eb      	lsls	r3, r5, #31
 801257c:	d50a      	bpl.n	8012594 <__pow5mult+0x84>
 801257e:	4631      	mov	r1, r6
 8012580:	4622      	mov	r2, r4
 8012582:	4638      	mov	r0, r7
 8012584:	f7ff ff1a 	bl	80123bc <__multiply>
 8012588:	4631      	mov	r1, r6
 801258a:	4680      	mov	r8, r0
 801258c:	4638      	mov	r0, r7
 801258e:	f7ff fe4b 	bl	8012228 <_Bfree>
 8012592:	4646      	mov	r6, r8
 8012594:	106d      	asrs	r5, r5, #1
 8012596:	d00b      	beq.n	80125b0 <__pow5mult+0xa0>
 8012598:	6820      	ldr	r0, [r4, #0]
 801259a:	b938      	cbnz	r0, 80125ac <__pow5mult+0x9c>
 801259c:	4622      	mov	r2, r4
 801259e:	4621      	mov	r1, r4
 80125a0:	4638      	mov	r0, r7
 80125a2:	f7ff ff0b 	bl	80123bc <__multiply>
 80125a6:	6020      	str	r0, [r4, #0]
 80125a8:	f8c0 9000 	str.w	r9, [r0]
 80125ac:	4604      	mov	r4, r0
 80125ae:	e7e4      	b.n	801257a <__pow5mult+0x6a>
 80125b0:	4630      	mov	r0, r6
 80125b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80125b6:	bf00      	nop
 80125b8:	080139b4 	.word	0x080139b4
 80125bc:	080138d9 	.word	0x080138d9
 80125c0:	08013959 	.word	0x08013959

080125c4 <__lshift>:
 80125c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80125c8:	460c      	mov	r4, r1
 80125ca:	6849      	ldr	r1, [r1, #4]
 80125cc:	6923      	ldr	r3, [r4, #16]
 80125ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80125d2:	68a3      	ldr	r3, [r4, #8]
 80125d4:	4607      	mov	r7, r0
 80125d6:	4691      	mov	r9, r2
 80125d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80125dc:	f108 0601 	add.w	r6, r8, #1
 80125e0:	42b3      	cmp	r3, r6
 80125e2:	db0b      	blt.n	80125fc <__lshift+0x38>
 80125e4:	4638      	mov	r0, r7
 80125e6:	f7ff fddf 	bl	80121a8 <_Balloc>
 80125ea:	4605      	mov	r5, r0
 80125ec:	b948      	cbnz	r0, 8012602 <__lshift+0x3e>
 80125ee:	4602      	mov	r2, r0
 80125f0:	4b28      	ldr	r3, [pc, #160]	@ (8012694 <__lshift+0xd0>)
 80125f2:	4829      	ldr	r0, [pc, #164]	@ (8012698 <__lshift+0xd4>)
 80125f4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80125f8:	f000 fb86 	bl	8012d08 <__assert_func>
 80125fc:	3101      	adds	r1, #1
 80125fe:	005b      	lsls	r3, r3, #1
 8012600:	e7ee      	b.n	80125e0 <__lshift+0x1c>
 8012602:	2300      	movs	r3, #0
 8012604:	f100 0114 	add.w	r1, r0, #20
 8012608:	f100 0210 	add.w	r2, r0, #16
 801260c:	4618      	mov	r0, r3
 801260e:	4553      	cmp	r3, sl
 8012610:	db33      	blt.n	801267a <__lshift+0xb6>
 8012612:	6920      	ldr	r0, [r4, #16]
 8012614:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012618:	f104 0314 	add.w	r3, r4, #20
 801261c:	f019 091f 	ands.w	r9, r9, #31
 8012620:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012624:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012628:	d02b      	beq.n	8012682 <__lshift+0xbe>
 801262a:	f1c9 0e20 	rsb	lr, r9, #32
 801262e:	468a      	mov	sl, r1
 8012630:	2200      	movs	r2, #0
 8012632:	6818      	ldr	r0, [r3, #0]
 8012634:	fa00 f009 	lsl.w	r0, r0, r9
 8012638:	4310      	orrs	r0, r2
 801263a:	f84a 0b04 	str.w	r0, [sl], #4
 801263e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012642:	459c      	cmp	ip, r3
 8012644:	fa22 f20e 	lsr.w	r2, r2, lr
 8012648:	d8f3      	bhi.n	8012632 <__lshift+0x6e>
 801264a:	ebac 0304 	sub.w	r3, ip, r4
 801264e:	3b15      	subs	r3, #21
 8012650:	f023 0303 	bic.w	r3, r3, #3
 8012654:	3304      	adds	r3, #4
 8012656:	f104 0015 	add.w	r0, r4, #21
 801265a:	4584      	cmp	ip, r0
 801265c:	bf38      	it	cc
 801265e:	2304      	movcc	r3, #4
 8012660:	50ca      	str	r2, [r1, r3]
 8012662:	b10a      	cbz	r2, 8012668 <__lshift+0xa4>
 8012664:	f108 0602 	add.w	r6, r8, #2
 8012668:	3e01      	subs	r6, #1
 801266a:	4638      	mov	r0, r7
 801266c:	612e      	str	r6, [r5, #16]
 801266e:	4621      	mov	r1, r4
 8012670:	f7ff fdda 	bl	8012228 <_Bfree>
 8012674:	4628      	mov	r0, r5
 8012676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801267a:	f842 0f04 	str.w	r0, [r2, #4]!
 801267e:	3301      	adds	r3, #1
 8012680:	e7c5      	b.n	801260e <__lshift+0x4a>
 8012682:	3904      	subs	r1, #4
 8012684:	f853 2b04 	ldr.w	r2, [r3], #4
 8012688:	f841 2f04 	str.w	r2, [r1, #4]!
 801268c:	459c      	cmp	ip, r3
 801268e:	d8f9      	bhi.n	8012684 <__lshift+0xc0>
 8012690:	e7ea      	b.n	8012668 <__lshift+0xa4>
 8012692:	bf00      	nop
 8012694:	08013948 	.word	0x08013948
 8012698:	08013959 	.word	0x08013959

0801269c <__mcmp>:
 801269c:	690a      	ldr	r2, [r1, #16]
 801269e:	4603      	mov	r3, r0
 80126a0:	6900      	ldr	r0, [r0, #16]
 80126a2:	1a80      	subs	r0, r0, r2
 80126a4:	b530      	push	{r4, r5, lr}
 80126a6:	d10e      	bne.n	80126c6 <__mcmp+0x2a>
 80126a8:	3314      	adds	r3, #20
 80126aa:	3114      	adds	r1, #20
 80126ac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80126b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80126b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80126b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80126bc:	4295      	cmp	r5, r2
 80126be:	d003      	beq.n	80126c8 <__mcmp+0x2c>
 80126c0:	d205      	bcs.n	80126ce <__mcmp+0x32>
 80126c2:	f04f 30ff 	mov.w	r0, #4294967295
 80126c6:	bd30      	pop	{r4, r5, pc}
 80126c8:	42a3      	cmp	r3, r4
 80126ca:	d3f3      	bcc.n	80126b4 <__mcmp+0x18>
 80126cc:	e7fb      	b.n	80126c6 <__mcmp+0x2a>
 80126ce:	2001      	movs	r0, #1
 80126d0:	e7f9      	b.n	80126c6 <__mcmp+0x2a>
	...

080126d4 <__mdiff>:
 80126d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126d8:	4689      	mov	r9, r1
 80126da:	4606      	mov	r6, r0
 80126dc:	4611      	mov	r1, r2
 80126de:	4648      	mov	r0, r9
 80126e0:	4614      	mov	r4, r2
 80126e2:	f7ff ffdb 	bl	801269c <__mcmp>
 80126e6:	1e05      	subs	r5, r0, #0
 80126e8:	d112      	bne.n	8012710 <__mdiff+0x3c>
 80126ea:	4629      	mov	r1, r5
 80126ec:	4630      	mov	r0, r6
 80126ee:	f7ff fd5b 	bl	80121a8 <_Balloc>
 80126f2:	4602      	mov	r2, r0
 80126f4:	b928      	cbnz	r0, 8012702 <__mdiff+0x2e>
 80126f6:	4b3f      	ldr	r3, [pc, #252]	@ (80127f4 <__mdiff+0x120>)
 80126f8:	f240 2137 	movw	r1, #567	@ 0x237
 80126fc:	483e      	ldr	r0, [pc, #248]	@ (80127f8 <__mdiff+0x124>)
 80126fe:	f000 fb03 	bl	8012d08 <__assert_func>
 8012702:	2301      	movs	r3, #1
 8012704:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012708:	4610      	mov	r0, r2
 801270a:	b003      	add	sp, #12
 801270c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012710:	bfbc      	itt	lt
 8012712:	464b      	movlt	r3, r9
 8012714:	46a1      	movlt	r9, r4
 8012716:	4630      	mov	r0, r6
 8012718:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801271c:	bfba      	itte	lt
 801271e:	461c      	movlt	r4, r3
 8012720:	2501      	movlt	r5, #1
 8012722:	2500      	movge	r5, #0
 8012724:	f7ff fd40 	bl	80121a8 <_Balloc>
 8012728:	4602      	mov	r2, r0
 801272a:	b918      	cbnz	r0, 8012734 <__mdiff+0x60>
 801272c:	4b31      	ldr	r3, [pc, #196]	@ (80127f4 <__mdiff+0x120>)
 801272e:	f240 2145 	movw	r1, #581	@ 0x245
 8012732:	e7e3      	b.n	80126fc <__mdiff+0x28>
 8012734:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8012738:	6926      	ldr	r6, [r4, #16]
 801273a:	60c5      	str	r5, [r0, #12]
 801273c:	f109 0310 	add.w	r3, r9, #16
 8012740:	f109 0514 	add.w	r5, r9, #20
 8012744:	f104 0e14 	add.w	lr, r4, #20
 8012748:	f100 0b14 	add.w	fp, r0, #20
 801274c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8012750:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8012754:	9301      	str	r3, [sp, #4]
 8012756:	46d9      	mov	r9, fp
 8012758:	f04f 0c00 	mov.w	ip, #0
 801275c:	9b01      	ldr	r3, [sp, #4]
 801275e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8012762:	f853 af04 	ldr.w	sl, [r3, #4]!
 8012766:	9301      	str	r3, [sp, #4]
 8012768:	fa1f f38a 	uxth.w	r3, sl
 801276c:	4619      	mov	r1, r3
 801276e:	b283      	uxth	r3, r0
 8012770:	1acb      	subs	r3, r1, r3
 8012772:	0c00      	lsrs	r0, r0, #16
 8012774:	4463      	add	r3, ip
 8012776:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801277a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801277e:	b29b      	uxth	r3, r3
 8012780:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8012784:	4576      	cmp	r6, lr
 8012786:	f849 3b04 	str.w	r3, [r9], #4
 801278a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801278e:	d8e5      	bhi.n	801275c <__mdiff+0x88>
 8012790:	1b33      	subs	r3, r6, r4
 8012792:	3b15      	subs	r3, #21
 8012794:	f023 0303 	bic.w	r3, r3, #3
 8012798:	3415      	adds	r4, #21
 801279a:	3304      	adds	r3, #4
 801279c:	42a6      	cmp	r6, r4
 801279e:	bf38      	it	cc
 80127a0:	2304      	movcc	r3, #4
 80127a2:	441d      	add	r5, r3
 80127a4:	445b      	add	r3, fp
 80127a6:	461e      	mov	r6, r3
 80127a8:	462c      	mov	r4, r5
 80127aa:	4544      	cmp	r4, r8
 80127ac:	d30e      	bcc.n	80127cc <__mdiff+0xf8>
 80127ae:	f108 0103 	add.w	r1, r8, #3
 80127b2:	1b49      	subs	r1, r1, r5
 80127b4:	f021 0103 	bic.w	r1, r1, #3
 80127b8:	3d03      	subs	r5, #3
 80127ba:	45a8      	cmp	r8, r5
 80127bc:	bf38      	it	cc
 80127be:	2100      	movcc	r1, #0
 80127c0:	440b      	add	r3, r1
 80127c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80127c6:	b191      	cbz	r1, 80127ee <__mdiff+0x11a>
 80127c8:	6117      	str	r7, [r2, #16]
 80127ca:	e79d      	b.n	8012708 <__mdiff+0x34>
 80127cc:	f854 1b04 	ldr.w	r1, [r4], #4
 80127d0:	46e6      	mov	lr, ip
 80127d2:	0c08      	lsrs	r0, r1, #16
 80127d4:	fa1c fc81 	uxtah	ip, ip, r1
 80127d8:	4471      	add	r1, lr
 80127da:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80127de:	b289      	uxth	r1, r1
 80127e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80127e4:	f846 1b04 	str.w	r1, [r6], #4
 80127e8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80127ec:	e7dd      	b.n	80127aa <__mdiff+0xd6>
 80127ee:	3f01      	subs	r7, #1
 80127f0:	e7e7      	b.n	80127c2 <__mdiff+0xee>
 80127f2:	bf00      	nop
 80127f4:	08013948 	.word	0x08013948
 80127f8:	08013959 	.word	0x08013959

080127fc <__d2b>:
 80127fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012800:	460f      	mov	r7, r1
 8012802:	2101      	movs	r1, #1
 8012804:	ec59 8b10 	vmov	r8, r9, d0
 8012808:	4616      	mov	r6, r2
 801280a:	f7ff fccd 	bl	80121a8 <_Balloc>
 801280e:	4604      	mov	r4, r0
 8012810:	b930      	cbnz	r0, 8012820 <__d2b+0x24>
 8012812:	4602      	mov	r2, r0
 8012814:	4b23      	ldr	r3, [pc, #140]	@ (80128a4 <__d2b+0xa8>)
 8012816:	4824      	ldr	r0, [pc, #144]	@ (80128a8 <__d2b+0xac>)
 8012818:	f240 310f 	movw	r1, #783	@ 0x30f
 801281c:	f000 fa74 	bl	8012d08 <__assert_func>
 8012820:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012824:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012828:	b10d      	cbz	r5, 801282e <__d2b+0x32>
 801282a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801282e:	9301      	str	r3, [sp, #4]
 8012830:	f1b8 0300 	subs.w	r3, r8, #0
 8012834:	d023      	beq.n	801287e <__d2b+0x82>
 8012836:	4668      	mov	r0, sp
 8012838:	9300      	str	r3, [sp, #0]
 801283a:	f7ff fd7c 	bl	8012336 <__lo0bits>
 801283e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012842:	b1d0      	cbz	r0, 801287a <__d2b+0x7e>
 8012844:	f1c0 0320 	rsb	r3, r0, #32
 8012848:	fa02 f303 	lsl.w	r3, r2, r3
 801284c:	430b      	orrs	r3, r1
 801284e:	40c2      	lsrs	r2, r0
 8012850:	6163      	str	r3, [r4, #20]
 8012852:	9201      	str	r2, [sp, #4]
 8012854:	9b01      	ldr	r3, [sp, #4]
 8012856:	61a3      	str	r3, [r4, #24]
 8012858:	2b00      	cmp	r3, #0
 801285a:	bf0c      	ite	eq
 801285c:	2201      	moveq	r2, #1
 801285e:	2202      	movne	r2, #2
 8012860:	6122      	str	r2, [r4, #16]
 8012862:	b1a5      	cbz	r5, 801288e <__d2b+0x92>
 8012864:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8012868:	4405      	add	r5, r0
 801286a:	603d      	str	r5, [r7, #0]
 801286c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8012870:	6030      	str	r0, [r6, #0]
 8012872:	4620      	mov	r0, r4
 8012874:	b003      	add	sp, #12
 8012876:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801287a:	6161      	str	r1, [r4, #20]
 801287c:	e7ea      	b.n	8012854 <__d2b+0x58>
 801287e:	a801      	add	r0, sp, #4
 8012880:	f7ff fd59 	bl	8012336 <__lo0bits>
 8012884:	9b01      	ldr	r3, [sp, #4]
 8012886:	6163      	str	r3, [r4, #20]
 8012888:	3020      	adds	r0, #32
 801288a:	2201      	movs	r2, #1
 801288c:	e7e8      	b.n	8012860 <__d2b+0x64>
 801288e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012892:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8012896:	6038      	str	r0, [r7, #0]
 8012898:	6918      	ldr	r0, [r3, #16]
 801289a:	f7ff fd2d 	bl	80122f8 <__hi0bits>
 801289e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80128a2:	e7e5      	b.n	8012870 <__d2b+0x74>
 80128a4:	08013948 	.word	0x08013948
 80128a8:	08013959 	.word	0x08013959

080128ac <__ssputs_r>:
 80128ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80128b0:	688e      	ldr	r6, [r1, #8]
 80128b2:	461f      	mov	r7, r3
 80128b4:	42be      	cmp	r6, r7
 80128b6:	680b      	ldr	r3, [r1, #0]
 80128b8:	4682      	mov	sl, r0
 80128ba:	460c      	mov	r4, r1
 80128bc:	4690      	mov	r8, r2
 80128be:	d82d      	bhi.n	801291c <__ssputs_r+0x70>
 80128c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80128c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80128c8:	d026      	beq.n	8012918 <__ssputs_r+0x6c>
 80128ca:	6965      	ldr	r5, [r4, #20]
 80128cc:	6909      	ldr	r1, [r1, #16]
 80128ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80128d2:	eba3 0901 	sub.w	r9, r3, r1
 80128d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80128da:	1c7b      	adds	r3, r7, #1
 80128dc:	444b      	add	r3, r9
 80128de:	106d      	asrs	r5, r5, #1
 80128e0:	429d      	cmp	r5, r3
 80128e2:	bf38      	it	cc
 80128e4:	461d      	movcc	r5, r3
 80128e6:	0553      	lsls	r3, r2, #21
 80128e8:	d527      	bpl.n	801293a <__ssputs_r+0x8e>
 80128ea:	4629      	mov	r1, r5
 80128ec:	f7ff fbd0 	bl	8012090 <_malloc_r>
 80128f0:	4606      	mov	r6, r0
 80128f2:	b360      	cbz	r0, 801294e <__ssputs_r+0xa2>
 80128f4:	6921      	ldr	r1, [r4, #16]
 80128f6:	464a      	mov	r2, r9
 80128f8:	f7fe fcfb 	bl	80112f2 <memcpy>
 80128fc:	89a3      	ldrh	r3, [r4, #12]
 80128fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012902:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012906:	81a3      	strh	r3, [r4, #12]
 8012908:	6126      	str	r6, [r4, #16]
 801290a:	6165      	str	r5, [r4, #20]
 801290c:	444e      	add	r6, r9
 801290e:	eba5 0509 	sub.w	r5, r5, r9
 8012912:	6026      	str	r6, [r4, #0]
 8012914:	60a5      	str	r5, [r4, #8]
 8012916:	463e      	mov	r6, r7
 8012918:	42be      	cmp	r6, r7
 801291a:	d900      	bls.n	801291e <__ssputs_r+0x72>
 801291c:	463e      	mov	r6, r7
 801291e:	6820      	ldr	r0, [r4, #0]
 8012920:	4632      	mov	r2, r6
 8012922:	4641      	mov	r1, r8
 8012924:	f000 f9c6 	bl	8012cb4 <memmove>
 8012928:	68a3      	ldr	r3, [r4, #8]
 801292a:	1b9b      	subs	r3, r3, r6
 801292c:	60a3      	str	r3, [r4, #8]
 801292e:	6823      	ldr	r3, [r4, #0]
 8012930:	4433      	add	r3, r6
 8012932:	6023      	str	r3, [r4, #0]
 8012934:	2000      	movs	r0, #0
 8012936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801293a:	462a      	mov	r2, r5
 801293c:	f000 fa28 	bl	8012d90 <_realloc_r>
 8012940:	4606      	mov	r6, r0
 8012942:	2800      	cmp	r0, #0
 8012944:	d1e0      	bne.n	8012908 <__ssputs_r+0x5c>
 8012946:	6921      	ldr	r1, [r4, #16]
 8012948:	4650      	mov	r0, sl
 801294a:	f7ff fb2d 	bl	8011fa8 <_free_r>
 801294e:	230c      	movs	r3, #12
 8012950:	f8ca 3000 	str.w	r3, [sl]
 8012954:	89a3      	ldrh	r3, [r4, #12]
 8012956:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801295a:	81a3      	strh	r3, [r4, #12]
 801295c:	f04f 30ff 	mov.w	r0, #4294967295
 8012960:	e7e9      	b.n	8012936 <__ssputs_r+0x8a>
	...

08012964 <_svfiprintf_r>:
 8012964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012968:	4698      	mov	r8, r3
 801296a:	898b      	ldrh	r3, [r1, #12]
 801296c:	061b      	lsls	r3, r3, #24
 801296e:	b09d      	sub	sp, #116	@ 0x74
 8012970:	4607      	mov	r7, r0
 8012972:	460d      	mov	r5, r1
 8012974:	4614      	mov	r4, r2
 8012976:	d510      	bpl.n	801299a <_svfiprintf_r+0x36>
 8012978:	690b      	ldr	r3, [r1, #16]
 801297a:	b973      	cbnz	r3, 801299a <_svfiprintf_r+0x36>
 801297c:	2140      	movs	r1, #64	@ 0x40
 801297e:	f7ff fb87 	bl	8012090 <_malloc_r>
 8012982:	6028      	str	r0, [r5, #0]
 8012984:	6128      	str	r0, [r5, #16]
 8012986:	b930      	cbnz	r0, 8012996 <_svfiprintf_r+0x32>
 8012988:	230c      	movs	r3, #12
 801298a:	603b      	str	r3, [r7, #0]
 801298c:	f04f 30ff 	mov.w	r0, #4294967295
 8012990:	b01d      	add	sp, #116	@ 0x74
 8012992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012996:	2340      	movs	r3, #64	@ 0x40
 8012998:	616b      	str	r3, [r5, #20]
 801299a:	2300      	movs	r3, #0
 801299c:	9309      	str	r3, [sp, #36]	@ 0x24
 801299e:	2320      	movs	r3, #32
 80129a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80129a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80129a8:	2330      	movs	r3, #48	@ 0x30
 80129aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012b48 <_svfiprintf_r+0x1e4>
 80129ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80129b2:	f04f 0901 	mov.w	r9, #1
 80129b6:	4623      	mov	r3, r4
 80129b8:	469a      	mov	sl, r3
 80129ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80129be:	b10a      	cbz	r2, 80129c4 <_svfiprintf_r+0x60>
 80129c0:	2a25      	cmp	r2, #37	@ 0x25
 80129c2:	d1f9      	bne.n	80129b8 <_svfiprintf_r+0x54>
 80129c4:	ebba 0b04 	subs.w	fp, sl, r4
 80129c8:	d00b      	beq.n	80129e2 <_svfiprintf_r+0x7e>
 80129ca:	465b      	mov	r3, fp
 80129cc:	4622      	mov	r2, r4
 80129ce:	4629      	mov	r1, r5
 80129d0:	4638      	mov	r0, r7
 80129d2:	f7ff ff6b 	bl	80128ac <__ssputs_r>
 80129d6:	3001      	adds	r0, #1
 80129d8:	f000 80a7 	beq.w	8012b2a <_svfiprintf_r+0x1c6>
 80129dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80129de:	445a      	add	r2, fp
 80129e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80129e2:	f89a 3000 	ldrb.w	r3, [sl]
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	f000 809f 	beq.w	8012b2a <_svfiprintf_r+0x1c6>
 80129ec:	2300      	movs	r3, #0
 80129ee:	f04f 32ff 	mov.w	r2, #4294967295
 80129f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80129f6:	f10a 0a01 	add.w	sl, sl, #1
 80129fa:	9304      	str	r3, [sp, #16]
 80129fc:	9307      	str	r3, [sp, #28]
 80129fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012a02:	931a      	str	r3, [sp, #104]	@ 0x68
 8012a04:	4654      	mov	r4, sl
 8012a06:	2205      	movs	r2, #5
 8012a08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a0c:	484e      	ldr	r0, [pc, #312]	@ (8012b48 <_svfiprintf_r+0x1e4>)
 8012a0e:	f7f5 fb17 	bl	8008040 <memchr>
 8012a12:	9a04      	ldr	r2, [sp, #16]
 8012a14:	b9d8      	cbnz	r0, 8012a4e <_svfiprintf_r+0xea>
 8012a16:	06d0      	lsls	r0, r2, #27
 8012a18:	bf44      	itt	mi
 8012a1a:	2320      	movmi	r3, #32
 8012a1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012a20:	0711      	lsls	r1, r2, #28
 8012a22:	bf44      	itt	mi
 8012a24:	232b      	movmi	r3, #43	@ 0x2b
 8012a26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012a2a:	f89a 3000 	ldrb.w	r3, [sl]
 8012a2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8012a30:	d015      	beq.n	8012a5e <_svfiprintf_r+0xfa>
 8012a32:	9a07      	ldr	r2, [sp, #28]
 8012a34:	4654      	mov	r4, sl
 8012a36:	2000      	movs	r0, #0
 8012a38:	f04f 0c0a 	mov.w	ip, #10
 8012a3c:	4621      	mov	r1, r4
 8012a3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012a42:	3b30      	subs	r3, #48	@ 0x30
 8012a44:	2b09      	cmp	r3, #9
 8012a46:	d94b      	bls.n	8012ae0 <_svfiprintf_r+0x17c>
 8012a48:	b1b0      	cbz	r0, 8012a78 <_svfiprintf_r+0x114>
 8012a4a:	9207      	str	r2, [sp, #28]
 8012a4c:	e014      	b.n	8012a78 <_svfiprintf_r+0x114>
 8012a4e:	eba0 0308 	sub.w	r3, r0, r8
 8012a52:	fa09 f303 	lsl.w	r3, r9, r3
 8012a56:	4313      	orrs	r3, r2
 8012a58:	9304      	str	r3, [sp, #16]
 8012a5a:	46a2      	mov	sl, r4
 8012a5c:	e7d2      	b.n	8012a04 <_svfiprintf_r+0xa0>
 8012a5e:	9b03      	ldr	r3, [sp, #12]
 8012a60:	1d19      	adds	r1, r3, #4
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	9103      	str	r1, [sp, #12]
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	bfbb      	ittet	lt
 8012a6a:	425b      	neglt	r3, r3
 8012a6c:	f042 0202 	orrlt.w	r2, r2, #2
 8012a70:	9307      	strge	r3, [sp, #28]
 8012a72:	9307      	strlt	r3, [sp, #28]
 8012a74:	bfb8      	it	lt
 8012a76:	9204      	strlt	r2, [sp, #16]
 8012a78:	7823      	ldrb	r3, [r4, #0]
 8012a7a:	2b2e      	cmp	r3, #46	@ 0x2e
 8012a7c:	d10a      	bne.n	8012a94 <_svfiprintf_r+0x130>
 8012a7e:	7863      	ldrb	r3, [r4, #1]
 8012a80:	2b2a      	cmp	r3, #42	@ 0x2a
 8012a82:	d132      	bne.n	8012aea <_svfiprintf_r+0x186>
 8012a84:	9b03      	ldr	r3, [sp, #12]
 8012a86:	1d1a      	adds	r2, r3, #4
 8012a88:	681b      	ldr	r3, [r3, #0]
 8012a8a:	9203      	str	r2, [sp, #12]
 8012a8c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012a90:	3402      	adds	r4, #2
 8012a92:	9305      	str	r3, [sp, #20]
 8012a94:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012b58 <_svfiprintf_r+0x1f4>
 8012a98:	7821      	ldrb	r1, [r4, #0]
 8012a9a:	2203      	movs	r2, #3
 8012a9c:	4650      	mov	r0, sl
 8012a9e:	f7f5 facf 	bl	8008040 <memchr>
 8012aa2:	b138      	cbz	r0, 8012ab4 <_svfiprintf_r+0x150>
 8012aa4:	9b04      	ldr	r3, [sp, #16]
 8012aa6:	eba0 000a 	sub.w	r0, r0, sl
 8012aaa:	2240      	movs	r2, #64	@ 0x40
 8012aac:	4082      	lsls	r2, r0
 8012aae:	4313      	orrs	r3, r2
 8012ab0:	3401      	adds	r4, #1
 8012ab2:	9304      	str	r3, [sp, #16]
 8012ab4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ab8:	4824      	ldr	r0, [pc, #144]	@ (8012b4c <_svfiprintf_r+0x1e8>)
 8012aba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012abe:	2206      	movs	r2, #6
 8012ac0:	f7f5 fabe 	bl	8008040 <memchr>
 8012ac4:	2800      	cmp	r0, #0
 8012ac6:	d036      	beq.n	8012b36 <_svfiprintf_r+0x1d2>
 8012ac8:	4b21      	ldr	r3, [pc, #132]	@ (8012b50 <_svfiprintf_r+0x1ec>)
 8012aca:	bb1b      	cbnz	r3, 8012b14 <_svfiprintf_r+0x1b0>
 8012acc:	9b03      	ldr	r3, [sp, #12]
 8012ace:	3307      	adds	r3, #7
 8012ad0:	f023 0307 	bic.w	r3, r3, #7
 8012ad4:	3308      	adds	r3, #8
 8012ad6:	9303      	str	r3, [sp, #12]
 8012ad8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ada:	4433      	add	r3, r6
 8012adc:	9309      	str	r3, [sp, #36]	@ 0x24
 8012ade:	e76a      	b.n	80129b6 <_svfiprintf_r+0x52>
 8012ae0:	fb0c 3202 	mla	r2, ip, r2, r3
 8012ae4:	460c      	mov	r4, r1
 8012ae6:	2001      	movs	r0, #1
 8012ae8:	e7a8      	b.n	8012a3c <_svfiprintf_r+0xd8>
 8012aea:	2300      	movs	r3, #0
 8012aec:	3401      	adds	r4, #1
 8012aee:	9305      	str	r3, [sp, #20]
 8012af0:	4619      	mov	r1, r3
 8012af2:	f04f 0c0a 	mov.w	ip, #10
 8012af6:	4620      	mov	r0, r4
 8012af8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012afc:	3a30      	subs	r2, #48	@ 0x30
 8012afe:	2a09      	cmp	r2, #9
 8012b00:	d903      	bls.n	8012b0a <_svfiprintf_r+0x1a6>
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d0c6      	beq.n	8012a94 <_svfiprintf_r+0x130>
 8012b06:	9105      	str	r1, [sp, #20]
 8012b08:	e7c4      	b.n	8012a94 <_svfiprintf_r+0x130>
 8012b0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8012b0e:	4604      	mov	r4, r0
 8012b10:	2301      	movs	r3, #1
 8012b12:	e7f0      	b.n	8012af6 <_svfiprintf_r+0x192>
 8012b14:	ab03      	add	r3, sp, #12
 8012b16:	9300      	str	r3, [sp, #0]
 8012b18:	462a      	mov	r2, r5
 8012b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8012b54 <_svfiprintf_r+0x1f0>)
 8012b1c:	a904      	add	r1, sp, #16
 8012b1e:	4638      	mov	r0, r7
 8012b20:	f7fd fe5a 	bl	80107d8 <_printf_float>
 8012b24:	1c42      	adds	r2, r0, #1
 8012b26:	4606      	mov	r6, r0
 8012b28:	d1d6      	bne.n	8012ad8 <_svfiprintf_r+0x174>
 8012b2a:	89ab      	ldrh	r3, [r5, #12]
 8012b2c:	065b      	lsls	r3, r3, #25
 8012b2e:	f53f af2d 	bmi.w	801298c <_svfiprintf_r+0x28>
 8012b32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012b34:	e72c      	b.n	8012990 <_svfiprintf_r+0x2c>
 8012b36:	ab03      	add	r3, sp, #12
 8012b38:	9300      	str	r3, [sp, #0]
 8012b3a:	462a      	mov	r2, r5
 8012b3c:	4b05      	ldr	r3, [pc, #20]	@ (8012b54 <_svfiprintf_r+0x1f0>)
 8012b3e:	a904      	add	r1, sp, #16
 8012b40:	4638      	mov	r0, r7
 8012b42:	f7fe f8e1 	bl	8010d08 <_printf_i>
 8012b46:	e7ed      	b.n	8012b24 <_svfiprintf_r+0x1c0>
 8012b48:	08013ab0 	.word	0x08013ab0
 8012b4c:	08013aba 	.word	0x08013aba
 8012b50:	080107d9 	.word	0x080107d9
 8012b54:	080128ad 	.word	0x080128ad
 8012b58:	08013ab6 	.word	0x08013ab6

08012b5c <__sflush_r>:
 8012b5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b64:	0716      	lsls	r6, r2, #28
 8012b66:	4605      	mov	r5, r0
 8012b68:	460c      	mov	r4, r1
 8012b6a:	d454      	bmi.n	8012c16 <__sflush_r+0xba>
 8012b6c:	684b      	ldr	r3, [r1, #4]
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	dc02      	bgt.n	8012b78 <__sflush_r+0x1c>
 8012b72:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	dd48      	ble.n	8012c0a <__sflush_r+0xae>
 8012b78:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012b7a:	2e00      	cmp	r6, #0
 8012b7c:	d045      	beq.n	8012c0a <__sflush_r+0xae>
 8012b7e:	2300      	movs	r3, #0
 8012b80:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012b84:	682f      	ldr	r7, [r5, #0]
 8012b86:	6a21      	ldr	r1, [r4, #32]
 8012b88:	602b      	str	r3, [r5, #0]
 8012b8a:	d030      	beq.n	8012bee <__sflush_r+0x92>
 8012b8c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012b8e:	89a3      	ldrh	r3, [r4, #12]
 8012b90:	0759      	lsls	r1, r3, #29
 8012b92:	d505      	bpl.n	8012ba0 <__sflush_r+0x44>
 8012b94:	6863      	ldr	r3, [r4, #4]
 8012b96:	1ad2      	subs	r2, r2, r3
 8012b98:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012b9a:	b10b      	cbz	r3, 8012ba0 <__sflush_r+0x44>
 8012b9c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012b9e:	1ad2      	subs	r2, r2, r3
 8012ba0:	2300      	movs	r3, #0
 8012ba2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012ba4:	6a21      	ldr	r1, [r4, #32]
 8012ba6:	4628      	mov	r0, r5
 8012ba8:	47b0      	blx	r6
 8012baa:	1c43      	adds	r3, r0, #1
 8012bac:	89a3      	ldrh	r3, [r4, #12]
 8012bae:	d106      	bne.n	8012bbe <__sflush_r+0x62>
 8012bb0:	6829      	ldr	r1, [r5, #0]
 8012bb2:	291d      	cmp	r1, #29
 8012bb4:	d82b      	bhi.n	8012c0e <__sflush_r+0xb2>
 8012bb6:	4a2a      	ldr	r2, [pc, #168]	@ (8012c60 <__sflush_r+0x104>)
 8012bb8:	410a      	asrs	r2, r1
 8012bba:	07d6      	lsls	r6, r2, #31
 8012bbc:	d427      	bmi.n	8012c0e <__sflush_r+0xb2>
 8012bbe:	2200      	movs	r2, #0
 8012bc0:	6062      	str	r2, [r4, #4]
 8012bc2:	04d9      	lsls	r1, r3, #19
 8012bc4:	6922      	ldr	r2, [r4, #16]
 8012bc6:	6022      	str	r2, [r4, #0]
 8012bc8:	d504      	bpl.n	8012bd4 <__sflush_r+0x78>
 8012bca:	1c42      	adds	r2, r0, #1
 8012bcc:	d101      	bne.n	8012bd2 <__sflush_r+0x76>
 8012bce:	682b      	ldr	r3, [r5, #0]
 8012bd0:	b903      	cbnz	r3, 8012bd4 <__sflush_r+0x78>
 8012bd2:	6560      	str	r0, [r4, #84]	@ 0x54
 8012bd4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012bd6:	602f      	str	r7, [r5, #0]
 8012bd8:	b1b9      	cbz	r1, 8012c0a <__sflush_r+0xae>
 8012bda:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012bde:	4299      	cmp	r1, r3
 8012be0:	d002      	beq.n	8012be8 <__sflush_r+0x8c>
 8012be2:	4628      	mov	r0, r5
 8012be4:	f7ff f9e0 	bl	8011fa8 <_free_r>
 8012be8:	2300      	movs	r3, #0
 8012bea:	6363      	str	r3, [r4, #52]	@ 0x34
 8012bec:	e00d      	b.n	8012c0a <__sflush_r+0xae>
 8012bee:	2301      	movs	r3, #1
 8012bf0:	4628      	mov	r0, r5
 8012bf2:	47b0      	blx	r6
 8012bf4:	4602      	mov	r2, r0
 8012bf6:	1c50      	adds	r0, r2, #1
 8012bf8:	d1c9      	bne.n	8012b8e <__sflush_r+0x32>
 8012bfa:	682b      	ldr	r3, [r5, #0]
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d0c6      	beq.n	8012b8e <__sflush_r+0x32>
 8012c00:	2b1d      	cmp	r3, #29
 8012c02:	d001      	beq.n	8012c08 <__sflush_r+0xac>
 8012c04:	2b16      	cmp	r3, #22
 8012c06:	d11e      	bne.n	8012c46 <__sflush_r+0xea>
 8012c08:	602f      	str	r7, [r5, #0]
 8012c0a:	2000      	movs	r0, #0
 8012c0c:	e022      	b.n	8012c54 <__sflush_r+0xf8>
 8012c0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012c12:	b21b      	sxth	r3, r3
 8012c14:	e01b      	b.n	8012c4e <__sflush_r+0xf2>
 8012c16:	690f      	ldr	r7, [r1, #16]
 8012c18:	2f00      	cmp	r7, #0
 8012c1a:	d0f6      	beq.n	8012c0a <__sflush_r+0xae>
 8012c1c:	0793      	lsls	r3, r2, #30
 8012c1e:	680e      	ldr	r6, [r1, #0]
 8012c20:	bf08      	it	eq
 8012c22:	694b      	ldreq	r3, [r1, #20]
 8012c24:	600f      	str	r7, [r1, #0]
 8012c26:	bf18      	it	ne
 8012c28:	2300      	movne	r3, #0
 8012c2a:	eba6 0807 	sub.w	r8, r6, r7
 8012c2e:	608b      	str	r3, [r1, #8]
 8012c30:	f1b8 0f00 	cmp.w	r8, #0
 8012c34:	dde9      	ble.n	8012c0a <__sflush_r+0xae>
 8012c36:	6a21      	ldr	r1, [r4, #32]
 8012c38:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012c3a:	4643      	mov	r3, r8
 8012c3c:	463a      	mov	r2, r7
 8012c3e:	4628      	mov	r0, r5
 8012c40:	47b0      	blx	r6
 8012c42:	2800      	cmp	r0, #0
 8012c44:	dc08      	bgt.n	8012c58 <__sflush_r+0xfc>
 8012c46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012c4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012c4e:	81a3      	strh	r3, [r4, #12]
 8012c50:	f04f 30ff 	mov.w	r0, #4294967295
 8012c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c58:	4407      	add	r7, r0
 8012c5a:	eba8 0800 	sub.w	r8, r8, r0
 8012c5e:	e7e7      	b.n	8012c30 <__sflush_r+0xd4>
 8012c60:	dfbffffe 	.word	0xdfbffffe

08012c64 <_fflush_r>:
 8012c64:	b538      	push	{r3, r4, r5, lr}
 8012c66:	690b      	ldr	r3, [r1, #16]
 8012c68:	4605      	mov	r5, r0
 8012c6a:	460c      	mov	r4, r1
 8012c6c:	b913      	cbnz	r3, 8012c74 <_fflush_r+0x10>
 8012c6e:	2500      	movs	r5, #0
 8012c70:	4628      	mov	r0, r5
 8012c72:	bd38      	pop	{r3, r4, r5, pc}
 8012c74:	b118      	cbz	r0, 8012c7e <_fflush_r+0x1a>
 8012c76:	6a03      	ldr	r3, [r0, #32]
 8012c78:	b90b      	cbnz	r3, 8012c7e <_fflush_r+0x1a>
 8012c7a:	f7fe f9f1 	bl	8011060 <__sinit>
 8012c7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d0f3      	beq.n	8012c6e <_fflush_r+0xa>
 8012c86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012c88:	07d0      	lsls	r0, r2, #31
 8012c8a:	d404      	bmi.n	8012c96 <_fflush_r+0x32>
 8012c8c:	0599      	lsls	r1, r3, #22
 8012c8e:	d402      	bmi.n	8012c96 <_fflush_r+0x32>
 8012c90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012c92:	f7fe fb2c 	bl	80112ee <__retarget_lock_acquire_recursive>
 8012c96:	4628      	mov	r0, r5
 8012c98:	4621      	mov	r1, r4
 8012c9a:	f7ff ff5f 	bl	8012b5c <__sflush_r>
 8012c9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012ca0:	07da      	lsls	r2, r3, #31
 8012ca2:	4605      	mov	r5, r0
 8012ca4:	d4e4      	bmi.n	8012c70 <_fflush_r+0xc>
 8012ca6:	89a3      	ldrh	r3, [r4, #12]
 8012ca8:	059b      	lsls	r3, r3, #22
 8012caa:	d4e1      	bmi.n	8012c70 <_fflush_r+0xc>
 8012cac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012cae:	f7fe fb1f 	bl	80112f0 <__retarget_lock_release_recursive>
 8012cb2:	e7dd      	b.n	8012c70 <_fflush_r+0xc>

08012cb4 <memmove>:
 8012cb4:	4288      	cmp	r0, r1
 8012cb6:	b510      	push	{r4, lr}
 8012cb8:	eb01 0402 	add.w	r4, r1, r2
 8012cbc:	d902      	bls.n	8012cc4 <memmove+0x10>
 8012cbe:	4284      	cmp	r4, r0
 8012cc0:	4623      	mov	r3, r4
 8012cc2:	d807      	bhi.n	8012cd4 <memmove+0x20>
 8012cc4:	1e43      	subs	r3, r0, #1
 8012cc6:	42a1      	cmp	r1, r4
 8012cc8:	d008      	beq.n	8012cdc <memmove+0x28>
 8012cca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012cce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012cd2:	e7f8      	b.n	8012cc6 <memmove+0x12>
 8012cd4:	4402      	add	r2, r0
 8012cd6:	4601      	mov	r1, r0
 8012cd8:	428a      	cmp	r2, r1
 8012cda:	d100      	bne.n	8012cde <memmove+0x2a>
 8012cdc:	bd10      	pop	{r4, pc}
 8012cde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012ce2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012ce6:	e7f7      	b.n	8012cd8 <memmove+0x24>

08012ce8 <_sbrk_r>:
 8012ce8:	b538      	push	{r3, r4, r5, lr}
 8012cea:	4d06      	ldr	r5, [pc, #24]	@ (8012d04 <_sbrk_r+0x1c>)
 8012cec:	2300      	movs	r3, #0
 8012cee:	4604      	mov	r4, r0
 8012cf0:	4608      	mov	r0, r1
 8012cf2:	602b      	str	r3, [r5, #0]
 8012cf4:	f7f8 fb2a 	bl	800b34c <_sbrk>
 8012cf8:	1c43      	adds	r3, r0, #1
 8012cfa:	d102      	bne.n	8012d02 <_sbrk_r+0x1a>
 8012cfc:	682b      	ldr	r3, [r5, #0]
 8012cfe:	b103      	cbz	r3, 8012d02 <_sbrk_r+0x1a>
 8012d00:	6023      	str	r3, [r4, #0]
 8012d02:	bd38      	pop	{r3, r4, r5, pc}
 8012d04:	20000dd0 	.word	0x20000dd0

08012d08 <__assert_func>:
 8012d08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012d0a:	4614      	mov	r4, r2
 8012d0c:	461a      	mov	r2, r3
 8012d0e:	4b09      	ldr	r3, [pc, #36]	@ (8012d34 <__assert_func+0x2c>)
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	4605      	mov	r5, r0
 8012d14:	68d8      	ldr	r0, [r3, #12]
 8012d16:	b954      	cbnz	r4, 8012d2e <__assert_func+0x26>
 8012d18:	4b07      	ldr	r3, [pc, #28]	@ (8012d38 <__assert_func+0x30>)
 8012d1a:	461c      	mov	r4, r3
 8012d1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012d20:	9100      	str	r1, [sp, #0]
 8012d22:	462b      	mov	r3, r5
 8012d24:	4905      	ldr	r1, [pc, #20]	@ (8012d3c <__assert_func+0x34>)
 8012d26:	f000 f86f 	bl	8012e08 <fiprintf>
 8012d2a:	f000 f87f 	bl	8012e2c <abort>
 8012d2e:	4b04      	ldr	r3, [pc, #16]	@ (8012d40 <__assert_func+0x38>)
 8012d30:	e7f4      	b.n	8012d1c <__assert_func+0x14>
 8012d32:	bf00      	nop
 8012d34:	20000240 	.word	0x20000240
 8012d38:	08013b06 	.word	0x08013b06
 8012d3c:	08013ad8 	.word	0x08013ad8
 8012d40:	08013acb 	.word	0x08013acb

08012d44 <_calloc_r>:
 8012d44:	b570      	push	{r4, r5, r6, lr}
 8012d46:	fba1 5402 	umull	r5, r4, r1, r2
 8012d4a:	b93c      	cbnz	r4, 8012d5c <_calloc_r+0x18>
 8012d4c:	4629      	mov	r1, r5
 8012d4e:	f7ff f99f 	bl	8012090 <_malloc_r>
 8012d52:	4606      	mov	r6, r0
 8012d54:	b928      	cbnz	r0, 8012d62 <_calloc_r+0x1e>
 8012d56:	2600      	movs	r6, #0
 8012d58:	4630      	mov	r0, r6
 8012d5a:	bd70      	pop	{r4, r5, r6, pc}
 8012d5c:	220c      	movs	r2, #12
 8012d5e:	6002      	str	r2, [r0, #0]
 8012d60:	e7f9      	b.n	8012d56 <_calloc_r+0x12>
 8012d62:	462a      	mov	r2, r5
 8012d64:	4621      	mov	r1, r4
 8012d66:	f7fe fa35 	bl	80111d4 <memset>
 8012d6a:	e7f5      	b.n	8012d58 <_calloc_r+0x14>

08012d6c <__ascii_mbtowc>:
 8012d6c:	b082      	sub	sp, #8
 8012d6e:	b901      	cbnz	r1, 8012d72 <__ascii_mbtowc+0x6>
 8012d70:	a901      	add	r1, sp, #4
 8012d72:	b142      	cbz	r2, 8012d86 <__ascii_mbtowc+0x1a>
 8012d74:	b14b      	cbz	r3, 8012d8a <__ascii_mbtowc+0x1e>
 8012d76:	7813      	ldrb	r3, [r2, #0]
 8012d78:	600b      	str	r3, [r1, #0]
 8012d7a:	7812      	ldrb	r2, [r2, #0]
 8012d7c:	1e10      	subs	r0, r2, #0
 8012d7e:	bf18      	it	ne
 8012d80:	2001      	movne	r0, #1
 8012d82:	b002      	add	sp, #8
 8012d84:	4770      	bx	lr
 8012d86:	4610      	mov	r0, r2
 8012d88:	e7fb      	b.n	8012d82 <__ascii_mbtowc+0x16>
 8012d8a:	f06f 0001 	mvn.w	r0, #1
 8012d8e:	e7f8      	b.n	8012d82 <__ascii_mbtowc+0x16>

08012d90 <_realloc_r>:
 8012d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d94:	4680      	mov	r8, r0
 8012d96:	4615      	mov	r5, r2
 8012d98:	460c      	mov	r4, r1
 8012d9a:	b921      	cbnz	r1, 8012da6 <_realloc_r+0x16>
 8012d9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012da0:	4611      	mov	r1, r2
 8012da2:	f7ff b975 	b.w	8012090 <_malloc_r>
 8012da6:	b92a      	cbnz	r2, 8012db4 <_realloc_r+0x24>
 8012da8:	f7ff f8fe 	bl	8011fa8 <_free_r>
 8012dac:	2400      	movs	r4, #0
 8012dae:	4620      	mov	r0, r4
 8012db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012db4:	f000 f841 	bl	8012e3a <_malloc_usable_size_r>
 8012db8:	4285      	cmp	r5, r0
 8012dba:	4606      	mov	r6, r0
 8012dbc:	d802      	bhi.n	8012dc4 <_realloc_r+0x34>
 8012dbe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012dc2:	d8f4      	bhi.n	8012dae <_realloc_r+0x1e>
 8012dc4:	4629      	mov	r1, r5
 8012dc6:	4640      	mov	r0, r8
 8012dc8:	f7ff f962 	bl	8012090 <_malloc_r>
 8012dcc:	4607      	mov	r7, r0
 8012dce:	2800      	cmp	r0, #0
 8012dd0:	d0ec      	beq.n	8012dac <_realloc_r+0x1c>
 8012dd2:	42b5      	cmp	r5, r6
 8012dd4:	462a      	mov	r2, r5
 8012dd6:	4621      	mov	r1, r4
 8012dd8:	bf28      	it	cs
 8012dda:	4632      	movcs	r2, r6
 8012ddc:	f7fe fa89 	bl	80112f2 <memcpy>
 8012de0:	4621      	mov	r1, r4
 8012de2:	4640      	mov	r0, r8
 8012de4:	f7ff f8e0 	bl	8011fa8 <_free_r>
 8012de8:	463c      	mov	r4, r7
 8012dea:	e7e0      	b.n	8012dae <_realloc_r+0x1e>

08012dec <__ascii_wctomb>:
 8012dec:	4603      	mov	r3, r0
 8012dee:	4608      	mov	r0, r1
 8012df0:	b141      	cbz	r1, 8012e04 <__ascii_wctomb+0x18>
 8012df2:	2aff      	cmp	r2, #255	@ 0xff
 8012df4:	d904      	bls.n	8012e00 <__ascii_wctomb+0x14>
 8012df6:	228a      	movs	r2, #138	@ 0x8a
 8012df8:	601a      	str	r2, [r3, #0]
 8012dfa:	f04f 30ff 	mov.w	r0, #4294967295
 8012dfe:	4770      	bx	lr
 8012e00:	700a      	strb	r2, [r1, #0]
 8012e02:	2001      	movs	r0, #1
 8012e04:	4770      	bx	lr
	...

08012e08 <fiprintf>:
 8012e08:	b40e      	push	{r1, r2, r3}
 8012e0a:	b503      	push	{r0, r1, lr}
 8012e0c:	4601      	mov	r1, r0
 8012e0e:	ab03      	add	r3, sp, #12
 8012e10:	4805      	ldr	r0, [pc, #20]	@ (8012e28 <fiprintf+0x20>)
 8012e12:	f853 2b04 	ldr.w	r2, [r3], #4
 8012e16:	6800      	ldr	r0, [r0, #0]
 8012e18:	9301      	str	r3, [sp, #4]
 8012e1a:	f000 f83f 	bl	8012e9c <_vfiprintf_r>
 8012e1e:	b002      	add	sp, #8
 8012e20:	f85d eb04 	ldr.w	lr, [sp], #4
 8012e24:	b003      	add	sp, #12
 8012e26:	4770      	bx	lr
 8012e28:	20000240 	.word	0x20000240

08012e2c <abort>:
 8012e2c:	b508      	push	{r3, lr}
 8012e2e:	2006      	movs	r0, #6
 8012e30:	f000 fa08 	bl	8013244 <raise>
 8012e34:	2001      	movs	r0, #1
 8012e36:	f7f8 fa11 	bl	800b25c <_exit>

08012e3a <_malloc_usable_size_r>:
 8012e3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012e3e:	1f18      	subs	r0, r3, #4
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	bfbc      	itt	lt
 8012e44:	580b      	ldrlt	r3, [r1, r0]
 8012e46:	18c0      	addlt	r0, r0, r3
 8012e48:	4770      	bx	lr

08012e4a <__sfputc_r>:
 8012e4a:	6893      	ldr	r3, [r2, #8]
 8012e4c:	3b01      	subs	r3, #1
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	b410      	push	{r4}
 8012e52:	6093      	str	r3, [r2, #8]
 8012e54:	da08      	bge.n	8012e68 <__sfputc_r+0x1e>
 8012e56:	6994      	ldr	r4, [r2, #24]
 8012e58:	42a3      	cmp	r3, r4
 8012e5a:	db01      	blt.n	8012e60 <__sfputc_r+0x16>
 8012e5c:	290a      	cmp	r1, #10
 8012e5e:	d103      	bne.n	8012e68 <__sfputc_r+0x1e>
 8012e60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012e64:	f000 b932 	b.w	80130cc <__swbuf_r>
 8012e68:	6813      	ldr	r3, [r2, #0]
 8012e6a:	1c58      	adds	r0, r3, #1
 8012e6c:	6010      	str	r0, [r2, #0]
 8012e6e:	7019      	strb	r1, [r3, #0]
 8012e70:	4608      	mov	r0, r1
 8012e72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012e76:	4770      	bx	lr

08012e78 <__sfputs_r>:
 8012e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e7a:	4606      	mov	r6, r0
 8012e7c:	460f      	mov	r7, r1
 8012e7e:	4614      	mov	r4, r2
 8012e80:	18d5      	adds	r5, r2, r3
 8012e82:	42ac      	cmp	r4, r5
 8012e84:	d101      	bne.n	8012e8a <__sfputs_r+0x12>
 8012e86:	2000      	movs	r0, #0
 8012e88:	e007      	b.n	8012e9a <__sfputs_r+0x22>
 8012e8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e8e:	463a      	mov	r2, r7
 8012e90:	4630      	mov	r0, r6
 8012e92:	f7ff ffda 	bl	8012e4a <__sfputc_r>
 8012e96:	1c43      	adds	r3, r0, #1
 8012e98:	d1f3      	bne.n	8012e82 <__sfputs_r+0xa>
 8012e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012e9c <_vfiprintf_r>:
 8012e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ea0:	460d      	mov	r5, r1
 8012ea2:	b09d      	sub	sp, #116	@ 0x74
 8012ea4:	4614      	mov	r4, r2
 8012ea6:	4698      	mov	r8, r3
 8012ea8:	4606      	mov	r6, r0
 8012eaa:	b118      	cbz	r0, 8012eb4 <_vfiprintf_r+0x18>
 8012eac:	6a03      	ldr	r3, [r0, #32]
 8012eae:	b90b      	cbnz	r3, 8012eb4 <_vfiprintf_r+0x18>
 8012eb0:	f7fe f8d6 	bl	8011060 <__sinit>
 8012eb4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012eb6:	07d9      	lsls	r1, r3, #31
 8012eb8:	d405      	bmi.n	8012ec6 <_vfiprintf_r+0x2a>
 8012eba:	89ab      	ldrh	r3, [r5, #12]
 8012ebc:	059a      	lsls	r2, r3, #22
 8012ebe:	d402      	bmi.n	8012ec6 <_vfiprintf_r+0x2a>
 8012ec0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012ec2:	f7fe fa14 	bl	80112ee <__retarget_lock_acquire_recursive>
 8012ec6:	89ab      	ldrh	r3, [r5, #12]
 8012ec8:	071b      	lsls	r3, r3, #28
 8012eca:	d501      	bpl.n	8012ed0 <_vfiprintf_r+0x34>
 8012ecc:	692b      	ldr	r3, [r5, #16]
 8012ece:	b99b      	cbnz	r3, 8012ef8 <_vfiprintf_r+0x5c>
 8012ed0:	4629      	mov	r1, r5
 8012ed2:	4630      	mov	r0, r6
 8012ed4:	f000 f938 	bl	8013148 <__swsetup_r>
 8012ed8:	b170      	cbz	r0, 8012ef8 <_vfiprintf_r+0x5c>
 8012eda:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012edc:	07dc      	lsls	r4, r3, #31
 8012ede:	d504      	bpl.n	8012eea <_vfiprintf_r+0x4e>
 8012ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8012ee4:	b01d      	add	sp, #116	@ 0x74
 8012ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012eea:	89ab      	ldrh	r3, [r5, #12]
 8012eec:	0598      	lsls	r0, r3, #22
 8012eee:	d4f7      	bmi.n	8012ee0 <_vfiprintf_r+0x44>
 8012ef0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012ef2:	f7fe f9fd 	bl	80112f0 <__retarget_lock_release_recursive>
 8012ef6:	e7f3      	b.n	8012ee0 <_vfiprintf_r+0x44>
 8012ef8:	2300      	movs	r3, #0
 8012efa:	9309      	str	r3, [sp, #36]	@ 0x24
 8012efc:	2320      	movs	r3, #32
 8012efe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012f02:	f8cd 800c 	str.w	r8, [sp, #12]
 8012f06:	2330      	movs	r3, #48	@ 0x30
 8012f08:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80130b8 <_vfiprintf_r+0x21c>
 8012f0c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012f10:	f04f 0901 	mov.w	r9, #1
 8012f14:	4623      	mov	r3, r4
 8012f16:	469a      	mov	sl, r3
 8012f18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012f1c:	b10a      	cbz	r2, 8012f22 <_vfiprintf_r+0x86>
 8012f1e:	2a25      	cmp	r2, #37	@ 0x25
 8012f20:	d1f9      	bne.n	8012f16 <_vfiprintf_r+0x7a>
 8012f22:	ebba 0b04 	subs.w	fp, sl, r4
 8012f26:	d00b      	beq.n	8012f40 <_vfiprintf_r+0xa4>
 8012f28:	465b      	mov	r3, fp
 8012f2a:	4622      	mov	r2, r4
 8012f2c:	4629      	mov	r1, r5
 8012f2e:	4630      	mov	r0, r6
 8012f30:	f7ff ffa2 	bl	8012e78 <__sfputs_r>
 8012f34:	3001      	adds	r0, #1
 8012f36:	f000 80a7 	beq.w	8013088 <_vfiprintf_r+0x1ec>
 8012f3a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012f3c:	445a      	add	r2, fp
 8012f3e:	9209      	str	r2, [sp, #36]	@ 0x24
 8012f40:	f89a 3000 	ldrb.w	r3, [sl]
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	f000 809f 	beq.w	8013088 <_vfiprintf_r+0x1ec>
 8012f4a:	2300      	movs	r3, #0
 8012f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8012f50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012f54:	f10a 0a01 	add.w	sl, sl, #1
 8012f58:	9304      	str	r3, [sp, #16]
 8012f5a:	9307      	str	r3, [sp, #28]
 8012f5c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012f60:	931a      	str	r3, [sp, #104]	@ 0x68
 8012f62:	4654      	mov	r4, sl
 8012f64:	2205      	movs	r2, #5
 8012f66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012f6a:	4853      	ldr	r0, [pc, #332]	@ (80130b8 <_vfiprintf_r+0x21c>)
 8012f6c:	f7f5 f868 	bl	8008040 <memchr>
 8012f70:	9a04      	ldr	r2, [sp, #16]
 8012f72:	b9d8      	cbnz	r0, 8012fac <_vfiprintf_r+0x110>
 8012f74:	06d1      	lsls	r1, r2, #27
 8012f76:	bf44      	itt	mi
 8012f78:	2320      	movmi	r3, #32
 8012f7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012f7e:	0713      	lsls	r3, r2, #28
 8012f80:	bf44      	itt	mi
 8012f82:	232b      	movmi	r3, #43	@ 0x2b
 8012f84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012f88:	f89a 3000 	ldrb.w	r3, [sl]
 8012f8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8012f8e:	d015      	beq.n	8012fbc <_vfiprintf_r+0x120>
 8012f90:	9a07      	ldr	r2, [sp, #28]
 8012f92:	4654      	mov	r4, sl
 8012f94:	2000      	movs	r0, #0
 8012f96:	f04f 0c0a 	mov.w	ip, #10
 8012f9a:	4621      	mov	r1, r4
 8012f9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012fa0:	3b30      	subs	r3, #48	@ 0x30
 8012fa2:	2b09      	cmp	r3, #9
 8012fa4:	d94b      	bls.n	801303e <_vfiprintf_r+0x1a2>
 8012fa6:	b1b0      	cbz	r0, 8012fd6 <_vfiprintf_r+0x13a>
 8012fa8:	9207      	str	r2, [sp, #28]
 8012faa:	e014      	b.n	8012fd6 <_vfiprintf_r+0x13a>
 8012fac:	eba0 0308 	sub.w	r3, r0, r8
 8012fb0:	fa09 f303 	lsl.w	r3, r9, r3
 8012fb4:	4313      	orrs	r3, r2
 8012fb6:	9304      	str	r3, [sp, #16]
 8012fb8:	46a2      	mov	sl, r4
 8012fba:	e7d2      	b.n	8012f62 <_vfiprintf_r+0xc6>
 8012fbc:	9b03      	ldr	r3, [sp, #12]
 8012fbe:	1d19      	adds	r1, r3, #4
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	9103      	str	r1, [sp, #12]
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	bfbb      	ittet	lt
 8012fc8:	425b      	neglt	r3, r3
 8012fca:	f042 0202 	orrlt.w	r2, r2, #2
 8012fce:	9307      	strge	r3, [sp, #28]
 8012fd0:	9307      	strlt	r3, [sp, #28]
 8012fd2:	bfb8      	it	lt
 8012fd4:	9204      	strlt	r2, [sp, #16]
 8012fd6:	7823      	ldrb	r3, [r4, #0]
 8012fd8:	2b2e      	cmp	r3, #46	@ 0x2e
 8012fda:	d10a      	bne.n	8012ff2 <_vfiprintf_r+0x156>
 8012fdc:	7863      	ldrb	r3, [r4, #1]
 8012fde:	2b2a      	cmp	r3, #42	@ 0x2a
 8012fe0:	d132      	bne.n	8013048 <_vfiprintf_r+0x1ac>
 8012fe2:	9b03      	ldr	r3, [sp, #12]
 8012fe4:	1d1a      	adds	r2, r3, #4
 8012fe6:	681b      	ldr	r3, [r3, #0]
 8012fe8:	9203      	str	r2, [sp, #12]
 8012fea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012fee:	3402      	adds	r4, #2
 8012ff0:	9305      	str	r3, [sp, #20]
 8012ff2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80130c8 <_vfiprintf_r+0x22c>
 8012ff6:	7821      	ldrb	r1, [r4, #0]
 8012ff8:	2203      	movs	r2, #3
 8012ffa:	4650      	mov	r0, sl
 8012ffc:	f7f5 f820 	bl	8008040 <memchr>
 8013000:	b138      	cbz	r0, 8013012 <_vfiprintf_r+0x176>
 8013002:	9b04      	ldr	r3, [sp, #16]
 8013004:	eba0 000a 	sub.w	r0, r0, sl
 8013008:	2240      	movs	r2, #64	@ 0x40
 801300a:	4082      	lsls	r2, r0
 801300c:	4313      	orrs	r3, r2
 801300e:	3401      	adds	r4, #1
 8013010:	9304      	str	r3, [sp, #16]
 8013012:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013016:	4829      	ldr	r0, [pc, #164]	@ (80130bc <_vfiprintf_r+0x220>)
 8013018:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801301c:	2206      	movs	r2, #6
 801301e:	f7f5 f80f 	bl	8008040 <memchr>
 8013022:	2800      	cmp	r0, #0
 8013024:	d03f      	beq.n	80130a6 <_vfiprintf_r+0x20a>
 8013026:	4b26      	ldr	r3, [pc, #152]	@ (80130c0 <_vfiprintf_r+0x224>)
 8013028:	bb1b      	cbnz	r3, 8013072 <_vfiprintf_r+0x1d6>
 801302a:	9b03      	ldr	r3, [sp, #12]
 801302c:	3307      	adds	r3, #7
 801302e:	f023 0307 	bic.w	r3, r3, #7
 8013032:	3308      	adds	r3, #8
 8013034:	9303      	str	r3, [sp, #12]
 8013036:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013038:	443b      	add	r3, r7
 801303a:	9309      	str	r3, [sp, #36]	@ 0x24
 801303c:	e76a      	b.n	8012f14 <_vfiprintf_r+0x78>
 801303e:	fb0c 3202 	mla	r2, ip, r2, r3
 8013042:	460c      	mov	r4, r1
 8013044:	2001      	movs	r0, #1
 8013046:	e7a8      	b.n	8012f9a <_vfiprintf_r+0xfe>
 8013048:	2300      	movs	r3, #0
 801304a:	3401      	adds	r4, #1
 801304c:	9305      	str	r3, [sp, #20]
 801304e:	4619      	mov	r1, r3
 8013050:	f04f 0c0a 	mov.w	ip, #10
 8013054:	4620      	mov	r0, r4
 8013056:	f810 2b01 	ldrb.w	r2, [r0], #1
 801305a:	3a30      	subs	r2, #48	@ 0x30
 801305c:	2a09      	cmp	r2, #9
 801305e:	d903      	bls.n	8013068 <_vfiprintf_r+0x1cc>
 8013060:	2b00      	cmp	r3, #0
 8013062:	d0c6      	beq.n	8012ff2 <_vfiprintf_r+0x156>
 8013064:	9105      	str	r1, [sp, #20]
 8013066:	e7c4      	b.n	8012ff2 <_vfiprintf_r+0x156>
 8013068:	fb0c 2101 	mla	r1, ip, r1, r2
 801306c:	4604      	mov	r4, r0
 801306e:	2301      	movs	r3, #1
 8013070:	e7f0      	b.n	8013054 <_vfiprintf_r+0x1b8>
 8013072:	ab03      	add	r3, sp, #12
 8013074:	9300      	str	r3, [sp, #0]
 8013076:	462a      	mov	r2, r5
 8013078:	4b12      	ldr	r3, [pc, #72]	@ (80130c4 <_vfiprintf_r+0x228>)
 801307a:	a904      	add	r1, sp, #16
 801307c:	4630      	mov	r0, r6
 801307e:	f7fd fbab 	bl	80107d8 <_printf_float>
 8013082:	4607      	mov	r7, r0
 8013084:	1c78      	adds	r0, r7, #1
 8013086:	d1d6      	bne.n	8013036 <_vfiprintf_r+0x19a>
 8013088:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801308a:	07d9      	lsls	r1, r3, #31
 801308c:	d405      	bmi.n	801309a <_vfiprintf_r+0x1fe>
 801308e:	89ab      	ldrh	r3, [r5, #12]
 8013090:	059a      	lsls	r2, r3, #22
 8013092:	d402      	bmi.n	801309a <_vfiprintf_r+0x1fe>
 8013094:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013096:	f7fe f92b 	bl	80112f0 <__retarget_lock_release_recursive>
 801309a:	89ab      	ldrh	r3, [r5, #12]
 801309c:	065b      	lsls	r3, r3, #25
 801309e:	f53f af1f 	bmi.w	8012ee0 <_vfiprintf_r+0x44>
 80130a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80130a4:	e71e      	b.n	8012ee4 <_vfiprintf_r+0x48>
 80130a6:	ab03      	add	r3, sp, #12
 80130a8:	9300      	str	r3, [sp, #0]
 80130aa:	462a      	mov	r2, r5
 80130ac:	4b05      	ldr	r3, [pc, #20]	@ (80130c4 <_vfiprintf_r+0x228>)
 80130ae:	a904      	add	r1, sp, #16
 80130b0:	4630      	mov	r0, r6
 80130b2:	f7fd fe29 	bl	8010d08 <_printf_i>
 80130b6:	e7e4      	b.n	8013082 <_vfiprintf_r+0x1e6>
 80130b8:	08013ab0 	.word	0x08013ab0
 80130bc:	08013aba 	.word	0x08013aba
 80130c0:	080107d9 	.word	0x080107d9
 80130c4:	08012e79 	.word	0x08012e79
 80130c8:	08013ab6 	.word	0x08013ab6

080130cc <__swbuf_r>:
 80130cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130ce:	460e      	mov	r6, r1
 80130d0:	4614      	mov	r4, r2
 80130d2:	4605      	mov	r5, r0
 80130d4:	b118      	cbz	r0, 80130de <__swbuf_r+0x12>
 80130d6:	6a03      	ldr	r3, [r0, #32]
 80130d8:	b90b      	cbnz	r3, 80130de <__swbuf_r+0x12>
 80130da:	f7fd ffc1 	bl	8011060 <__sinit>
 80130de:	69a3      	ldr	r3, [r4, #24]
 80130e0:	60a3      	str	r3, [r4, #8]
 80130e2:	89a3      	ldrh	r3, [r4, #12]
 80130e4:	071a      	lsls	r2, r3, #28
 80130e6:	d501      	bpl.n	80130ec <__swbuf_r+0x20>
 80130e8:	6923      	ldr	r3, [r4, #16]
 80130ea:	b943      	cbnz	r3, 80130fe <__swbuf_r+0x32>
 80130ec:	4621      	mov	r1, r4
 80130ee:	4628      	mov	r0, r5
 80130f0:	f000 f82a 	bl	8013148 <__swsetup_r>
 80130f4:	b118      	cbz	r0, 80130fe <__swbuf_r+0x32>
 80130f6:	f04f 37ff 	mov.w	r7, #4294967295
 80130fa:	4638      	mov	r0, r7
 80130fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80130fe:	6823      	ldr	r3, [r4, #0]
 8013100:	6922      	ldr	r2, [r4, #16]
 8013102:	1a98      	subs	r0, r3, r2
 8013104:	6963      	ldr	r3, [r4, #20]
 8013106:	b2f6      	uxtb	r6, r6
 8013108:	4283      	cmp	r3, r0
 801310a:	4637      	mov	r7, r6
 801310c:	dc05      	bgt.n	801311a <__swbuf_r+0x4e>
 801310e:	4621      	mov	r1, r4
 8013110:	4628      	mov	r0, r5
 8013112:	f7ff fda7 	bl	8012c64 <_fflush_r>
 8013116:	2800      	cmp	r0, #0
 8013118:	d1ed      	bne.n	80130f6 <__swbuf_r+0x2a>
 801311a:	68a3      	ldr	r3, [r4, #8]
 801311c:	3b01      	subs	r3, #1
 801311e:	60a3      	str	r3, [r4, #8]
 8013120:	6823      	ldr	r3, [r4, #0]
 8013122:	1c5a      	adds	r2, r3, #1
 8013124:	6022      	str	r2, [r4, #0]
 8013126:	701e      	strb	r6, [r3, #0]
 8013128:	6962      	ldr	r2, [r4, #20]
 801312a:	1c43      	adds	r3, r0, #1
 801312c:	429a      	cmp	r2, r3
 801312e:	d004      	beq.n	801313a <__swbuf_r+0x6e>
 8013130:	89a3      	ldrh	r3, [r4, #12]
 8013132:	07db      	lsls	r3, r3, #31
 8013134:	d5e1      	bpl.n	80130fa <__swbuf_r+0x2e>
 8013136:	2e0a      	cmp	r6, #10
 8013138:	d1df      	bne.n	80130fa <__swbuf_r+0x2e>
 801313a:	4621      	mov	r1, r4
 801313c:	4628      	mov	r0, r5
 801313e:	f7ff fd91 	bl	8012c64 <_fflush_r>
 8013142:	2800      	cmp	r0, #0
 8013144:	d0d9      	beq.n	80130fa <__swbuf_r+0x2e>
 8013146:	e7d6      	b.n	80130f6 <__swbuf_r+0x2a>

08013148 <__swsetup_r>:
 8013148:	b538      	push	{r3, r4, r5, lr}
 801314a:	4b29      	ldr	r3, [pc, #164]	@ (80131f0 <__swsetup_r+0xa8>)
 801314c:	4605      	mov	r5, r0
 801314e:	6818      	ldr	r0, [r3, #0]
 8013150:	460c      	mov	r4, r1
 8013152:	b118      	cbz	r0, 801315c <__swsetup_r+0x14>
 8013154:	6a03      	ldr	r3, [r0, #32]
 8013156:	b90b      	cbnz	r3, 801315c <__swsetup_r+0x14>
 8013158:	f7fd ff82 	bl	8011060 <__sinit>
 801315c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013160:	0719      	lsls	r1, r3, #28
 8013162:	d422      	bmi.n	80131aa <__swsetup_r+0x62>
 8013164:	06da      	lsls	r2, r3, #27
 8013166:	d407      	bmi.n	8013178 <__swsetup_r+0x30>
 8013168:	2209      	movs	r2, #9
 801316a:	602a      	str	r2, [r5, #0]
 801316c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013170:	81a3      	strh	r3, [r4, #12]
 8013172:	f04f 30ff 	mov.w	r0, #4294967295
 8013176:	e033      	b.n	80131e0 <__swsetup_r+0x98>
 8013178:	0758      	lsls	r0, r3, #29
 801317a:	d512      	bpl.n	80131a2 <__swsetup_r+0x5a>
 801317c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801317e:	b141      	cbz	r1, 8013192 <__swsetup_r+0x4a>
 8013180:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013184:	4299      	cmp	r1, r3
 8013186:	d002      	beq.n	801318e <__swsetup_r+0x46>
 8013188:	4628      	mov	r0, r5
 801318a:	f7fe ff0d 	bl	8011fa8 <_free_r>
 801318e:	2300      	movs	r3, #0
 8013190:	6363      	str	r3, [r4, #52]	@ 0x34
 8013192:	89a3      	ldrh	r3, [r4, #12]
 8013194:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013198:	81a3      	strh	r3, [r4, #12]
 801319a:	2300      	movs	r3, #0
 801319c:	6063      	str	r3, [r4, #4]
 801319e:	6923      	ldr	r3, [r4, #16]
 80131a0:	6023      	str	r3, [r4, #0]
 80131a2:	89a3      	ldrh	r3, [r4, #12]
 80131a4:	f043 0308 	orr.w	r3, r3, #8
 80131a8:	81a3      	strh	r3, [r4, #12]
 80131aa:	6923      	ldr	r3, [r4, #16]
 80131ac:	b94b      	cbnz	r3, 80131c2 <__swsetup_r+0x7a>
 80131ae:	89a3      	ldrh	r3, [r4, #12]
 80131b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80131b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80131b8:	d003      	beq.n	80131c2 <__swsetup_r+0x7a>
 80131ba:	4621      	mov	r1, r4
 80131bc:	4628      	mov	r0, r5
 80131be:	f000 f883 	bl	80132c8 <__smakebuf_r>
 80131c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80131c6:	f013 0201 	ands.w	r2, r3, #1
 80131ca:	d00a      	beq.n	80131e2 <__swsetup_r+0x9a>
 80131cc:	2200      	movs	r2, #0
 80131ce:	60a2      	str	r2, [r4, #8]
 80131d0:	6962      	ldr	r2, [r4, #20]
 80131d2:	4252      	negs	r2, r2
 80131d4:	61a2      	str	r2, [r4, #24]
 80131d6:	6922      	ldr	r2, [r4, #16]
 80131d8:	b942      	cbnz	r2, 80131ec <__swsetup_r+0xa4>
 80131da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80131de:	d1c5      	bne.n	801316c <__swsetup_r+0x24>
 80131e0:	bd38      	pop	{r3, r4, r5, pc}
 80131e2:	0799      	lsls	r1, r3, #30
 80131e4:	bf58      	it	pl
 80131e6:	6962      	ldrpl	r2, [r4, #20]
 80131e8:	60a2      	str	r2, [r4, #8]
 80131ea:	e7f4      	b.n	80131d6 <__swsetup_r+0x8e>
 80131ec:	2000      	movs	r0, #0
 80131ee:	e7f7      	b.n	80131e0 <__swsetup_r+0x98>
 80131f0:	20000240 	.word	0x20000240

080131f4 <_raise_r>:
 80131f4:	291f      	cmp	r1, #31
 80131f6:	b538      	push	{r3, r4, r5, lr}
 80131f8:	4605      	mov	r5, r0
 80131fa:	460c      	mov	r4, r1
 80131fc:	d904      	bls.n	8013208 <_raise_r+0x14>
 80131fe:	2316      	movs	r3, #22
 8013200:	6003      	str	r3, [r0, #0]
 8013202:	f04f 30ff 	mov.w	r0, #4294967295
 8013206:	bd38      	pop	{r3, r4, r5, pc}
 8013208:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801320a:	b112      	cbz	r2, 8013212 <_raise_r+0x1e>
 801320c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013210:	b94b      	cbnz	r3, 8013226 <_raise_r+0x32>
 8013212:	4628      	mov	r0, r5
 8013214:	f000 f830 	bl	8013278 <_getpid_r>
 8013218:	4622      	mov	r2, r4
 801321a:	4601      	mov	r1, r0
 801321c:	4628      	mov	r0, r5
 801321e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013222:	f000 b817 	b.w	8013254 <_kill_r>
 8013226:	2b01      	cmp	r3, #1
 8013228:	d00a      	beq.n	8013240 <_raise_r+0x4c>
 801322a:	1c59      	adds	r1, r3, #1
 801322c:	d103      	bne.n	8013236 <_raise_r+0x42>
 801322e:	2316      	movs	r3, #22
 8013230:	6003      	str	r3, [r0, #0]
 8013232:	2001      	movs	r0, #1
 8013234:	e7e7      	b.n	8013206 <_raise_r+0x12>
 8013236:	2100      	movs	r1, #0
 8013238:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801323c:	4620      	mov	r0, r4
 801323e:	4798      	blx	r3
 8013240:	2000      	movs	r0, #0
 8013242:	e7e0      	b.n	8013206 <_raise_r+0x12>

08013244 <raise>:
 8013244:	4b02      	ldr	r3, [pc, #8]	@ (8013250 <raise+0xc>)
 8013246:	4601      	mov	r1, r0
 8013248:	6818      	ldr	r0, [r3, #0]
 801324a:	f7ff bfd3 	b.w	80131f4 <_raise_r>
 801324e:	bf00      	nop
 8013250:	20000240 	.word	0x20000240

08013254 <_kill_r>:
 8013254:	b538      	push	{r3, r4, r5, lr}
 8013256:	4d07      	ldr	r5, [pc, #28]	@ (8013274 <_kill_r+0x20>)
 8013258:	2300      	movs	r3, #0
 801325a:	4604      	mov	r4, r0
 801325c:	4608      	mov	r0, r1
 801325e:	4611      	mov	r1, r2
 8013260:	602b      	str	r3, [r5, #0]
 8013262:	f7f7 ffeb 	bl	800b23c <_kill>
 8013266:	1c43      	adds	r3, r0, #1
 8013268:	d102      	bne.n	8013270 <_kill_r+0x1c>
 801326a:	682b      	ldr	r3, [r5, #0]
 801326c:	b103      	cbz	r3, 8013270 <_kill_r+0x1c>
 801326e:	6023      	str	r3, [r4, #0]
 8013270:	bd38      	pop	{r3, r4, r5, pc}
 8013272:	bf00      	nop
 8013274:	20000dd0 	.word	0x20000dd0

08013278 <_getpid_r>:
 8013278:	f7f7 bfd8 	b.w	800b22c <_getpid>

0801327c <__swhatbuf_r>:
 801327c:	b570      	push	{r4, r5, r6, lr}
 801327e:	460c      	mov	r4, r1
 8013280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013284:	2900      	cmp	r1, #0
 8013286:	b096      	sub	sp, #88	@ 0x58
 8013288:	4615      	mov	r5, r2
 801328a:	461e      	mov	r6, r3
 801328c:	da0d      	bge.n	80132aa <__swhatbuf_r+0x2e>
 801328e:	89a3      	ldrh	r3, [r4, #12]
 8013290:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013294:	f04f 0100 	mov.w	r1, #0
 8013298:	bf14      	ite	ne
 801329a:	2340      	movne	r3, #64	@ 0x40
 801329c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80132a0:	2000      	movs	r0, #0
 80132a2:	6031      	str	r1, [r6, #0]
 80132a4:	602b      	str	r3, [r5, #0]
 80132a6:	b016      	add	sp, #88	@ 0x58
 80132a8:	bd70      	pop	{r4, r5, r6, pc}
 80132aa:	466a      	mov	r2, sp
 80132ac:	f000 f848 	bl	8013340 <_fstat_r>
 80132b0:	2800      	cmp	r0, #0
 80132b2:	dbec      	blt.n	801328e <__swhatbuf_r+0x12>
 80132b4:	9901      	ldr	r1, [sp, #4]
 80132b6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80132ba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80132be:	4259      	negs	r1, r3
 80132c0:	4159      	adcs	r1, r3
 80132c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80132c6:	e7eb      	b.n	80132a0 <__swhatbuf_r+0x24>

080132c8 <__smakebuf_r>:
 80132c8:	898b      	ldrh	r3, [r1, #12]
 80132ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80132cc:	079d      	lsls	r5, r3, #30
 80132ce:	4606      	mov	r6, r0
 80132d0:	460c      	mov	r4, r1
 80132d2:	d507      	bpl.n	80132e4 <__smakebuf_r+0x1c>
 80132d4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80132d8:	6023      	str	r3, [r4, #0]
 80132da:	6123      	str	r3, [r4, #16]
 80132dc:	2301      	movs	r3, #1
 80132de:	6163      	str	r3, [r4, #20]
 80132e0:	b003      	add	sp, #12
 80132e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80132e4:	ab01      	add	r3, sp, #4
 80132e6:	466a      	mov	r2, sp
 80132e8:	f7ff ffc8 	bl	801327c <__swhatbuf_r>
 80132ec:	9f00      	ldr	r7, [sp, #0]
 80132ee:	4605      	mov	r5, r0
 80132f0:	4639      	mov	r1, r7
 80132f2:	4630      	mov	r0, r6
 80132f4:	f7fe fecc 	bl	8012090 <_malloc_r>
 80132f8:	b948      	cbnz	r0, 801330e <__smakebuf_r+0x46>
 80132fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80132fe:	059a      	lsls	r2, r3, #22
 8013300:	d4ee      	bmi.n	80132e0 <__smakebuf_r+0x18>
 8013302:	f023 0303 	bic.w	r3, r3, #3
 8013306:	f043 0302 	orr.w	r3, r3, #2
 801330a:	81a3      	strh	r3, [r4, #12]
 801330c:	e7e2      	b.n	80132d4 <__smakebuf_r+0xc>
 801330e:	89a3      	ldrh	r3, [r4, #12]
 8013310:	6020      	str	r0, [r4, #0]
 8013312:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013316:	81a3      	strh	r3, [r4, #12]
 8013318:	9b01      	ldr	r3, [sp, #4]
 801331a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801331e:	b15b      	cbz	r3, 8013338 <__smakebuf_r+0x70>
 8013320:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013324:	4630      	mov	r0, r6
 8013326:	f000 f81d 	bl	8013364 <_isatty_r>
 801332a:	b128      	cbz	r0, 8013338 <__smakebuf_r+0x70>
 801332c:	89a3      	ldrh	r3, [r4, #12]
 801332e:	f023 0303 	bic.w	r3, r3, #3
 8013332:	f043 0301 	orr.w	r3, r3, #1
 8013336:	81a3      	strh	r3, [r4, #12]
 8013338:	89a3      	ldrh	r3, [r4, #12]
 801333a:	431d      	orrs	r5, r3
 801333c:	81a5      	strh	r5, [r4, #12]
 801333e:	e7cf      	b.n	80132e0 <__smakebuf_r+0x18>

08013340 <_fstat_r>:
 8013340:	b538      	push	{r3, r4, r5, lr}
 8013342:	4d07      	ldr	r5, [pc, #28]	@ (8013360 <_fstat_r+0x20>)
 8013344:	2300      	movs	r3, #0
 8013346:	4604      	mov	r4, r0
 8013348:	4608      	mov	r0, r1
 801334a:	4611      	mov	r1, r2
 801334c:	602b      	str	r3, [r5, #0]
 801334e:	f7f7 ffd5 	bl	800b2fc <_fstat>
 8013352:	1c43      	adds	r3, r0, #1
 8013354:	d102      	bne.n	801335c <_fstat_r+0x1c>
 8013356:	682b      	ldr	r3, [r5, #0]
 8013358:	b103      	cbz	r3, 801335c <_fstat_r+0x1c>
 801335a:	6023      	str	r3, [r4, #0]
 801335c:	bd38      	pop	{r3, r4, r5, pc}
 801335e:	bf00      	nop
 8013360:	20000dd0 	.word	0x20000dd0

08013364 <_isatty_r>:
 8013364:	b538      	push	{r3, r4, r5, lr}
 8013366:	4d06      	ldr	r5, [pc, #24]	@ (8013380 <_isatty_r+0x1c>)
 8013368:	2300      	movs	r3, #0
 801336a:	4604      	mov	r4, r0
 801336c:	4608      	mov	r0, r1
 801336e:	602b      	str	r3, [r5, #0]
 8013370:	f7f7 ffd4 	bl	800b31c <_isatty>
 8013374:	1c43      	adds	r3, r0, #1
 8013376:	d102      	bne.n	801337e <_isatty_r+0x1a>
 8013378:	682b      	ldr	r3, [r5, #0]
 801337a:	b103      	cbz	r3, 801337e <_isatty_r+0x1a>
 801337c:	6023      	str	r3, [r4, #0]
 801337e:	bd38      	pop	{r3, r4, r5, pc}
 8013380:	20000dd0 	.word	0x20000dd0
 8013384:	00000000 	.word	0x00000000

08013388 <ceil>:
 8013388:	ec51 0b10 	vmov	r0, r1, d0
 801338c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013394:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8013398:	2e13      	cmp	r6, #19
 801339a:	460c      	mov	r4, r1
 801339c:	4605      	mov	r5, r0
 801339e:	4680      	mov	r8, r0
 80133a0:	dc2e      	bgt.n	8013400 <ceil+0x78>
 80133a2:	2e00      	cmp	r6, #0
 80133a4:	da11      	bge.n	80133ca <ceil+0x42>
 80133a6:	a332      	add	r3, pc, #200	@ (adr r3, 8013470 <ceil+0xe8>)
 80133a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133ac:	f7f4 fea6 	bl	80080fc <__adddf3>
 80133b0:	2200      	movs	r2, #0
 80133b2:	2300      	movs	r3, #0
 80133b4:	f7f5 fae8 	bl	8008988 <__aeabi_dcmpgt>
 80133b8:	b120      	cbz	r0, 80133c4 <ceil+0x3c>
 80133ba:	2c00      	cmp	r4, #0
 80133bc:	db4f      	blt.n	801345e <ceil+0xd6>
 80133be:	4325      	orrs	r5, r4
 80133c0:	d151      	bne.n	8013466 <ceil+0xde>
 80133c2:	462c      	mov	r4, r5
 80133c4:	4621      	mov	r1, r4
 80133c6:	4628      	mov	r0, r5
 80133c8:	e023      	b.n	8013412 <ceil+0x8a>
 80133ca:	4f2b      	ldr	r7, [pc, #172]	@ (8013478 <ceil+0xf0>)
 80133cc:	4137      	asrs	r7, r6
 80133ce:	ea01 0307 	and.w	r3, r1, r7
 80133d2:	4303      	orrs	r3, r0
 80133d4:	d01d      	beq.n	8013412 <ceil+0x8a>
 80133d6:	a326      	add	r3, pc, #152	@ (adr r3, 8013470 <ceil+0xe8>)
 80133d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133dc:	f7f4 fe8e 	bl	80080fc <__adddf3>
 80133e0:	2200      	movs	r2, #0
 80133e2:	2300      	movs	r3, #0
 80133e4:	f7f5 fad0 	bl	8008988 <__aeabi_dcmpgt>
 80133e8:	2800      	cmp	r0, #0
 80133ea:	d0eb      	beq.n	80133c4 <ceil+0x3c>
 80133ec:	2c00      	cmp	r4, #0
 80133ee:	bfc2      	ittt	gt
 80133f0:	f44f 1380 	movgt.w	r3, #1048576	@ 0x100000
 80133f4:	4133      	asrgt	r3, r6
 80133f6:	18e4      	addgt	r4, r4, r3
 80133f8:	ea24 0407 	bic.w	r4, r4, r7
 80133fc:	2500      	movs	r5, #0
 80133fe:	e7e1      	b.n	80133c4 <ceil+0x3c>
 8013400:	2e33      	cmp	r6, #51	@ 0x33
 8013402:	dd0a      	ble.n	801341a <ceil+0x92>
 8013404:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8013408:	d103      	bne.n	8013412 <ceil+0x8a>
 801340a:	4602      	mov	r2, r0
 801340c:	460b      	mov	r3, r1
 801340e:	f7f4 fe75 	bl	80080fc <__adddf3>
 8013412:	ec41 0b10 	vmov	d0, r0, r1
 8013416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801341a:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 801341e:	f04f 37ff 	mov.w	r7, #4294967295
 8013422:	40df      	lsrs	r7, r3
 8013424:	4238      	tst	r0, r7
 8013426:	d0f4      	beq.n	8013412 <ceil+0x8a>
 8013428:	a311      	add	r3, pc, #68	@ (adr r3, 8013470 <ceil+0xe8>)
 801342a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801342e:	f7f4 fe65 	bl	80080fc <__adddf3>
 8013432:	2200      	movs	r2, #0
 8013434:	2300      	movs	r3, #0
 8013436:	f7f5 faa7 	bl	8008988 <__aeabi_dcmpgt>
 801343a:	2800      	cmp	r0, #0
 801343c:	d0c2      	beq.n	80133c4 <ceil+0x3c>
 801343e:	2c00      	cmp	r4, #0
 8013440:	dd0a      	ble.n	8013458 <ceil+0xd0>
 8013442:	2e14      	cmp	r6, #20
 8013444:	d101      	bne.n	801344a <ceil+0xc2>
 8013446:	3401      	adds	r4, #1
 8013448:	e006      	b.n	8013458 <ceil+0xd0>
 801344a:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801344e:	2301      	movs	r3, #1
 8013450:	40b3      	lsls	r3, r6
 8013452:	441d      	add	r5, r3
 8013454:	45a8      	cmp	r8, r5
 8013456:	d8f6      	bhi.n	8013446 <ceil+0xbe>
 8013458:	ea25 0507 	bic.w	r5, r5, r7
 801345c:	e7b2      	b.n	80133c4 <ceil+0x3c>
 801345e:	2500      	movs	r5, #0
 8013460:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8013464:	e7ae      	b.n	80133c4 <ceil+0x3c>
 8013466:	4c05      	ldr	r4, [pc, #20]	@ (801347c <ceil+0xf4>)
 8013468:	2500      	movs	r5, #0
 801346a:	e7ab      	b.n	80133c4 <ceil+0x3c>
 801346c:	f3af 8000 	nop.w
 8013470:	8800759c 	.word	0x8800759c
 8013474:	7e37e43c 	.word	0x7e37e43c
 8013478:	000fffff 	.word	0x000fffff
 801347c:	3ff00000 	.word	0x3ff00000

08013480 <_init>:
 8013480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013482:	bf00      	nop
 8013484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013486:	bc08      	pop	{r3}
 8013488:	469e      	mov	lr, r3
 801348a:	4770      	bx	lr

0801348c <_fini>:
 801348c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801348e:	bf00      	nop
 8013490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013492:	bc08      	pop	{r3}
 8013494:	469e      	mov	lr, r3
 8013496:	4770      	bx	lr
